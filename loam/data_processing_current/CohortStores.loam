import ProjectConfig._
import PipelineConfig._
import StoreHelpers._
import ArrayStores._

final case class CohortData(
  base: Path,
  data: Option[Seq[Store]] = None,
  samples: Store,
  famMerge: Option[Store] = None)

final case class Cohort(
  cohortData: CohortData)

val cohortStores = projectConfig.Cohorts.map(c => c.id).map { cohort =>

  val ancestryString = projectConfig.Cohorts(cohort).ancestry.mkString("_")
  val baseString = s"${projectConfig.projectId}.${projectConfig.Cohorts(cohort).array}.${ancestryString}"

  val cohortData = CohortData(
    base = localOutDir / baseString,
    data = if ( projectConfig.Metas.flatMap(_.cohorts) contains cohort ) { bedBimFam(localOutDir / baseString) } else { None },
    samples = store.at(localOutDir / s"${baseString}.samples.tsv"),
    famMerge = if ( projectConfig.Metas.flatMap(_.cohorts) contains cohort ) { store.at(localOutDir / s"${baseString}.merge.fam") } else { None })

  cohort -> Cohort(
    cohortData = cohortData)

}.toMap
