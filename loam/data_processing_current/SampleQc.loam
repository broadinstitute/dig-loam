/**
 * Sample QC Stats Calculation Step
 *  Description: Calculate sexcheck and sample by variant statistics for all samples
 *  Requires: Hail, R
 */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._

def SampleQc(array: String): Unit = {

  local {

    googleCopy(ProjectStores.ancestryInferred, ProjectStores.ancestryInferredGoogle)
    googleCopy(ProjectStores.pheno, ProjectStores.phenoGoogle)

  }
  
  google {

    hail"""$pyHailSexcheck
      --vds-in ${arrayStores(array).harmonizedData.vdsGoogle}
      --regions-exclude ${ProjectStores.regionsExcludeGoogle}
      --pheno-in ${ProjectStores.phenoGoogle}
      --id-col ${projectConfig.phenoId}
      --sex-col ${projectConfig.phenoSrSex}
      --sexcheck-out ${arrayStores(array).sexcheckData.sexcheckGoogle}
      --sexcheck-problems-out ${arrayStores(array).sexcheckData.problemsGoogle}"""
      .in(ProjectStores.phenoGoogle, arrayStores(array).harmonizedData.vdsGoogle, ProjectStores.regionsExcludeGoogle)
      .out(arrayStores(array).sexcheckData.sexcheckGoogle, arrayStores(array).sexcheckData.problemsGoogle)
      .named(s"${arrayStores(array).sexcheckData.sexcheck}.google".split("/").last)
  
    hail"""$pyHailSampleqc
      --vds-in ${arrayStores(array).prunedData.vdsGoogle}
      --clusters-in ${ProjectStores.ancestryInferredGoogle}
      --qc-out ${arrayStores(array).sampleQcData.statsGoogle}"""
      .in(arrayStores(array).prunedData.vdsGoogle, ProjectStores.ancestryInferredGoogle)
      .out(arrayStores(array).sampleQcData.statsGoogle)
      .named(s"${arrayStores(array).sampleQcData.stats}.google".split("/").last)

  }
  
  local {

    googleCopy(arrayStores(array).sampleQcData.statsGoogle, arrayStores(array).sampleQcData.stats)

  }
  
  uger {

    cmd"""$binRscript --vanilla --verbose
      $rCalcIstatsAdj
      --sampleqc-stats ${arrayStores(array).sampleQcData.stats}
      --pca-scores ${arrayStores(array).pcaData.scores}
      --out ${arrayStores(array).sampleQcData.statsAdj}"""
      .in(arrayStores(array).sampleQcData.stats, arrayStores(array).pcaData.scores)
      .out(arrayStores(array).sampleQcData.statsAdj)
      .using("R-3.4")
      .named(s"${arrayStores(array).sampleQcData.statsAdj}".split("/").last)
  
    cmd"""$binRscript --vanilla --verbose
      $rIstatsAdjPca
      --sampleqc-stats-adj ${arrayStores(array).sampleQcData.statsAdj}
      --corr-plots ${arrayStores(array).sampleQcData.corrPlots}
      --pca-loadings ${arrayStores(array).sampleQcData.pcaLoadings}
      --pca-scores-plots ${arrayStores(array).sampleQcData.pcaPlots}
      --pca-scores ${arrayStores(array).sampleQcData.pcaScores}"""
      .in(arrayStores(array).sampleQcData.statsAdj)
      .out(arrayStores(array).sampleQcData.corrPlots, arrayStores(array).sampleQcData.pcaLoadings, arrayStores(array).sampleQcData.pcaPlots, arrayStores(array).sampleQcData.pcaScores)
      .using("R-3.4")
      .named(s"${arrayStores(array).sampleQcData.statsAdj}.rIstatsAdjPca".split("/").last)

  }
  
  local {

    googleCopy(arrayStores(array).sexcheckData.sexcheckGoogle, arrayStores(array).sexcheckData.sexcheck)
    googleCopy(arrayStores(array).sexcheckData.problemsGoogle, arrayStores(array).sexcheckData.problems)

  }
  
  /**
   * Sample QC PCA Clustering Step
   *  Description: Cluster PCs of adjusted sample QC metrics
   *  Requires: Klustakwik, R
   */
  
  ugerWith(mem=8) {

    cmd"""(N=$$(head -1 ${arrayStores(array).sampleQcData.pcaScores} | wc | awk '{print $$2-1}') &&
      echo $$N) > ${arrayStores(array).sampleQcPcaClusterData.fet} &&
      sed '1d' ${arrayStores(array).sampleQcData.pcaScores} | cut -f2- | sed 's/\t/ /g' >> ${arrayStores(array).sampleQcPcaClusterData.fet} &&
      FEATURES=1; for i in $$(seq 2 $$N); do FEATURES=$${FEATURES}1; done &&
      $binKlustakwik ${arrayStores(array).sampleQcPcaClusterData.base} 1 -UseFeatures $$FEATURES -UseDistributional 0 >
      ${arrayStores(array).sampleQcPcaClusterData.log}"""
      .in(arrayStores(array).sampleQcData.pcaScores)
      .out(arrayStores(array).sampleQcPcaClusterData.fet, arrayStores(array).sampleQcPcaClusterData.clu, arrayStores(array).sampleQcPcaClusterData.klg, arrayStores(array).sampleQcPcaClusterData.log)
      .named(s"${arrayStores(array).sampleQcPcaClusterData.base}.binKlustakwik".split("/").last)

  }

  uger {

    cmd"""$binRscript --vanilla --verbose
      $rIstatsPcsGmmClusterPlot
      --pca-scores ${arrayStores(array).sampleQcData.pcaScores}
      --cluster ${arrayStores(array).sampleQcPcaClusterData.clu}
      --outliers ${arrayStores(array).sampleQcPcaClusterData.outliers}
      --plots ${arrayStores(array).sampleQcPcaClusterData.plots}
      --xtabs ${arrayStores(array).sampleQcPcaClusterData.xtab}
      --id ${projectConfig.projectId}"""
      .in(arrayStores(array).sampleQcData.pcaScores, arrayStores(array).sampleQcPcaClusterData.clu)
      .out(arrayStores(array).sampleQcPcaClusterData.outliers, arrayStores(array).sampleQcPcaClusterData.plots, arrayStores(array).sampleQcPcaClusterData.xtab)
      .using("R-3.4")
      .named(s"${arrayStores(array).sampleQcData.pcaScores}.rIstatsPcsGmmClusterPlot".split("/").last)
  
  }
  
  /**
   * Sample QC Individual Stats Clustering Step
   *  Description: Cluster PCs of adjusted sample QC metrics
   *  Requires: Klustakwik, R
   */
  
  for {
  
    (metric, metricData) <- arrayStores(array).sampleQcMetricClusterData
  
  } yield { 

    uger {
  
      cmd"""(metricIdx=`head -1 ${arrayStores(array).sampleQcData.statsAdj} | tr '\t' '\n' | awk '{print NR" "$$0}' | grep -w ${metric} | awk '{print $$1}'` &&
        echo 1 && sed '1d' ${arrayStores(array).sampleQcData.statsAdj} | awk -v col=$${metricIdx} '{print $$col}') > ${metricData.fet}"""
        .in(arrayStores(array).sampleQcData.statsAdj)
        .out(metricData.fet)
        .named(s"${metricData.fet}".split("/").last)
  
    }
  
    ugerWith(mem=8) {
  
      cmd"""$binKlustakwik ${metricData.base} 1 -UseFeatures 1 -UseDistributional 0 > ${metricData.log}"""
        .in(metricData.fet)
        .out(metricData.clu, metricData.klg, metricData.log)
        .named(s"${metricData.base}.binKlustakwik".split("/").last)
  
    }
  
  }

  val metricCluFiles = {

    for {
      m <- arrayStores(array).sampleQcMetricClusterData.map(e => e._1).toSeq
    } yield {
  
      m + "___" + s"${arrayStores(array).sampleQcMetricClusterData(m).clu.toString.split("@")(1)}"
  
    }
  
  }

  uger {
  
    cmd"""$binRscript --vanilla --verbose
      $rIstatsAdjGmmPlotMetrics
      --ind-clu-files "${metricCluFiles.mkString(",")}"
      --stats ${arrayStores(array).sampleQcData.stats}
      --stats-adj ${arrayStores(array).sampleQcData.statsAdj}
      --outliers ${arrayStores(array).sampleQcPcaClusterData.outliers}
      --boxplots ${arrayStores(array).sampleQcData.boxPlots}
      --discreteness ${arrayStores(array).sampleQcData.discreteness}
      --outliers-table ${arrayStores(array).sampleQcData.outliers}"""
      .in(arrayStores(array).sampleQcMetricClusterData.map(e => e._2).map(_.clu).toSeq :+ arrayStores(array).sampleQcData.stats :+ arrayStores(array).sampleQcData.statsAdj :+ arrayStores(array).sampleQcPcaClusterData.outliers)
      .out(arrayStores(array).sampleQcData.boxPlots, arrayStores(array).sampleQcData.discreteness, arrayStores(array).sampleQcData.outliers)
      .using("R-3.4")
      .named(s"${arrayStores(array).sampleQcData.stats}.rIstatsAdjGmmPlotMetrics".split("/").last)
  
    cmd"""$binRscript --vanilla --verbose
      $rMakeSampleqcOutlierPlot
      --ind-clu-files "${metricCluFiles.mkString(",")}"
      --stats-unadj ${arrayStores(array).sampleQcData.stats}
      --stats-adj ${arrayStores(array).sampleQcData.statsAdj}
      --metric-pca-outliers ${arrayStores(array).sampleQcPcaClusterData.outliers}
      --out ${arrayStores(array).sampleQcData.outliersPlotsPdf}"""
      .in(arrayStores(array).sampleQcMetricClusterData.map(e => e._2).map(_.clu).toSeq :+ arrayStores(array).sampleQcData.stats :+ arrayStores(array).sampleQcData.statsAdj :+ arrayStores(array).sampleQcPcaClusterData.outliers)
      .out(arrayStores(array).sampleQcData.outliersPlotsPdf)
      .using("R-3.4")
      .named(s"${arrayStores(array).sampleQcData.outliersPlotsPdf}".split("/").last)
  
    cmd"""$binConvert -density 300 -depth 8 -quality 100 -flatten ${arrayStores(array).sampleQcData.outliersPlotsPdf}[0] ${arrayStores(array).sampleQcData.outliersPlotsPng}"""
      .in(arrayStores(array).sampleQcData.outliersPlotsPdf)
      .out(arrayStores(array).sampleQcData.outliersPlotsPng)
      .named(s"${arrayStores(array).sampleQcData.outliersPlotsPng}".split("/").last)
  
  }
  
  /**
   * Compile Sample Exclusions Step
   * Requires: Python
   */
  
  uger {
  
    cmd"""$binPython $pyCompileExclusions
      --ancestry-inferred ${ProjectStores.ancestryInferred}
      --kinship-related ${arrayStores(array).kinshipData.kin0Related}
      --kinship-famsizes ${arrayStores(array).kinshipData.famSizes}
      --sampleqc-outliers ${arrayStores(array).sampleQcData.outliers}
      --sexcheck-problems ${arrayStores(array).sexcheckData.problems}
      --ancestry-keep ${projectConfig.ancestryOutliersKeep.mkString(",")}
      --duplicates-keep ${projectConfig.duplicatesKeep.mkString(",")}
      --famsize-keep ${projectConfig.famsizeKeep.mkString(",")}
      --sampleqc-keep ${projectConfig.sampleqcKeep.mkString(",")}
      --sexcheck-keep ${projectConfig.sexcheckKeep.mkString(",")}
      --out ${arrayStores(array).finalData.samplesExclude}"""
      .in(ProjectStores.ancestryInferred, arrayStores(array).kinshipData.kin0Related, arrayStores(array).kinshipData.famSizes, arrayStores(array).sampleQcData.outliers, arrayStores(array).sexcheckData.problems)
      .out(arrayStores(array).finalData.samplesExclude)
      .named(s"${arrayStores(array).finalData.samplesExclude}".split("/").last)
  
  }

}
