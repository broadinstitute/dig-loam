/**
  * Meta Step
  *  Description: Run meta analysis
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import AssocStores._
import MetaStores._

def MetaAnalysis(configModel: ConfigModel, configMeta: ConfigMeta): Unit = {

  val resultsList = {

    for {
      c <- configMeta.cohorts
    } yield {

      val result = assocStores.filter(e => e._1._1.isDefined).filter(e => e._1._1.get == configMeta).filter(e => e._1._3 == configModel).filter(e => e._1._2.id == c).map(e => e._2.resultsGoogle).toSeq(0)
      c + "___" + configModel.test + "___" + s"${result.toString.split("@")(1)}"
  
    }

  }

  google {

    hail"""$pyHailMetaAnalysis
      --results ${resultsList.mkString(",")}
      --out ${metaStores(configMeta.id).metaResultsData(configModel).resultsGoogle}"""
        .in(assocStores.filter(e => e._1._1.isDefined).filter(e => e._1._1 == configMeta).filter(e => e._1._3 == configModel).map(e => e._2.resultsGoogle).toSeq)
        .out(metaStores(configMeta.id).metaResultsData(configModel).resultsGoogle)
        .named(s"${metaStores(configMeta.id).metaResultsData(configModel).results}.google".split("/").last)
  
  }

  local {

    googleCopy(metaStores(configMeta.id).metaResultsData(configModel).resultsGoogle, metaStores(configMeta.id).metaResultsData(configModel).results)

  }
  
  uger {

    cmd"""$binTabix -f -b 2 -e 2 ${metaStores(configMeta.id).metaResultsData(configModel).results}"""
      .in(metaStores(configMeta.id).metaResultsData(configModel).results)
      .out(metaStores(configMeta.id).metaResultsData(configModel).tbi)
      .named(s"${metaStores(configMeta.id).metaResultsData(configModel).tbi}".split("/").last)

  }

}
