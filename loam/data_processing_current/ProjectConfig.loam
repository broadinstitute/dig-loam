import scala.util.{Try, Success, Failure}
import scala.util.control.NonFatal
import java.nio.file.{Paths, Files}

final case class ProjectConfigException(s: String) extends Exception(s)

final case class ProjectConfig(
  id: String,
  regExcl: Option[String],
  genePos: String,
  ancRefVcf: String)

object ProjectConfig {

  def requiredStr(config: loamstream.conf.DataConfig, s: String): String = {
    Try(config.getStr(s)) match {
      case Success(o)           => o
      case Failure(NonFatal(e)) => throw new ProjectConfigException("required field '" + s + "' not found")
      case Failure(_)           => throw new ProjectConfigException("requiredStr: fatal error")
    }
  }

  def optionalStr(config: loamstream.conf.DataConfig, s: String): Option[String] = {
    Try(config.getStr(s)) match {
      case Success(o)           => Some(o)
      case Failure(NonFatal(e)) => None
      case Failure(_)           => throw new ProjectConfigException("optionalStr: fatal error")
    }
  }

  def checkPath(s: String): String = {
    Files.exists(Paths.get(s)) match {
      case false => throw new ProjectConfigException("checkPath: " + s + " does not exist")
      case true  => s
    }
  }

  def parse(config: loamstream.conf.DataConfig): ProjectConfig = {

    val id = requiredStr(config, "id")
    id.matches("^[a-zA-Z0-9]*$") match {
      case false => throw new ProjectConfigException("'id' field value does not match regex format ^[a-zA-Z0-9]*$")
      case true  => println("id = " + id)
    }

    val regExcl = optionalStr(config, "regExcl")
    regExcl match {
      case Some(s) => println("regExcl = " + s)
      case None =>
    }

    val genePos = checkPath(requiredStr(config, "genePos"))
    println("genePos = " + genePos)

    val ancRefVcf = checkPath(requiredStr(config, "ancRefVcf"))
    println("ancRefVcf = " + ancRefVcf)

	new ProjectConfig(
      id = id,
      regExcl = regExcl,
      genePos = genePos,
      ancRefVcf = ancRefVcf)

  }

}
