val dataConfig = loadConfig("dataConfig", "")

final case class ConfigArray(
  id: String,
  filename: String,
  format: String,
  liftOver: Option[String] = None,
  xChr: Boolean)

final case class ConfigCohort(
  id: String,
  array: String,
  ancestry: Seq[String],
  report: Boolean)

final case class ConfigMeta(
  id: String,
  cohorts: Seq[String],
  report: Boolean)

final case class ConfigMerge(
  id: String,
  cohorts_metas: Seq[String],
  report: Boolean)

final case class ConfigKnownLoci(
  test: String,
  covars: String,
  data: String,
  hiLd: String,
  ancestry: Seq[String],
  n: String,
  nCase: String,
  nCtrl: String,
  desc: String,
  tag: String,
  citation: String)

final case class ConfigPhenotype(
  phenoName: String,
  phenoLongName: String,
  trans: String,
  tests: Seq[String],
  covars: Seq[String],
  knownLoci: Seq[ConfigKnownLoci])

final case class ConfigPhase(
  n: Int,
  phenotypes: Seq[ConfigPhenotype])

final case class ProjectConfig(
  projectId: String,
  regionsExclude: String,
  regionsExcludeGoogle: String,
  kgPurcellVcf: String,
  kgPurcellVcfGoogle: String,
  kgSample: String,
  kgSampleGoogle: String,
  kgSampleId: String,
  kgSamplePop: String,
  kgSampleGroup: String,
  kgVcfBaseWild: String,
  kgLegendWild: String,
  humanReferenceWild: String,
  pheno: String,
  phenoId: String,
  phenoSrSex: String,
  phenoSrRace: String,
  phenoStatus: String,
  qcReportAuthors: Seq[String],
  analysisReportAuthors: Seq[String],
  analysisReportAcknowledgements: Seq[String],
  nAncestryInferenceFeatures: Int,
  sampleQcMetrics: Seq[String],
  ancestryOutliersKeep: Seq[String],
  duplicatesKeep: Seq[String],
  famsizeKeep: Seq[String],
  sampleqcKeep: Seq[String],
  sexcheckKeep: Seq[String],
  ancestryInferenceFeatures: String,
  nArrays: Int,
  nCohorts: Int,
  nMetas: Int,
  nPhases: Int,
  nMetrics: Int,
  Arrays: Seq[ConfigArray],
  Cohorts: Seq[ConfigCohort],
  Metas: Seq[ConfigMeta],
  Merges: Seq[ConfigMerge],
  Phases: Seq[ConfigPhase])

val projectConfig = ProjectConfig(

  // required global values in conf file
  projectId = dataConfig.getStr("projectId"),
  regionsExclude = dataConfig.getStr("regionsExclude"),
  regionsExcludeGoogle = dataConfig.getStr("regionsExcludeGoogle"),
  kgPurcellVcf = dataConfig.getStr("kgPurcellVcf"),
  kgPurcellVcfGoogle = dataConfig.getStr("kgPurcellVcfGoogle"),
  kgSample = dataConfig.getStr("kgSample"),
  kgSampleGoogle = dataConfig.getStr("kgSampleGoogle"),
  kgSampleId = dataConfig.getStr("kgSampleId"),
  kgSamplePop = dataConfig.getStr("kgSamplePop"),
  kgSampleGroup = dataConfig.getStr("kgSampleGroup"),
  kgVcfBaseWild = dataConfig.getStr("kgVcfBaseWild"),
  kgLegendWild = dataConfig.getStr("kgLegendWild"),
  humanReferenceWild = dataConfig.getStr("humanReferenceWild"),
  pheno = dataConfig.getStr("pheno"),
  phenoId = dataConfig.getStr("phenoId"),
  phenoSrSex = dataConfig.getStr("phenoSrSex"),
  phenoSrRace = dataConfig.getStr("phenoSrRace"),
  phenoStatus = dataConfig.getStr("phenoStatus"),
  qcReportAuthors = dataConfig.getStrList("qcReportAuthors"),
  analysisReportAuthors = dataConfig.getStrList("analysisReportAuthors"),
  analysisReportAcknowledgements = dataConfig.getStrList("analysisReportAcknowledgements"),
  nAncestryInferenceFeatures = dataConfig.getInt("nAncestryInferenceFeatures"),
  sampleQcMetrics = dataConfig.getStrList("sampleQcMetrics"),
  ancestryOutliersKeep = dataConfig.getStrList("ancestryOutliersKeep"),
  duplicatesKeep = dataConfig.getStrList("duplicatesKeep"),
  famsizeKeep = dataConfig.getStrList("famsizeKeep"),
  sampleqcKeep = dataConfig.getStrList("sampleqcKeep"),
  sexcheckKeep = dataConfig.getStrList("sexcheckKeep"),

  // inferred global values
  ancestryInferenceFeatures = if (dataConfig.isDefined("nAncestryInferenceFeatures")) { "1" * dataConfig.getInt("nAncestryInferenceFeatures") + "0" * (20 - dataConfig.getInt("nAncestryInferenceFeatures")) } else { "1" * 3 + "0" * (20 - 3) },
  nArrays = dataConfig.getObjList("arrays").size,
  nCohorts = dataConfig.getObjList("cohorts").size,
  nMetas = dataConfig.getObjList("metas").size,
  nPhases = dataConfig.getObjList("phases").size,
  nMetrics = dataConfig.getStrList("sampleQcMetrics").size,

  // arrays
  Arrays = {

    for {
      array <- dataConfig.getObjList("arrays")
    } yield {

      ConfigArray(
        id = array.getStr("id"),
        filename = array.getStr("filename"),
        format = array.getStr("format"),
        liftOver = if (array.isDefined("liftOverChain")) { Some(array.getStr("liftOverChain")) } else { None },
        xChr = array.getBool("xChr"))

    }

  },

  Cohorts = {

    for {
      cohort <- dataConfig.getObjList("cohorts")
    } yield {

      ConfigCohort(
        id = cohort.getStr("id"),
        array = cohort.getStr("array"),
        ancestry = cohort.getStrList("ancestry"),
        report = cohort.getBool("report"))

    }

  },

  Metas = {

    for {
      meta <- dataConfig.getObjList("metas")
    } yield {

      ConfigMeta(
        id = meta.getStr("id"),
        cohorts = meta.getStrList("cohorts"),
        report = meta.getBool("report"))

    }

  },

  Merges = {

    for {
      merge <- dataConfig.getObjList("merges")
    } yield {

      ConfigMerge(
        id = merge.getStr("id"),
        cohorts_metas = merge.getStrList("cohorts_metas"),
        report = merge.getBool("report"))

    }

  },

  Phases = {

    var i: Int = 0

    for {
      phase <- dataConfig.getObjList("phases")
    } yield {

      i = i + 1

      val phenotypes = {

        var j: Int = 0

        for {
          phenotype <- dataConfig.getObjList("phases")(i-1).getObjList("phenotypes")
        } yield {

          j = j + 1

          val knownLoci = {

            for {
              knownloci <- dataConfig.getObjList("phases")(i-1).getObjList("phenotypes")(j-1).getObjList("knownLoci")
            } yield {

              ConfigKnownLoci(
                test = knownloci.getStr("test"),
                covars = knownloci.getStr("covars"),
                data = knownloci.getStr("data"),
                hiLd = knownloci.getStr("hiLd"),
                ancestry = knownloci.getStrList("ancestry"),
                n = if(knownloci.isDefined("n")) { knownloci.getStr("n") } else { "" },
                nCase = if(knownloci.isDefined("nCase")) { knownloci.getStr("nCase") } else { "" },
                nCtrl = if(knownloci.isDefined("nCtrl")) { knownloci.getStr("nCtrl") } else { "" },
                desc = knownloci.getStr("desc"),
                tag = knownloci.getStr("tag"),
                citation = knownloci.getStr("citation"))

            }

          }

          ConfigPhenotype(
            phenoName = phenotype.getStr("phenoName"),
            phenoLongName = phenotype.getStr("phenoLongName"),
            trans = phenotype.getStr("trans"),
            tests = phenotype.getStrList("tests"),
            covars = phenotype.getStrList("covars"),
            knownLoci = knownLoci)

        }

      }

      ConfigPhase(
        n = i,
        phenotypes = phenotypes)

    }

  }

)
