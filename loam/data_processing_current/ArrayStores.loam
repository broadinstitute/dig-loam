import ProjectConfig._
import PipelineConfig._
import StoreHelpers._

final case class RawData(
  data: Seq[Store],
  base: String,
  rawBase: Path,
  unplaced: Store,
  unique: Store,
  indel: Store,
  lmiss: Store,
  imiss: Store,
  imissRemove: Store,
  freq: Store,
  mono: Store,
  dupRemove: Store)

final case class PreparedData(
  data: Seq[Store],
  base: Path,
  multiallelic: Store,
  chain: Option[Store] = None,
  bed: Option[Store] = None,
  lifted: Option[Store] = None,
  unlifted: Option[Store] = None,
  liftedUpdate: Option[Store] = None,
  liftedExtract: Option[Store] = None)

final case class AnnotatedData(
  data: Seq[Store],
  base: Path)

final case class AnnotatedChrData(
  data: Seq[Store],
  base: Path,
  mergedKgBase: Path,
  mergedKg: Seq[Store],
  mergedKgHuRefBase: Path,
  mergedKgHuRef: Seq[Store],
  mergedKgNonKgBase: Path,
  nonKgRemove: Store,
  nonKgIgnore: Store,
  nonKgMono: Store,
  nonKgNomatch: Store,
  nonKgFlip: Store,
  nonKgForceA1: Store,
  mergedKgVarIdUpdate: Store,
  mergedKgVarSnpLog: Store)

final case class HarmonizedData(
  data: Seq[Store],
  base: Path,
  mergeList: Store,
  nonKgRemove: Store,
  nonKgIgnore: Store,
  nonKgMono: Store,
  nonKgNomatch: Store,
  nonKgFlip: Store,
  nonKgForceA1: Store,
  mergedKgVarIdUpdate: Store,
  mergedKgVarSnpLog: Store,
  forceA2: Store,
  refData: Seq[Store],
  refBase: Path,
  vcf: Store,
  tbi: Store)

final case class Array(
  rawData: RawData,
  preparedData: PreparedData,
  annotatedData: AnnotatedData,
  annotatedChrData: Map[Int, AnnotatedChrData],
  harmonizedData: HarmonizedData)

val arrayStores = projectConfig.Arrays.map(a => a.id).map { array =>

  val arrayCfg = projectConfig.Arrays.filter(_.id == array)(0)
  val base = arrayCfg.filename
  val rawBase = localOutDir / s"${projectConfig.projectId}.${arrayCfg.id}.raw"
  val preparedBase = localOutDir / s"${projectConfig.projectId}.${arrayCfg.id}.prepared"
  val annotatedBase = localOutDir / s"${projectConfig.projectId}.${arrayCfg.id}.prepared.annotated"
  val harmonizedBase = localOutDir / s"${projectConfig.projectId}.${arrayCfg.id}.harmonized"
  val refBase = localOutDir / s"${projectConfig.projectId}.${arrayCfg.id}.ref"

  val rawData = RawData(
    data = Seq(store.at(path(arrayCfg.filename + s".bed")).asInput,store.at(path(arrayCfg.filename + s".bim")).asInput,store.at(path(arrayCfg.filename + s".fam")).asInput),
    base = base,
    rawBase = rawBase,
    unplaced = store.at(s"${rawBase}.unplaced"),
    unique = store.at(s"${rawBase}.unique"),
    indel = store.at(s"${rawBase}.indel"),
    lmiss = store.at(s"${rawBase}.missing.lmiss"),
    imiss = store.at(s"${rawBase}.missing.imiss"),
    imissRemove = store.at(s"${rawBase}.missing.imiss.remove"),
    freq = store.at(s"${rawBase}.freq.frq"),
    mono = store.at(s"${rawBase}.mono"),
    dupRemove = store.at(s"${rawBase}.dup.remove"))

  val preparedData = PreparedData(
    data = bedBimFam(preparedBase),
    base = preparedBase,
    multiallelic = store.at(s"${preparedBase}.multiallelic"),
    chain = arrayCfg.liftOver.map(s => store.at(path(s))),
    bed = arrayCfg.liftOver.map(s => store.at(s"${preparedBase}.liftover.bed")),
    lifted = arrayCfg.liftOver.map(s => store.at(s"${preparedBase}.lifted")),
    unlifted = arrayCfg.liftOver.map(s => store.at(s"${preparedBase}.unlifted")),
    liftedUpdate = arrayCfg.liftOver.map(s => store.at(s"${preparedBase}.lifted.update")),
    liftedExtract = arrayCfg.liftOver.map(s => store.at(s"${preparedBase}.lifted.extract")))

  val annotatedData = AnnotatedData(
    data = arrayCfg.liftOver match {
      case Some(s) => bedBimFam(annotatedBase)
      case None => preparedData.data 
    },
    base = arrayCfg.liftOver match {
      case Some(s) => annotatedBase
      case None => preparedBase 
    })

  val annotatedChrData = ( 1 until { if ( arrayCfg.xChr ) 23 else 22 } ).map { chr =>

    val chrBase = localOutDir / s"${projectConfig.projectId}.${arrayCfg.id}.chr${chr}"
    val mergedKgBase = localOutDir / s"${chrBase}.harmkg"
    val mergedKgHuRefBase = localOutDir / s"${mergedKgBase}.huref"
    val mergedKgNonKgBase = localOutDir / s"${mergedKgBase}.nonkg"

    chr -> AnnotatedChrData(
      data = bedBimFam(chrBase),
      base = chrBase,
      mergedKgBase = mergedKgBase,
      mergedKg = bedBimFam(mergedKgBase),
      mergedKgHuRefBase = mergedKgHuRefBase,
      mergedKgHuRef = bedBimFam(mergedKgHuRefBase),
      mergedKgNonKgBase = mergedKgNonKgBase,
      nonKgRemove = store.at(localOutDir / s"${mergedKgNonKgBase}.remove"),
      nonKgIgnore = store.at(localOutDir / s"${mergedKgNonKgBase}.ignore"),
      nonKgMono = store.at(localOutDir / s"${mergedKgNonKgBase}.mono"),
      nonKgNomatch = store.at(localOutDir / s"${mergedKgNonKgBase}.nomatch"),
      nonKgFlip = store.at(localOutDir / s"${mergedKgNonKgBase}.flip"),
      nonKgForceA1 = store.at(localOutDir / s"${mergedKgNonKgBase}.force_a1"),
      mergedKgVarIdUpdate = store.at(localOutDir / s"${mergedKgBase}_idUpdates.txt"),
      mergedKgVarSnpLog = store.at(localOutDir / s"${mergedKgBase}_snpLog.log"))

  }.toMap

  val harmonizedData = HarmonizedData(
    data = bedBimFam(harmonizedBase),
    base = harmonizedBase,
    mergeList = store.at(localOutDir / s"${harmonizedBase}.merge.txt"),
    nonKgRemove = store.at(localOutDir / s"${harmonizedBase}.nonkg.remove"),
    nonKgIgnore = store.at(localOutDir / s"${harmonizedBase}.nonkg.ignore"),
    nonKgMono = store.at(localOutDir / s"${harmonizedBase}.nonkg.mono"),
    nonKgNomatch = store.at(localOutDir / s"${harmonizedBase}.nonkg.nomatch"),
    nonKgFlip = store.at(localOutDir / s"${harmonizedBase}.nonkg.flip"),
    nonKgForceA1 = store.at(localOutDir / s"${harmonizedBase}.nonkg.force_a1"),
    mergedKgVarIdUpdate = store.at(localOutDir / s"${harmonizedBase}_idUpdates.txt"),
    mergedKgVarSnpLog = store.at(localOutDir / s"${harmonizedBase}_snpLog.log"),
    forceA2 = store.at(localOutDir / s"${refBase}.force_a2.txt"),
    refData = bedBimFam(refBase),
    refBase = refBase,
    vcf = store.at(localOutDir / s"${refBase}.vcf.gz"),
    tbi = store.at(localOutDir / s"${refBase}.vcf.gz.tbi"))

  array -> Array(
    rawData = rawData,
    preparedData = preparedData,
    annotatedData = annotatedData,
    annotatedChrData = annotatedChrData,
    harmonizedData = harmonizedData)

}.toMap
