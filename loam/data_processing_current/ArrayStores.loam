import ProjectConfig._
import PipelineConfig._
import StoreHelpers._

final case class RawData(
  data: Seq[Store],
  base: Path,
  rawBase: Path,
  unplaced: Store,
  unique: Store,
  indel: Store,
  lmiss: Store,
  imiss: Store,
  imissRemove: Store,
  freq: Store,
  mono: Store,
  dupRemove: Store)

final case class PreparedData(
  data: Seq[Store],
  base: Path,
  multiallelic: Store,
  chain: Option[Store] = None,
  bed: Option[Store] = None,
  lifted: Option[Store] = None,
  unlifted: Option[Store] = None,
  liftedUpdate: Option[Store] = None,
  liftedExtract: Option[Store] = None)

final case class AnnotatedData(
  data: Seq[Store],
  base: Path)

final case class AnnotatedChrData(
  data: Seq[Store],
  base: Path,
  mergedKgBase: Path,
  mergedKg: Seq[Store],
  mergedKgHuRefBase: Path,
  mergedKgHuRef: Seq[Store],
  mergedKgNonKgBase: Path,
  nonKgRemove: Store,
  nonKgIgnore: Store,
  nonKgMono: Store,
  nonKgNomatch: Store,
  nonKgFlip: Store,
  nonKgForceA1: Store,
  mergedKgVarIdUpdate: Store,
  mergedKgVarSnpLog: Store)

final case class HarmonizedData(
  data: Seq[Store],
  base: Path,
  mergeList: Store,
  nonKgRemove: Store,
  nonKgIgnore: Store,
  nonKgMono: Store,
  nonKgNomatch: Store,
  nonKgFlip: Store,
  nonKgForceA1: Store,
  mergedKgVarIdUpdate: Store,
  mergedKgVarSnpLog: Store,
  forceA2: Store,
  refData: Seq[Store],
  refBase: Path,
  vcf: Store,
  tbi: Store,
  imputeData: Seq[Store],
  imputeBase: Path,
  vcfGoogle: Store,
  tbiGoogle: Store,
  vdsGoogle: Store,
  variantQcGoogle: Store,
  prunedInGoogle: Store)

final case class PrunedData(
  dataGoogle: Seq[Store],
  baseGoogle: URI,
  data: Seq[Store],
  base: Path,
  vdsGoogle: Store)

final case class KinshipData(
  base: Path,
  log: Store,
  kin: Store,
  kin0: Store,
  kin0Related: Store,
  famSizes: Store)

final case class Ref1kgData(
  data: Seq[Store],
  base: Path,
  gds: Store,
  dataGoogle: Seq[Store],
  baseGoogle: URI)

final case class AncestryData(
  inferred: Store)

final case class AncestryPcaData(
  base: Path,
  log: Store,
  scores: Store,
  plots: Store,
  pc1VsPc2: Store,
  pc2VsPc3: Store)

final case class AncestryClusterData(
  base: Path,
  log: Store,
  fet: Store,
  clu: Store,
  klg: Store,
  plots: Store,
  pc1VsPc2: Store,
  pc2VsPc3: Store,
  centerPlots: Store,
  no1kgPlots: Store,
  xtab: Store,
  groups: Store)

final case class PcaData(
  gds: Store,
  log: Store,
  scores: Store)

final case class SexcheckData(
  sexcheck: Store,
  sexcheckGoogle: Store,
  problems: Store,
  problemsGoogle: Store)

final case class SampleQcData(
  stats: Store,
  statsGoogle: Store,
  statsAdj: Store,
  corrPlots: Store,
  boxPlots: Store,
  discreteness: Store,
  pcaLoadings: Store,
  pcaPlots: Store,
  pcaScores: Store,
  outliers: Store,
  outliersPlotsPdf: Store,
  outliersPlotsPng: Store)

final case class SampleQcPcaClusterData(
  base: Path,
  fet: Store,
  clu: Store,
  klg: Store,
  log: Store,
  outliers: Store,
  plots: Store,
  xtab: Store)

final case class SampleQcMetricClusterData(
  base: Path,
  fet: Store,
  clu: Store,
  klg: Store,
  log: Store)

final case class FinalData(
  samplesExclude: Store,
  samplesExcludeGoogle: Store,
  variantsExclude: Store,
  variantsExcludeIds: Store,
  variantsExcludeGoogle: Store)

final case class VariantQcData(
  stats: Store,
  statsGoogle: Store)

final case class CleanData(
  data: Seq[Store],
  base: Path,
  gds: Store,
  dataGoogle: Seq[Store],
  baseGoogle: URI,
  vcf: Store,
  tbi: Store,
  vcfGoogle: Store,
  vdsGoogle: Store,
  pcaScores: Store,
  pcaLog: Store)

final case class Array(
  rawData: RawData,
  preparedData: PreparedData,
  annotatedData: AnnotatedData,
  annotatedChrData: Map[Int, AnnotatedChrData],
  harmonizedData: HarmonizedData,
  prunedData: PrunedData,
  kinshipData: KinshipData,
  ref1kgData: Ref1kgData,
  ancestryData: AncestryData,
  ancestryPcaData: AncestryPcaData,
  ancestryClusterData: AncestryClusterData,
  pcaData: PcaData,
  sexcheckData: SexcheckData,
  sampleQcData: SampleQcData,
  sampleQcPcaClusterData: SampleQcPcaClusterData,
  sampleQcMetricClusterData: Map[String, SampleQcMetricClusterData],
  finalData: FinalData,
  variantQcData: VariantQcData,
  cleanData: CleanData)

val arrayStores = projectConfig.Arrays.map(a => a.id).map { array =>

  val arrayCfg = projectConfig.Arrays.filter(_.id == array)(0)
  val rawBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.raw"
  val preparedBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.prepared"
  val annotatedBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.prepared.annotated"
  val harmonizedBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.harmonized"
  val refBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.ref"
  val imputeBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.impute"
  val qcBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.ref.qc"
  val kinshipBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.kinship"
  val ref1kgBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.ref1kg"
  val ancestryBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.ancestry"
  val ancestryPcaBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.ancestry.pca"
  val ancestryClusterBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.ancestry.cluster"
  val pcaBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.pca"
  val sampleQcBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.sampleqc"
  val finalBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.final"
  val variantQcBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.variantqc"
  val cleanBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.clean"

  val rawData = RawData(
    data = Seq(store.at(path(arrayCfg.filename + s".bed")).asInput,store.at(path(arrayCfg.filename + s".bim")).asInput,store.at(path(arrayCfg.filename + s".fam")).asInput),
    base = path(arrayCfg.filename),
    rawBase = localOutDir / rawBaseString,
    unplaced = store.at(localOutDir / s"${rawBaseString}.unplaced"),
    unique = store.at(localOutDir / s"${rawBaseString}.unique"),
    indel = store.at(localOutDir / s"${rawBaseString}.indel"),
    lmiss = store.at(localOutDir / s"${rawBaseString}.missing.lmiss"),
    imiss = store.at(localOutDir / s"${rawBaseString}.missing.imiss"),
    imissRemove = store.at(localOutDir / s"${rawBaseString}.missing.imiss.remove"),
    freq = store.at(localOutDir / s"${rawBaseString}.freq.frq"),
    mono = store.at(localOutDir / s"${rawBaseString}.mono"),
    dupRemove = store.at(localOutDir / s"${rawBaseString}.dup.remove"))

  val preparedData = PreparedData(
    data = bedBimFam(localOutDir / preparedBaseString),
    base = localOutDir / preparedBaseString,
    multiallelic = store.at(localOutDir / s"${preparedBaseString}.multiallelic"),
    chain = arrayCfg.liftOver.map(s => store.at(path(s)).asInput),
    bed = arrayCfg.liftOver.map(s => store.at(localOutDir / s"${preparedBaseString}.liftover.bed")),
    lifted = arrayCfg.liftOver.map(s => store.at(localOutDir / s"${preparedBaseString}.lifted")),
    unlifted = arrayCfg.liftOver.map(s => store.at(localOutDir / s"${preparedBaseString}.unlifted")),
    liftedUpdate = arrayCfg.liftOver.map(s => store.at(localOutDir / s"${preparedBaseString}.lifted.update")),
    liftedExtract = arrayCfg.liftOver.map(s => store.at(localOutDir / s"${preparedBaseString}.lifted.extract")))

  val annotatedData = AnnotatedData(
    data = arrayCfg.liftOver match {
      case Some(s) => bedBimFam(localOutDir / annotatedBaseString)
      case None => preparedData.data 
    },
    base = arrayCfg.liftOver match {
      case Some(s) => localOutDir / annotatedBaseString
      case None => localOutDir / preparedBaseString 
    })

  val annotatedChrData = ( 1 to { if ( arrayCfg.xChr ) 23 else 22 } ).map { chr =>

    val chrBaseString = s"${projectConfig.projectId}.${arrayCfg.id}.chr${chr}"
    val mergedKgBaseString = s"${chrBaseString}.harmkg"
    val mergedKgHuRefBaseString = s"${mergedKgBaseString}.huref"
    val mergedKgNonKgBaseString = s"${mergedKgBaseString}.nonkg"

    chr -> AnnotatedChrData(
      data = bedBimFam(localOutDir / chrBaseString),
      base = localOutDir / chrBaseString,
      mergedKgBase = localOutDir / mergedKgBaseString,
      mergedKg = bedBimFam(localOutDir / mergedKgBaseString),
      mergedKgHuRefBase = localOutDir / mergedKgHuRefBaseString,
      mergedKgHuRef = bedBimFam(localOutDir / mergedKgHuRefBaseString),
      mergedKgNonKgBase = localOutDir / mergedKgNonKgBaseString,
      nonKgRemove = store.at(localOutDir / s"${mergedKgNonKgBaseString}.remove"),
      nonKgIgnore = store.at(localOutDir / s"${mergedKgNonKgBaseString}.ignore"),
      nonKgMono = store.at(localOutDir / s"${mergedKgNonKgBaseString}.mono"),
      nonKgNomatch = store.at(localOutDir / s"${mergedKgNonKgBaseString}.nomatch"),
      nonKgFlip = store.at(localOutDir / s"${mergedKgNonKgBaseString}.flip"),
      nonKgForceA1 = store.at(localOutDir / s"${mergedKgNonKgBaseString}.force_a1"),
      mergedKgVarIdUpdate = store.at(localOutDir / s"${mergedKgBaseString}_idUpdates.txt"),
      mergedKgVarSnpLog = store.at(localOutDir / s"${mergedKgBaseString}_snpLog.log"))

  }.toMap

  val harmonizedData = HarmonizedData(
    data = bedBimFam(localOutDir / harmonizedBaseString),
    base = localOutDir / harmonizedBaseString,
    mergeList = store.at(localOutDir / s"${harmonizedBaseString}.merge.txt"),
    nonKgRemove = store.at(localOutDir / s"${harmonizedBaseString}.nonkg.remove"),
    nonKgIgnore = store.at(localOutDir / s"${harmonizedBaseString}.nonkg.ignore"),
    nonKgMono = store.at(localOutDir / s"${harmonizedBaseString}.nonkg.mono"),
    nonKgNomatch = store.at(localOutDir / s"${harmonizedBaseString}.nonkg.nomatch"),
    nonKgFlip = store.at(localOutDir / s"${harmonizedBaseString}.nonkg.flip"),
    nonKgForceA1 = store.at(localOutDir / s"${harmonizedBaseString}.nonkg.force_a1"),
    mergedKgVarIdUpdate = store.at(localOutDir / s"${harmonizedBaseString}_idUpdates.txt"),
    mergedKgVarSnpLog = store.at(localOutDir / s"${harmonizedBaseString}_snpLog.log"),
    forceA2 = store.at(localOutDir / s"${refBaseString}.force_a2.txt"),
    refData = bedBimFam(localOutDir / refBaseString),
    refBase = localOutDir / refBaseString,
    vcf = store.at(localOutDir / s"${refBaseString}.vcf.gz"),
    tbi = store.at(localOutDir / s"${refBaseString}.vcf.gz.tbi"),
    imputeData = bedBimFam(localOutDir / imputeBaseString),
    imputeBase = localOutDir / imputeBaseString,
    vcfGoogle = store.at(googleOutDir / s"${refBaseString}.vcf.gz"),
    tbiGoogle = store.at(googleOutDir / s"${refBaseString}.vcf.gz.tbi"),
    vdsGoogle = store.at(googleOutDir / s"${refBaseString}.vds"),
    variantQcGoogle = store.at(googleOutDir / s"${refBaseString}.variantqc.tsv"),
    prunedInGoogle = store.at(googleOutDir / s"${refBaseString}.prunedin.tsv"))

  val prunedData = PrunedData(
    dataGoogle = bedBimFam(googleOutDir / qcBaseString),
    baseGoogle = googleOutDir / qcBaseString,
    data = bedBimFam(localOutDir / qcBaseString),
    base = localOutDir / qcBaseString,
    vdsGoogle = store.at(googleOutDir / s"${qcBaseString}.vds"))

  val kinshipData = KinshipData(
    base = localOutDir / kinshipBaseString,
    log = store.at(localOutDir / s"${kinshipBaseString}.log"),
    kin = store.at(localOutDir / s"${kinshipBaseString}.kin"),
    kin0 = store.at(localOutDir / s"${kinshipBaseString}.kin0"),
    kin0Related = store.at(localOutDir / s"${kinshipBaseString}.kin0.related"),
    famSizes = store.at(localOutDir / s"${kinshipBaseString}.famsizes.tsv"))

  val ref1kgData = Ref1kgData(
    data = bedBimFam(localOutDir / ref1kgBaseString),
    base = localOutDir / ref1kgBaseString,
    gds = store.at(localOutDir / s"${ref1kgBaseString}.gds"),
    dataGoogle = bedBimFam(googleOutDir / ref1kgBaseString),
    baseGoogle = googleOutDir / ref1kgBaseString)

  val ancestryData = AncestryData(
    inferred = store.at(localOutDir / s"${ancestryBaseString}.inferred.tsv"))

  val ancestryPcaData = AncestryPcaData(
    base = localOutDir / ancestryPcaBaseString,
    log = store.at(localOutDir / s"${ancestryPcaBaseString}.log"),
    scores = store.at(localOutDir / s"${ancestryPcaBaseString}.scores.tsv"),
    plots = store.at(localOutDir / s"${ancestryPcaBaseString}.plots.pdf"),
    pc1VsPc2 = store.at(localOutDir / s"${ancestryPcaBaseString}.plot.pc1vspc2.png"),
    pc2VsPc3 = store.at(localOutDir / s"${ancestryPcaBaseString}.plot.pc2vspc3.png"))
  
  val ancestryClusterData = AncestryClusterData(
    base = localOutDir / ancestryClusterBaseString,
    log = store.at(localOutDir / s"${ancestryClusterBaseString}.log"),
    fet = store.at(localOutDir / s"${ancestryClusterBaseString}.fet.1"),
    clu = store.at(localOutDir / s"${ancestryClusterBaseString}.clu.1"),
    klg = store.at(localOutDir / s"${ancestryClusterBaseString}.klg.1"),
    plots = store.at(localOutDir / s"${ancestryClusterBaseString}.plots.pdf"),
    pc1VsPc2 = store.at(localOutDir / s"${ancestryClusterBaseString}.plot.pc1vspc2.png"),
    pc2VsPc3 = store.at(localOutDir / s"${ancestryClusterBaseString}.plot.pc2vspc3.png"),
    centerPlots = store.at(localOutDir / s"${ancestryClusterBaseString}.plots.centers.pdf"),
    no1kgPlots = store.at(localOutDir / s"${ancestryClusterBaseString}.plots.no1kg.pdf"),
    xtab = store.at(localOutDir / s"${ancestryClusterBaseString}.xtab"),
    groups = store.at(localOutDir / s"${ancestryClusterBaseString}.groups.tsv"))

  val pcaData = PcaData(
    gds = store.at(localOutDir / s"${pcaBaseString}.gds"),
    log = store.at(localOutDir / s"${pcaBaseString}.log"),
    scores = store.at(localOutDir / s"${pcaBaseString}.scores.tsv"))

  val sexcheckData = SexcheckData(
    sexcheck = store.at(localOutDir / s"${sampleQcBaseString}.sexcheck.tsv"),
    sexcheckGoogle = store.at(googleOutDir / s"${sampleQcBaseString}.sexcheck.tsv"),
    problems = store.at(localOutDir / s"${sampleQcBaseString}.sexcheck.problems.tsv"),
    problemsGoogle = store.at(googleOutDir / s"${sampleQcBaseString}.sexcheck.problems.tsv"))

  val sampleQcData = SampleQcData(
    stats = store.at(localOutDir / s"${sampleQcBaseString}.stats.tsv"),
    statsGoogle = store.at(googleOutDir / s"${sampleQcBaseString}.stats.tsv"),
    statsAdj = store.at(localOutDir / s"${sampleQcBaseString}.stats.adj.tsv"),
    corrPlots = store.at(localOutDir / s"${sampleQcBaseString}.corr.pdf"),
    boxPlots = store.at(localOutDir / s"${sampleQcBaseString}.boxplots.pdf"),
    discreteness = store.at(localOutDir / s"${sampleQcBaseString}.discreteness.txt"),
    pcaLoadings = store.at(localOutDir / s"${sampleQcBaseString}.pca.loadings.tsv"),
    pcaPlots = store.at(localOutDir / s"${sampleQcBaseString}.pca.plots.pdf"),
    pcaScores = store.at(localOutDir / s"${sampleQcBaseString}.pca.scores.tsv"),
    outliers = store.at(localOutDir / s"${sampleQcBaseString}.outliers.tsv"),
    outliersPlotsPdf = store.at(localOutDir / s"${sampleQcBaseString}.outliers.plots.pdf"),
    outliersPlotsPng = store.at(localOutDir / s"${sampleQcBaseString}.outliers.plots.png"))

  val sampleQcPcaClusterData = SampleQcPcaClusterData(
    base = localOutDir / s"${sampleQcBaseString}.pca.cluster",
    fet = store.at(localOutDir / s"${sampleQcBaseString}.pca.cluster.fet.1"),
    clu = store.at(localOutDir / s"${sampleQcBaseString}.pca.cluster.clu.1"),
    klg = store.at(localOutDir / s"${sampleQcBaseString}.pca.cluster.klg.1"),
    log = store.at(localOutDir / s"${sampleQcBaseString}.pca.cluster.log"),
    outliers = store.at(localOutDir / s"${sampleQcBaseString}.pca.cluster.outliers.tsv"),
    plots = store.at(localOutDir / s"${sampleQcBaseString}.pca.cluster.plots.pdf"),
    xtab = store.at(localOutDir / s"${sampleQcBaseString}.pca.cluster.xtab"))

  val sampleQcMetricClusterData = projectConfig.sampleQcMetrics.map { metric =>
  
      metric -> SampleQcMetricClusterData(
        base = localOutDir / s"${sampleQcBaseString}.${metric}.cluster",
        fet = store.at(localOutDir / s"${sampleQcBaseString}.${metric}.cluster.fet.1"),
        clu = store.at(localOutDir / s"${sampleQcBaseString}.${metric}.cluster.clu.1"),
        klg = store.at(localOutDir / s"${sampleQcBaseString}.${metric}.cluster.klg.1"),
        log = store.at(localOutDir / s"${sampleQcBaseString}.${metric}.cluster.log"))

  }.toMap

  val finalData = FinalData(
    samplesExclude = store.at(localOutDir / s"${finalBaseString}.samples.exclude.txt"),
    samplesExcludeGoogle = store.at(googleOutDir / s"${finalBaseString}.samples.exclude.txt"),
    variantsExclude = store.at(localOutDir / s"${finalBaseString}.variants.exclude.txt"),
    variantsExcludeIds = store.at(localOutDir / s"${finalBaseString}.variants.exclude.ids.txt"),
    variantsExcludeGoogle = store.at(googleOutDir / s"${finalBaseString}.variants.exclude.txt"))

  val variantQcData = VariantQcData(
    stats = store.at(localOutDir / s"${variantQcBaseString}.stats.tsv"),
    statsGoogle = store.at(googleOutDir / s"${variantQcBaseString}.stats.tsv"))

  val cleanData = CleanData(
    data = bedBimFam(localOutDir / cleanBaseString),
    base = localOutDir / cleanBaseString,
    gds = store.at(localOutDir / s"${cleanBaseString}.gds"),
    dataGoogle = bedBimFam(googleOutDir / cleanBaseString),
    baseGoogle = googleOutDir / cleanBaseString,
    vcf = store.at(localOutDir / s"${cleanBaseString}.vcf.bgz"),
    tbi = store.at(localOutDir / s"${cleanBaseString}.vcf.bgz.tbi"),
    vcfGoogle = store.at(googleOutDir / s"${cleanBaseString}.vcf.bgz"),
    vdsGoogle = store.at(googleOutDir / s"${cleanBaseString}.vds"),
    pcaScores = store.at(localOutDir / s"${cleanBaseString}.pca.scores.tsv"),
    pcaLog = store.at(localOutDir / s"${cleanBaseString}.pca.log"))

  array -> Array(
    rawData = rawData,
    preparedData = preparedData,
    annotatedData = annotatedData,
    annotatedChrData = annotatedChrData,
    harmonizedData = harmonizedData,
    prunedData = prunedData,
    kinshipData = kinshipData,
    ref1kgData = ref1kgData,
    ancestryData = ancestryData,
    ancestryPcaData = ancestryPcaData,
    ancestryClusterData = ancestryClusterData,
    pcaData = pcaData,
    sexcheckData = sexcheckData,
    sampleQcData = sampleQcData,
    sampleQcPcaClusterData = sampleQcPcaClusterData,
    sampleQcMetricClusterData = sampleQcMetricClusterData,
    finalData = finalData,
    variantQcData = variantQcData,
    cleanData = cleanData)

}.toMap
