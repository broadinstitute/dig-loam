import ProjectConfig._
import PipelineConfig._
import StoreHelpers._

final case class GlobalData(
  header: Store,
  intro: Store,
  introInput: Store,
  data: Store,
  dataInput: Store,
  strategy: Store,
  strategyInput: Store,
  bibliography: Store,
  bibliographyInput: Store,
  tex: Store,
  input: Store,
  pdf: Store)

final case class PhenoData(
  summary: Store,
  summaryInput: Store,
  calibration: Store,
  calibrationInput: Store,
  topLoci: Store,
  topLociInput: Store,
  knownLoci: Store,
  knownLociInput: Store)

final case class AnalysisReport(
  globalData: GlobalData,
  phenoData: Map[String, PhenoData])

val analysisReportStores = projectConfig.Models.map(m => m.phase).distinct.sorted.map { phase =>

  val baseString = s"${projectConfig.projectId}.analysisreport.phase${phase.toString}"

  val globalData = GlobalData(
    header = store.at(localOutDir / s"${baseString}.header.tex"),
    intro = store.at(localOutDir / s"${baseString}.intro.tex"),
    introInput = store.at(localOutDir / s"${baseString}.intro.input"),
    data = store.at(localOutDir / s"${baseString}.data.tex"),
    dataInput = store.at(localOutDir / s"${baseString}.data.input"),
    strategy = store.at(localOutDir / s"${baseString}.strategy.tex"),
    strategyInput = store.at(localOutDir / s"${baseString}.strategy.input"),
    bibliography = store.at(localOutDir / s"${baseString}.bibliography.tex"),
    bibliographyInput = store.at(localOutDir / s"${baseString}.bibliography.input"),
    tex = store.at(localOutDir / s"${baseString}.tex"),
    input = store.at(localOutDir / s"${baseString}.input"),
    pdf = store.at(localOutDir / s"${baseString}.pdf"))

  val phenoData = projectConfig.Models.map(m => m.pheno).distinct.map { pheno =>

    pheno -> PhenoData(
      summary = store.at(localOutDir / s"${baseString}.${pheno}.summary.tex"),
      summaryInput = store.at(localOutDir / s"${baseString}.${pheno}.summary.input"),
      calibration = store.at(localOutDir / s"${baseString}.${pheno}.calibration.tex"),
      calibrationInput = store.at(localOutDir / s"${baseString}.${pheno}.calibration.input"),
      topLoci = store.at(localOutDir / s"${baseString}.${pheno}.toploci.tex"),
      topLociInput = store.at(localOutDir / s"${baseString}.${pheno}.toploci.input"),
      knownLoci = store.at(localOutDir / s"${baseString}.${pheno}.knownloci.tex"),
      knownLociInput = store.at(localOutDir / s"${baseString}.${pheno}.knownloci.input"))

  }.toMap

  phase -> AnalysisReport(
    globalData = globalData,
    phenoData = phenoData)

}.toMap
