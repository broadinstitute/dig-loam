/**
  * Association Step
  *  Description: Run association tests
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import AssocStores._
import ProjectStores._
import Hail._

def VariantAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configMeta: Option[ConfigMeta] = None): Unit = {

  val assoc = assocStores((configModel, configCohort, configMeta))

  val array = configCohort.array
  val Seq(_, prunedBim, _) = arrayStores(array).prunedData.data

  val inputs = Seq(arrayStores(array).prunedData.bimGoogle, arrayStores(array).cleanData.mtGoogle, ProjectStores.phenoFileGoogle, arrayStores(array).prunedData.bim, arrayStores(array).cleanData.mt, ProjectStores.phenoFile).filter { case None => false; case s => true }

  val outputs = Seq(assoc.phenoPrelimGoogle, assoc.samplesIncludeGoogle, assoc.phenoPrelim, assoc.samplesInclude).filter { case None => false; case s => true }

  Hail(
    script = pyHailListSamples,
    cloud = hailCloud,
    tag = s"${assoc.phenoPrelim}.google".split("/").last,
    python = binPython,
    inputs = inputs,
    outputs = outputs,
    args = ,
    transferPre = ,
    transferPost = 
  )

  //inputs: Option[Seq[Store]],
  //outputs: Option[Seq[Store]],
  //args: Option[Seq[(String, Either[String, Store])]],
  //transferPre: Option[Seq[(Store, Store)]],
  //transferPost: Option[Seq[(Store, Store)]]




  //local {
  //
  //  googleCopy(prunedBim, arrayStores(array).prunedData.bimGoogle)
  //
  //}
  //
  //google {
  //
  //  hail"""$pyHailListSamples --
  //    --mt-in ${arrayStores(array).cleanData.mtGoogle}
  //    --bim-in ${arrayStores(array).prunedData.bimGoogle}
  //    --pheno-in ${ProjectStores.phenoFileGoogle}
  //    --iid-col ${projectConfig.phenoFileId}
  //    --pheno-col ${configModel.pheno}
  //    --test ${configModel.test}
  //    --covars "${configModel.covars}"
  //    --out-pheno-prelim ${assoc.phenoPrelimGoogle}
  //    --out-samples ${assoc.samplesIncludeGoogle}"""
  //  .in(arrayStores(array).prunedData.bimGoogle, arrayStores(array).cleanData.mtGoogle, ProjectStores.phenoFileGoogle)
  //  .out(assoc.phenoPrelimGoogle, assoc.samplesIncludeGoogle)
  //  .tag(s"${assoc.phenoPrelim}.google".split("/").last)
  //
  //}
  //  
  //local {
  //
  //  googleCopy(assoc.phenoPrelimGoogle, assoc.phenoPrelim)
  //  googleCopy(assoc.samplesIncludeGoogle, assoc.samplesInclude)
  //
  //}

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds)

  }
  
  drmWith(cores=4, mem=4) {

    cmd"""$binRscript --vanilla --verbose
      $rGeneratePheno
      --cpus 4
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --samples-include ${assoc.samplesInclude}
      --samples-exclude "${excludeCrossArrayString}"
      --variants-exclude ${arrayStores(array).finalData.variantsExcludeIds}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --out-pheno ${assoc.pheno}
      --out-pcs ${assoc.pcs}
      > ${assoc.phenoLog}"""
      .in(generatePhenoIn)
      .out(assoc.pheno, assoc.pcs, assoc.phenoLog)
      .using("R-3.4")
      .tag(s"${assoc.pheno}".split("/").last)

  }
  
  local {

    googleCopy(assoc.pheno, assoc.phenoGoogle)
    googleCopy(assoc.pcs, assoc.pcsGoogle)

  }

  google {
  
        hail"""$pyHailAssoc --
          --mt-in ${arrayStores(array).cleanData.mtGoogle}
          --bim-in ${arrayStores(array).prunedData.bimGoogle}
          --pheno-in ${assoc.phenoGoogle}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${assoc.pcsGoogle}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${assoc.resultsGoogle}"""
            .in(arrayStores(array).prunedData.bimGoogle, arrayStores(array).cleanData.mtGoogle, ProjectStores.phenoFileGoogle, assoc.phenoGoogle, assoc.pcsGoogle)
            .out(assoc.resultsGoogle)
            .tag(s"${assoc.results}.google".split("/").last)
  
  }
  
  local {

    googleCopy(assoc.resultsGoogle, assoc.results)

  }
  
  drm {

    cmd"""$binTabix -f -b 2 -e 2 ${assoc.results}"""
      .in(assoc.results)
      .out(assoc.tbi)
      .tag(s"${assoc.tbi}".split("/").last)

  }

}

def KnownLociAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configKnown: ConfigKnown, configMeta: Option[ConfigMeta] = None): Unit = {

  val known = knownLociStores((configModel, configCohort, configKnown, configMeta))

  val array = configCohort.array

  google {
  
    hail"""$pyHailListSamples --
      --mt-in ${arrayStores(array).cleanData.mtGoogle}
      --bim-in ${arrayStores(array).prunedData.bimGoogle}
      --pheno-in ${ProjectStores.phenoFileGoogle}
      --iid-col ${projectConfig.phenoFileId}
      --pheno-col ${configModel.pheno}
      --test ${configModel.test}
      --covars "${configModel.covars}"
      --out-pheno-prelim ${known.assoc.phenoPrelimGoogle}
      --out-samples ${known.assoc.samplesIncludeGoogle}"""
    .in(arrayStores(array).prunedData.bimGoogle, arrayStores(array).cleanData.mtGoogle, ProjectStores.phenoFileGoogle)
    .out(known.assoc.phenoPrelimGoogle, known.assoc.samplesIncludeGoogle)
    .tag(s"${known.assoc.phenoPrelim}.google".split("/").last)
  
  }
    
  local {

    googleCopy(known.assoc.phenoPrelimGoogle, known.assoc.phenoPrelim)
    googleCopy(known.assoc.samplesIncludeGoogle, known.assoc.samplesInclude)

  }

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, known.assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, known.assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds)

  }
  
  drmWith(cores=4, mem=4) {

    cmd"""$binRscript --vanilla --verbose
      $rGeneratePheno
      --cpus 4
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --samples-include ${known.assoc.samplesInclude}
      --samples-exclude "${excludeCrossArrayString}"
      --variants-exclude ${arrayStores(array).finalData.variantsExcludeIds}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --out-pheno ${known.assoc.pheno}
      --out-pcs ${known.assoc.pcs}
      > ${known.assoc.phenoLog}"""
      .in(generatePhenoIn)
      .out(known.assoc.pheno, known.assoc.pcs, known.assoc.phenoLog)
      .using("R-3.4")
      .tag(s"${known.assoc.pheno}".split("/").last)

  }
  
  local {
  
    googleCopy(known.assoc.pheno, known.assoc.phenoGoogle)
    googleCopy(known.assoc.pcs, known.assoc.pcsGoogle)
    googleCopy(known.known.hiLd, known.known.hiLdGoogle)
  
  }
  
  google {
  
    hail"""$pyHailAssoc --
      --mt-in ${arrayStores(array).cleanData.mtGoogle}
      --bim-in ${arrayStores(array).prunedData.bimGoogle}
      --pheno-in ${known.assoc.phenoGoogle}
      --iid-col ${projectConfig.phenoFileId}
      --pheno-col ${configModel.pheno}
      --pcs-include ${known.assoc.pcsGoogle}
      --extract-ld ${known.known.hiLdGoogle}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --out ${known.assoc.resultsGoogle}"""
        .in(arrayStores(array).prunedData.bimGoogle, arrayStores(array).cleanData.mtGoogle, ProjectStores.phenoFileGoogle, known.assoc.phenoGoogle, known.assoc.pcsGoogle, known.known.hiLdGoogle)
        .out(known.assoc.resultsGoogle)
        .tag(s"${known.assoc.results}.google".split("/").last)
  
  }
  
  local {
  
    googleCopy(known.assoc.resultsGoogle, known.assoc.results)
  
  }
  
  drm {

    cmd"""$binTabix -f -b 2 -e 2 ${known.assoc.results}"""
      .in(known.assoc.results)
      .out(known.assoc.tbi)
      .tag(s"${known.assoc.tbi}".split("/").last)

  }

}
