/**
  * Association Step
  *  Description: Run association tests
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import AssocStores._
import ProjectStores._
import Hail._

def VariantAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configMeta: Option[ConfigMeta] = None): Unit = {

  val assoc = assocStores((configModel, configCohort, configMeta))

  val array = configCohort.array
  val Seq(_, prunedBim, _) = arrayStores(array).prunedData.data

  hailCloud match {

    case true =>

      local {
      
        googleCopy(prunedBim, arrayStores(array).prunedData.bimGoogle.get)
      
      }
      
      google {
      
        hail"""$pyHailListSamples --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${ProjectStores.phenoFileGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${assoc.phenoPrelimGoogle.get}
          --out-samples ${assoc.samplesIncludeGoogle.get}"""
        .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get)
        .out(assoc.phenoPrelimGoogle.get, assoc.samplesIncludeGoogle.get)
        .tag(s"${assoc.phenoPrelim}.google".split("/").last)
      
      }
        
      local {
      
        googleCopy(assoc.phenoPrelimGoogle.get, assoc.phenoPrelim)
        googleCopy(assoc.samplesIncludeGoogle.get, assoc.samplesInclude)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores=4, mem=2) {

        cmd"""$binPython $pyHailListSamples
          --mt-in ${arrayStores(array).cleanData.mt}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${ProjectStores.phenoFileGoogle}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${assoc.phenoPrelimGoogle}
          --out-samples ${assoc.samplesIncludeGoogle}"""
        .in((arrayStores(array).prunedData.data ++ arrayStores(array).cleanData.mt) :+ ProjectStores.phenoFile)
        .out(assoc.phenoPrelim, assoc.samplesInclude)
        .tag(s"${assoc.phenoPrelim}".split("/").last)

      }

  }

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds)

  }
  
  drmWith(imageName = s"imgR34", cores=4, mem=4) {

    cmd"""$binRscript --vanilla --verbose
      $rGeneratePheno
      --cpus 4
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --samples-include ${assoc.samplesInclude}
      --samples-exclude "${excludeCrossArrayString}"
      --variants-exclude ${arrayStores(array).finalData.variantsExcludeIds}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --out-pheno ${assoc.pheno}
      --out-pcs ${assoc.pcs}
      > ${assoc.phenoLog}"""
      .in(generatePhenoIn)
      .out(assoc.pheno, assoc.pcs, assoc.phenoLog)
      .tag(s"${assoc.pheno}".split("/").last)

  }

  hailCloud match {

    case true =>
  
      local {
      
        googleCopy(assoc.pheno, assoc.phenoGoogle.get)
        googleCopy(assoc.pcs, assoc.pcsGoogle.get)
      
      }
      
      google {
      
        hail"""$pyHailAssoc --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${assoc.phenoGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${assoc.pcsGoogle.get}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${assoc.resultsGoogle.get}"""
            .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get, assoc.phenoGoogle.get, assoc.pcsGoogle.get)
            .out(assoc.resultsGoogle.get)
            .tag(s"${assoc.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(assoc.resultsGoogle.get, assoc.results)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores=4, mem=2) {

        cmd"""$binPython $pyHailAssoc
          --mt-in ${arrayStores(array).cleanData.mt}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${assoc.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${assoc.pcs}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${assoc.results}"""
            .in((arrayStores(array).prunedData.data ++ arrayStores(array).cleanData.mt) :+ ProjectStores.phenoFile :+ assoc.pheno :+ assoc.pcs)
            .out(assoc.results)
            .tag(s"${assoc.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"$imgTools") {

    cmd"""$binTabix -f -b 2 -e 2 ${assoc.results}"""
      .in(assoc.results)
      .out(assoc.tbi)
      .tag(s"${assoc.tbi}".split("/").last)

  }

}

def KnownLociAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configKnown: ConfigKnown, configMeta: Option[ConfigMeta] = None): Unit = {

  val known = knownLociStores((configModel, configCohort, configKnown, configMeta))

  val array = configCohort.array

  hailCloud match {

    case true =>

      google {
      
        hail"""$pyHailListSamples --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${ProjectStores.phenoFileGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${known.assoc.phenoPrelimGoogle.get}
          --out-samples ${known.assoc.samplesIncludeGoogle.get}"""
        .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get)
        .out(known.assoc.phenoPrelimGoogle.get, known.assoc.samplesIncludeGoogle.get)
        .tag(s"${known.assoc.phenoPrelim}.google".split("/").last)
      
      }
        
      local {
      
        googleCopy(known.assoc.phenoPrelimGoogle.get, known.assoc.phenoPrelim)
        googleCopy(known.assoc.samplesIncludeGoogle.get, known.assoc.samplesInclude)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores=4, mem=2) {

        cmd"""$binPython $pyHailListSamples
          --mt-in ${arrayStores(array).cleanData.mt}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${ProjectStores.phenoFile}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${known.assoc.phenoPrelim}
          --out-samples ${known.assoc.samplesInclude}"""
        .in((arrayStores(array).prunedData.data ++ arrayStores(array).cleanData.mt) :+ ProjectStores.phenoFile)
        .out(known.assoc.phenoPrelim, known.assoc.samplesInclude)
        .tag(s"${known.assoc.phenoPrelim}".split("/").last)

      }

  }

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, known.assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, known.assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds)

  }
  
  drmWith(imageName = s"imgR34", cores=4, mem=4) {

    cmd"""$binRscript --vanilla --verbose
      $rGeneratePheno
      --cpus 4
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --samples-include ${known.assoc.samplesInclude}
      --samples-exclude "${excludeCrossArrayString}"
      --variants-exclude ${arrayStores(array).finalData.variantsExcludeIds}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --out-pheno ${known.assoc.pheno}
      --out-pcs ${known.assoc.pcs}
      > ${known.assoc.phenoLog}"""
      .in(generatePhenoIn)
      .out(known.assoc.pheno, known.assoc.pcs, known.assoc.phenoLog)
      .tag(s"${known.assoc.pheno}".split("/").last)

  }

  hailCloud match {

    case true =>
  
      local {
      
        googleCopy(known.assoc.pheno, known.assoc.phenoGoogle.get)
        googleCopy(known.assoc.pcs, known.assoc.pcsGoogle.get)
        googleCopy(known.known.hiLd, known.known.hiLdGoogle.get)
      
      }
      
      google {
      
        hail"""$pyHailAssoc --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${known.assoc.phenoGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${known.assoc.pcsGoogle.get}
          --extract-ld ${known.known.hiLdGoogle.get}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${known.assoc.resultsGoogle.get}"""
            .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get, known.assoc.phenoGoogle.get, known.assoc.pcsGoogle.get, known.known.hiLdGoogle.get)
            .out(known.assoc.resultsGoogle.get)
            .tag(s"${known.assoc.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(known.assoc.resultsGoogle.get, known.assoc.results)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores=4, mem=2) {

        cmd"""$binPython $pyHailAssoc
          --mt-in ${arrayStores(array).cleanData.mt}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${known.assoc.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${known.assoc.pcs}
          --extract-ld ${known.known.hiLd}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${known.assoc.results}"""
            .in((arrayStores(array).prunedData.data ++ arrayStores(array).cleanData.mt) :+ ProjectStores.phenoFile :+ known.assoc.pheno :+ known.assoc.pcs :+ known.known.hiLd)
            .out(known.assoc.results)
            .tag(s"${known.assoc.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"$imgTools") {

    cmd"""$binTabix -f -b 2 -e 2 ${known.assoc.results}"""
      .in(known.assoc.results)
      .out(known.assoc.tbi)
      .tag(s"${known.assoc.tbi}".split("/").last)

  }

}
