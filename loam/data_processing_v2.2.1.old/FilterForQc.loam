/**
  * Filter Step
  *  Description: Generate filtered and filtered/pruned filesets for QC
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._

def FilterForQc(array: String): Unit = {

  hailCloud match {

    case true =>

      google {
      
        hail"""$pyHailFilter --
          --vds-in ${arrayStores(array).harmonizedData.vdsGoogle}
          --regions-exclude ${ProjectStores.regionsExcludeGoogle}
          --variant-qc-out ${arrayStores(array).harmonizedData.variantQcGoogle}
          --variants-prunedin-out ${arrayStores(array).harmonizedData.prunedInGoogle}
          --filt-pruned-vds-out ${arrayStores(array).prunedData.vdsGoogle}
          --filt-pruned-plink-out ${arrayStores(array).prunedData.baseGoogle}"""
          .in(arrayStores(array).harmonizedData.vdsGoogle, ProjectStores.regionsExcludeGoogle)
          .out(arrayStores(array).prunedData.dataGoogle :+ arrayStores(array).prunedData.vdsGoogle :+ arrayStores(array).harmonizedData.variantQcGoogle :+ arrayStores(array).harmonizedData.prunedInGoogle)
          .tag(s"${arrayStores(array).harmonizedData.vcf}.pyHailFilter.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(arrayStores(array).prunedData.dataGoogle, arrayStores(array).prunedData.data)
      
      }

    case false =>

      drmWith(imageName = s"$imgHailv01", cores=4, mem=2) {

        cmd"""$binHail $pyHailFilter
          --vds-in ${arrayStores(array).harmonizedData.vds}
          --regions-exclude ${ProjectStores.regionsExclude}
          --variant-qc-out ${arrayStores(array).harmonizedData.variantQc}
          --variants-prunedin-out ${arrayStores(array).harmonizedData.prunedIn}
          --filt-pruned-vds-out ${arrayStores(array).prunedData.vds}
          --filt-pruned-plink-out ${arrayStores(array).prunedData.base}"""
          .in(arrayStores(array).harmonizedData.vds, ProjectStores.regionsExclude)
          .out(arrayStores(array).prunedData.data :+ arrayStores(array).prunedData.vds :+ arrayStores(array).harmonizedData.variantQc :+ arrayStores(array).harmonizedData.prunedIn)
          .tag(s"${arrayStores(array).harmonizedData.vcf}.pyHailFilter".split("/").last)

      }

  }

}
