/**
  * Cross Cohort Relatedness Step
  *  Description: Check for cross cohort relatedness
  *  Requires: Plink, King
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._
import AssocStores._

def CrossCohortCommonVars(configMeta: ConfigMeta): Unit = {

  val bimStringList = {
    for {
      cohort <- configMeta.cohorts
    } yield {
      arrayStores(projectConfig.Cohorts.filter(e => e.id == cohort).head.array).harmonizedData.refBase.toString + ".bim"
    }
  }.distinct

  val dataList = {
    for {
      cohort <- configMeta.cohorts
    } yield {
      arrayStores(projectConfig.Cohorts.filter(e => e.id == cohort).head.array).harmonizedData.refData.toSeq
    }
  }.flatten.distinct

  drm {

    cmd"""(for f in ${bimStringList.mkString(" ")}; do awk '{print $$1":"$$2":"$$4":"$$5":"$$6}' $$f; done) | sort | uniq -c | awk '{if($$1 == ${bimStringList.size.toString}) print $$2}' | awk -F':' '{print $$2}' > ${metaKinshipStores(configMeta).commonVariants}"""
    .in(dataList)
    .out(metaKinshipStores(configMeta).commonVariants)
    .tag(s"${metaKinshipStores(configMeta).commonVariants}".split("/").last)

  }

}

def CrossCohortPrep(configMeta: ConfigMeta, configCohort: ConfigCohort): Unit = {

  drm {

    cmd"""join -1 2 -2 1 <(sort -k 2 ${arrayStores(configCohort.array).harmonizedData.refBase}.fam) <(sort -k 1 ${ProjectStores.ancestryInferred}) | awk -v var=${configCohort.ancestry.mkString(",")} '{ split(var,arr,","); for ( a in arr ) { if (arr[a] == $$7 ) print $$2"\t"$$1 } }' > ${metaKinshipStores(configMeta).metaCohort(configCohort).samples}"""
    .in(ProjectStores.ancestryInferred)
    .out(metaKinshipStores(configMeta).metaCohort(configCohort).samples)
    .tag(s"${metaKinshipStores(configMeta).metaCohort(configCohort).samples}".split("/").last)

    cmd"""$binPlink --bfile ${arrayStores(configCohort.array).harmonizedData.refBase} --extract ${metaKinshipStores(configMeta).commonVariants} --keep ${metaKinshipStores(configMeta).metaCohort(configCohort).samples} --make-bed --out ${metaKinshipStores(configMeta).metaCohort(configCohort).base}"""
    .in(arrayStores(configCohort.array).harmonizedData.refData :+ metaKinshipStores(configMeta).metaCohort(configCohort).samples :+ metaKinshipStores(configMeta).commonVariants)
    .out(metaKinshipStores(configMeta).metaCohort(configCohort).data)
    .tag(s"${metaKinshipStores(configMeta).metaCohort(configCohort).base}".split("/").last)

    cmd"""awk -v c=${configCohort.id} '{print $$1"_"c"\t"$$2"_"c"\t"$$3"\t"$$4"\t"$$5"\t"$$6}' ${metaKinshipStores(configMeta).metaCohort(configCohort).base}.fam > ${metaKinshipStores(configMeta).metaCohort(configCohort).famMerge}"""
    .in(metaKinshipStores(configMeta).metaCohort(configCohort).data)
    .out(metaKinshipStores(configMeta).metaCohort(configCohort).famMerge)
    .tag(s"${metaKinshipStores(configMeta).metaCohort(configCohort).famMerge}".split("/").last)

  }

}

def CrossCohortKinship(configMeta: ConfigMeta): Unit = {

  val mergeString = metaKinshipStores(configMeta).metaCohort.map(e => e._2.base.toString + ".bed " + e._2.base.toString + ".bim " + e._2.famMerge.toString.split("@")(1)).mkString("\n")

  drm {

    cmd"""echo "${mergeString}" > ${metaKinshipStores(configMeta).mergeList}"""
    .out(metaKinshipStores(configMeta).mergeList)
    .tag(s"${metaKinshipStores(configMeta).mergeList}".split("/").last)

    cmd"""$binPlink --merge-list ${metaKinshipStores(configMeta).mergeList} --chr 1-22 --maf 0.01 --geno 0.02 --make-bed --out ${metaKinshipStores(configMeta).baseFiltered}"""
    .in((metaKinshipStores(configMeta).metaCohort.map(e => e._2).flatMap(e => e.data).toSeq ++ metaKinshipStores(configMeta).metaCohort.map(e => e._2.famMerge).toSeq) :+ metaKinshipStores(configMeta).mergeList)
    .out(metaKinshipStores(configMeta).dataFiltered)
    .tag(s"${metaKinshipStores(configMeta).baseFiltered}".split("/").last)

    cmd"""$shKing $binKing ${metaKinshipStores(configMeta).baseFiltered}.bed ${metaKinshipStores(configMeta).baseKinship.toString} ${metaKinshipStores(configMeta).log} ${metaKinshipStores(configMeta).kin0} ${metaKinshipStores(configMeta).kin0Related} 4"""
    .in(metaKinshipStores(configMeta).dataFiltered)
    .out(metaKinshipStores(configMeta).log, metaKinshipStores(configMeta).kin0, metaKinshipStores(configMeta).kin0Related)
    .tag(s"${metaKinshipStores(configMeta).baseFiltered}.shKing".split("/").last)

  }

}

def CrossCohortExclude(configMeta: ConfigMeta, configCohort: ConfigCohort): Unit = {

  drm {
  
    cmd"""$binRscript --vanilla --verbose
      $rExcludeCrossArray
      --kinship ${metaKinshipStores(configMeta).kin0Related}
      --samples ${metaKinshipStores(configMeta).metaCohort(configCohort).samples}
      --meta-cohorts ${configMeta.cohorts.mkString(",")}
      --cohort ${configCohort.id}
      --out ${metaKinshipStores(configMeta).metaCohort(configCohort).kinshipSamplesExclude}
      """
      .in(metaKinshipStores(configMeta).kin0Related, metaKinshipStores(configMeta).metaCohort(configCohort).samples)
      .out(metaKinshipStores(configMeta).metaCohort(configCohort).kinshipSamplesExclude)
      .using("R-3.4")
      .tag(s"${metaKinshipStores(configMeta).metaCohort(configCohort).kinshipSamplesExclude}".split("/").last)
  
  }

}
