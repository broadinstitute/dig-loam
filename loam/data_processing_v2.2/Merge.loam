/**
  * Merge Step
  *  Description: Merge results
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import AssocStores._

def MergeAssoc(configModel: ConfigModel, configMerge: ConfigMerge): Unit = {

  val merge = mergeStores((configModel, configMerge))

  val resultsListStrings = {

    for {
      c <- configMerge.cohorts_metas
    } yield {

      val result = (assocStores.filter(e => ! e._1._3.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.resultsGoogle).toSeq ++ metaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).map(e => e._2.resultsGoogle).toSeq).head
      c + "___" + s"${result.toString.split("@")(1)}"

    }

  }

  val resultsList = {
  
    for {
      c <- configMerge.cohorts_metas
    } yield {
  
      (assocStores.filter(e => ! e._1._3.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.resultsGoogle).toSeq ++ metaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).map(e => e._2.resultsGoogle).toSeq).head

    }
  
  }

  google {
  
    hail"""$pyHailMerge --
      --results ${resultsListStrings.mkString(",")}
      --out ${merge.resultsGoogle}"""
        .in(resultsList)
        .out(merge.resultsGoogle)
        .tag(s"${merge.results}.google".split("/").last)
  
  }
  
  local {
  
    googleCopy(merge.resultsGoogle, merge.results)
  
  }
  
  drm {
  
    cmd"""$binTabix -f -b 2 -e 2 ${merge.results}"""
      .in(merge.results)
      .out(merge.tbi)
      .tag(s"${merge.tbi}".split("/").last)
  
  }

}

def MergeKnownAssoc(configModel: ConfigModel, configMerge: ConfigMerge, configKnown: ConfigKnown): Unit = {

  val known = knownMergeStores((configModel, configMerge, configKnown))

  val resultsListStrings = {

    for {
      c <- configMerge.cohorts_metas
    } yield {

      val result = (knownLociStores.filter(e => ! e._1._4.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._1._2.id == c).map(e => e._2.assoc.resultsGoogle).toSeq ++ knownMetaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).map(e => e._2.meta.resultsGoogle).toSeq).head
      c + "___" + s"${result.toString.split("@")(1)}"

    }

  }

  val resultsList = {
  
    for {
      c <- configMerge.cohorts_metas
    } yield {
  
      (knownLociStores.filter(e => ! e._1._4.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._1._2.id == c).map(e => e._2.assoc.resultsGoogle).toSeq ++ knownMetaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).map(e => e._2.meta.resultsGoogle).toSeq).head
  
    }
  
  }

  google {
  
    hail"""$pyHailMerge --
      --results ${resultsListStrings.mkString(",")}
      --out ${known.merge.resultsGoogle}"""
        .in(resultsList)
        .out(known.merge.resultsGoogle)
        .tag(s"${known.merge.results}.google".split("/").last)
  
  }
  
  local {
  
    googleCopy(known.merge.resultsGoogle, known.merge.results)
  
  }
  
  drm {
  
    cmd"""$binTabix -f -b 2 -e 2 ${known.merge.results}"""
      .in(known.merge.results)
      .out(known.merge.tbi)
      .tag(s"${known.merge.tbi}".split("/").last)
  
  }

}
