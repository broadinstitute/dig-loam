/**
  * Cross Cohort Relatedness Step
  *  Description: Check for cross cohort relatedness
  *  Requires: Plink, King
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._
import MetaStores._

def CrossCohortPrep(configMeta: ConfigMeta, configCohort: ConfigCohort): Unit = {

  drmWith(imageName = s"$imgTools") {

    cmd"""join -1 2 -2 1 <(sort -k 2 ${arrayStores(configCohort.array).harmonizedData.refBase}.fam) <(sort -k 1 ${ProjectStores.ancestryInferred}) | awk -v var=${configCohort.ancestry.mkString(",")} '{ split(var,arr,","); for ( a in arr ) { if (arr[a] == $$7 ) print $$2"\t"$$1 } }' > ${metaStores(configMeta.id).metaCohortData(configCohort.id).samples}"""
    .in(ProjectStores.ancestryInferred)
    .out(metaStores(configMeta.id).metaCohortData(configCohort.id).samples)
    .tag(s"${metaStores(configMeta.id).metaCohortData(configCohort.id).samples}".split("/").last)

    cmd"""$binPlink --bfile ${arrayStores(configCohort.array).harmonizedData.refBase} --keep ${metaStores(configMeta.id).metaCohortData(configCohort.id).samples} --make-bed --out ${metaStores(configMeta.id).metaCohortData(configCohort.id).base}"""
    .in(arrayStores(configCohort.array).harmonizedData.refData :+ metaStores(configMeta.id).metaCohortData(configCohort.id).samples)
    .out(metaStores(configMeta.id).metaCohortData(configCohort.id).data)
    .tag(s"${metaStores(configMeta.id).metaCohortData(configCohort.id).base}".split("/").last)

    cmd"""awk -v c=${configCohort.id} '{print $$1"_"c"\t"$$2"_"c"\t"$$3"\t"$$4"\t"$$5"\t"$$6}' ${metaStores(configMeta.id).metaCohortData(configCohort.id).base}.fam > ${metaStores(configMeta.id).metaCohortData(configCohort.id).famMerge}"""
    .in(metaStores(configMeta.id).metaCohortData(configCohort.id).data)
    .out(metaStores(configMeta.id).metaCohortData(configCohort.id).famMerge)
    .tag(s"${metaStores(configMeta.id).metaCohortData(configCohort.id).famMerge}".split("/").last)

  }

}

def CrossCohortKinship(configMeta: ConfigMeta): Unit = {

  val mergeString = metaStores(configMeta.id).metaCohortData.map(e => e._2.base.toString + ".bed " + e._2.base.toString + ".bim " + e._2.famMerge.toString.split("@")(1)).mkString("\n")

  drmWith(imageName = s"$imgTools") {

    cmd"""echo "${mergeString}" > ${metaStores(configMeta.id).metaKinshipData.mergeList}"""
    .out(metaStores(configMeta.id).metaKinshipData.mergeList)
    .tag(s"${metaStores(configMeta.id).metaKinshipData.mergeList}".split("/").last)

    cmd"""$binPlink --merge-list ${metaStores(configMeta.id).metaKinshipData.mergeList} --chr 1-22 --maf 0.01 --geno 0.02 --make-bed --out ${metaStores(configMeta.id).metaKinshipData.baseFiltered}"""
    .in(metaStores(configMeta.id).metaCohortData.map(e => e._2).flatMap(e => e.data).toSeq :+ metaStores(configMeta.id).metaKinshipData.mergeList)
    .out(metaStores(configMeta.id).metaKinshipData.dataFiltered)
    .tag(s"${metaStores(configMeta.id).metaKinshipData.baseFiltered}".split("/").last)

    cmd"""$shKing $binKing ${metaStores(configMeta.id).metaKinshipData.baseFiltered}.bed ${metaStores(configMeta.id).metaKinshipData.baseKinship.toString} ${metaStores(configMeta.id).metaKinshipData.log} ${metaStores(configMeta.id).metaKinshipData.kin0} ${metaStores(configMeta.id).metaKinshipData.kin0Related} 4"""
    .in(metaStores(configMeta.id).metaKinshipData.dataFiltered)
    .out(metaStores(configMeta.id).metaKinshipData.log, metaStores(configMeta.id).metaKinshipData.kin0, metaStores(configMeta.id).metaKinshipData.kin0Related)
    .tag(s"${metaStores(configMeta.id).metaKinshipData.baseFiltered}.shKing".split("/").last)

  }

}

def CrossCohortExclude(configMeta: ConfigMeta, configCohort: ConfigCohort): Unit = {

  drmWith(imageName = s"$imgR34") {
  
    cmd"""$binRscript --vanilla --verbose
      $rExcludeCrossArray
      --kinship ${metaStores(configMeta.id).metaKinshipData.kin0Related}
      --samples ${metaStores(configMeta.id).metaCohortData(configCohort.id).samples}
      --meta-cohorts ${configMeta.cohorts.mkString(",")}
      --cohort ${configCohort.id}
      --out ${metaStores(configMeta.id).metaCohortData(configCohort.id).kinshipSamplesExclude}
      """
      .in(metaStores(configMeta.id).metaKinshipData.kin0Related, metaStores(configMeta.id).metaCohortData(configCohort.id).samples)
      .out(metaStores(configMeta.id).metaCohortData(configCohort.id).kinshipSamplesExclude)
      .tag(s"${metaStores(configMeta.id).metaCohortData(configCohort.id).kinshipSamplesExclude}".split("/").last)
  
  }

}
