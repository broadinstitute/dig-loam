val kgpDir = path("/humgen/diabetes/users/ryank/internal_qc/1kg_phase3/1000GP_Phase3")
val softDir = path("/humgen/diabetes/users/ryank/software")

val shapeit = softDir / "shapeit/bin/shapeit"
val impute2 = softDir / "impute_v2.3.2_x86_64_static/impute2"

val chr = 22
val nShards = 3
val basesPerShard = 1000000

val data = store[VCF].at(s"data.chr${chr}.vcf.gz").asInput
val geneticMap = store[TXT].at(kgpDir / s"genetic_map_chr${chr}_combined_b37.txt").asInput
val phasedHaps = store[TXT].at(s"phased.data.${chr}.haps.gz")
val phasedSample = store[TXT].at(s"phased.data.${chr}.sample.gz")
val log = store[TXT].at(s"phased.data.${chr}.log")

cmd"$shapeit -V $data -M $geneticMap -O $phasedHaps $phasedSample -L $log --thread 8"

val exampleHaps = store[TXT].at(kgpDir / s"1000GP_Phase3_chr${chr}.hap.gz").asInput
val exampleLegend = store[TXT].at(kgpDir / s"1000GP_Phase3_chr${chr}.legend.gz").asInput

for(iShard <- 0 until nShards) {
  val start = iShard*basesPerShard + 1
  val end = (iShard + 1)*basesPerShard

  val imputed = store[TXT].at(s"imputed.data.chr${chr}bp${start}-${end}.gen")

  cmd"""$impute2 -use_prephased_g -m $geneticMap -h $exampleHaps -l $exampleLegend 
  -known_haps_g $phasedHaps -int ${start} ${end} -Ne 20000 -o imputes $imputed -verbose -o_gz
  """
}
