/**
  * Meta Step
  *  Description: Run meta analysis
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import AssocStores._

def MetaAnalysis(configModel: ConfigModel, configMeta: ConfigMeta): Unit = {

  val meta = metaStores((configModel, configMeta))

  val resultsListStrings = {

    for {
      c <- configMeta.cohorts
    } yield {

      val result = assocStores.filter(e => e._1._3.isDefined).filter(e => e._1._3.get == configMeta).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.resultsGoogle).toSeq.head
      c + "___" + configModel.test + "___" + s"${result.toString.split("@")(1)}"

    }

  }

  val resultsList = {

    for {
      c <- configMeta.cohorts
    } yield {

      assocStores.filter(e => e._1._3.isDefined).filter(e => e._1._3.get == configMeta).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.resultsGoogle).toSeq.head
  
    }

  }

  google {

    hail"""$pyHailMetaAnalysis --
      --partitions ${projectConfig.Metas.filter(e => e.id == configMeta.id).head.partitions.toString}
      --results ${resultsListStrings.mkString(",")}
      --out ${meta.resultsGoogle}"""
        .in(resultsList)
        .out(meta.resultsGoogle)
        .tag(s"${meta.results}.google".split("/").last)
  
  }

  local {

    googleCopy(meta.resultsGoogle, meta.results)

  }
  
  drm {

    cmd"""$binTabix -f -b 2 -e 2 ${meta.results}"""
      .in(meta.results)
      .out(meta.tbi)
      .tag(s"${meta.tbi}".split("/").last)

  }

}

def MetaAnalysisKnownLoci(configModel: ConfigModel, configMeta: ConfigMeta, configKnown: ConfigKnown): Unit = {

  val known = knownMetaStores((configModel, configMeta, configKnown))

  val resultsListStrings = {

    for {
      c <- configMeta.cohorts
    } yield {

      val result = knownLociStores.filter(e => e._1._4.isDefined).filter(e => e._1._4.get == configMeta).filter(e => e._1._3 == configKnown).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.assoc.resultsGoogle).toSeq.head
      c + "___" + configModel.test + "___" + s"${result.toString.split("@")(1)}"

    }

  }

  val resultsList = {

    for {
      c <- configMeta.cohorts
    } yield {

      knownLociStores.filter(e => e._1._4.isDefined).filter(e => e._1._4.get == configMeta).filter(e => e._1._3 == configKnown).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.assoc.resultsGoogle).toSeq.head
  
    }

  }

  google {

    hail"""$pyHailMetaAnalysis --
      --partitions ${projectConfig.Metas.filter(_.id == configMeta.id)(0).partitions.toString}
      --results ${resultsListStrings.mkString(",")}
      --out ${known.meta.resultsGoogle}"""
        .in(resultsList)
        .out(known.meta.resultsGoogle)
        .tag(s"${known.meta.results}.google".split("/").last)
  
  }

  local {

    googleCopy(known.meta.resultsGoogle, known.meta.results)

  }
  
  drm {

    cmd"""$binTabix -f -b 2 -e 2 ${known.meta.results}"""
      .in(known.meta.results)
      .out(known.meta.tbi)
      .tag(s"${known.meta.tbi}".split("/").last)

  }

}
