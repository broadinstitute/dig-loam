/**
  * Analysis Report Step
  *  Description: Generate Analysis Report
  *  Requires: R-3.4, Python, convert, pdflatex
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._
import AssocStores._
import PhenotypeStores._

def PhenotypeDistPlots(configCohort: ConfigCohort, pheno: String, configMeta: Option[ConfigMeta] = None): Unit = {

  val phenoStores = phenotypeStores((configMeta, configCohort, pheno))

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaStores(configMeta.get.id).metaCohortData(configCohort.id).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val phenoDistPlotIn = configMeta match {

    case Some(s) => Seq(arrayStores(configCohort.array).cleanData.data :+ ProjectStores.pheno :+ metaStores(configMeta.get.id).metaCohortData(configCohort.id).kinshipSamplesExclude)
    case None => Seq(arrayStores(configCohort.array).cleanData.data :+ ProjectStores.pheno)

  }

  drmWith(imageName = s"$imgPython27") {

    cmd"""$binPython $pyPhenoDistPlot
      --pheno ${ProjectStores.pheno}
      --pheno-name ${pheno}
      --fam ${arrayStores(configCohort.array).cleanData.base}.fam
      --samples-exclude "${excludeCrossArrayString}"
      --out ${phenoStores.figureData.distPlot}"""
      .in(phenoDistPlotIn.flatten)
      .out(phenoStores.figureData.distPlot)
      .tag(s"${phenoStores.figureData.distPlot}".split("/").last)

  }

}
