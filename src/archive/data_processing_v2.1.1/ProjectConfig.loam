val dataConfig = loadConfig("dataConfig", "")

final case class ConfigArray(
  id: String,
  filename: String,
  format: String,
  partitions: Int,
  liftOver: Option[String] = None,
  xChr: Boolean,
  yChr: Boolean,
  mtChr: Boolean,
  skipGh: Seq[String])

final case class ConfigCohort(
  id: String,
  array: String,
  ancestry: Seq[String],
  partitions: Int)

final case class ConfigMeta(
  id: String,
  cohorts: Seq[String],
  partitions: Int)

final case class ConfigMerge(
  id: String,
  cohorts_metas: Seq[String],
  partitions: Int)

final case class ConfigPheno(
  id: String,
  name: String)

final case class ConfigModel(
  id: String,
  pheno: String,
  trans: String,
  test: String,
  covars: Seq[String])

final case class ConfigKnown(
  id: String,
  data: String,
  hiLd: String,
  n: String,
  nCase: String,
  nCtrl: String,
  desc: String,
  citation: String)

final case class ConfigRun(
  models: Seq[String],
  cohorts: Seq[String],
  metas: Seq[String],
  merges: Seq[String],
  knowns: Seq[String])

final case class ProjectConfig(
  projectId: String,
  regionsExclude: String,
  regionsExcludeGoogle: String,
  genePositions: String,
  kgPurcellVcf: String,
  kgPurcellVcfGoogle: String,
  kgSample: String,
  kgSampleGoogle: String,
  kgSampleId: String,
  kgSamplePop: String,
  kgSampleGroup: String,
  kgVcf: String,
  kgIds: String,
  humanReferenceWild: String,
  pheno: String,
  phenoId: String,
  phenoSrSex: String,
  phenoMaleCode: String,
  phenoFemaleCode: String,
  phenoSrRace: String,
  phenoStatus: String,
  qcReportAuthors: Seq[String],
  analysisReportAuthors: Seq[String],
  analysisReportAcknowledgements: Seq[String],
  nAncestryInferenceFeatures: Int,
  sampleQcMetrics: Seq[String],
  ancestryOutliersKeep: Seq[String],
  duplicatesKeep: Seq[String],
  famsizeKeep: Seq[String],
  sampleqcKeep: Seq[String],
  sexcheckKeep: Seq[String],
  ancestryInferenceFeatures: String,
  nArrays: Int,
  nCohorts: Int,
  nMetas: Int,
  nMetrics: Int,
  Arrays: Seq[ConfigArray],
  Cohorts: Seq[ConfigCohort],
  Metas: Seq[ConfigMeta],
  Merges: Seq[ConfigMerge],
  Phenos: Seq[ConfigPheno],
  Models: Seq[ConfigModel],
  Knowns: Seq[ConfigKnown],
  Runs: Seq[ConfigRun])

val projectConfig = ProjectConfig(

  // required global values in conf file
  projectId = dataConfig.getStr("projectId"),
  regionsExclude = dataConfig.getStr("regionsExclude"),
  regionsExcludeGoogle = dataConfig.getStr("regionsExcludeGoogle"),
  genePositions = dataConfig.getStr("genePositions"),
  kgPurcellVcf = dataConfig.getStr("kgPurcellVcf"),
  kgPurcellVcfGoogle = dataConfig.getStr("kgPurcellVcfGoogle"),
  kgSample = dataConfig.getStr("kgSample"),
  kgSampleGoogle = dataConfig.getStr("kgSampleGoogle"),
  kgSampleId = dataConfig.getStr("kgSampleId"),
  kgSamplePop = dataConfig.getStr("kgSamplePop"),
  kgSampleGroup = dataConfig.getStr("kgSampleGroup"),
  kgVcf = dataConfig.getStr("kgVcf"),
  kgIds = dataConfig.getStr("kgIds"),
  humanReferenceWild = dataConfig.getStr("humanReferenceWild"),
  pheno = dataConfig.getStr("pheno"),
  phenoId = dataConfig.getStr("phenoId"),
  phenoSrSex = dataConfig.getStr("phenoSrSex"),
  phenoMaleCode = dataConfig.getStr("phenoMaleCode"),
  phenoFemaleCode = dataConfig.getStr("phenoFemaleCode"),
  phenoSrRace = dataConfig.getStr("phenoSrRace"),
  phenoStatus = dataConfig.getStr("phenoStatus"),
  qcReportAuthors = dataConfig.getStrList("qcReportAuthors"),
  analysisReportAuthors = dataConfig.getStrList("analysisReportAuthors"),
  analysisReportAcknowledgements = dataConfig.getStrList("analysisReportAcknowledgements"),
  nAncestryInferenceFeatures = dataConfig.getInt("nAncestryInferenceFeatures"),
  sampleQcMetrics = dataConfig.getStrList("sampleQcMetrics"),
  ancestryOutliersKeep = dataConfig.getStrList("ancestryOutliersKeep"),
  duplicatesKeep = dataConfig.getStrList("duplicatesKeep"),
  famsizeKeep = dataConfig.getStrList("famsizeKeep"),
  sampleqcKeep = dataConfig.getStrList("sampleqcKeep"),
  sexcheckKeep = dataConfig.getStrList("sexcheckKeep"),

  // inferred global values
  ancestryInferenceFeatures = if (dataConfig.isDefined("nAncestryInferenceFeatures")) { "1" * dataConfig.getInt("nAncestryInferenceFeatures") + "0" * (20 - dataConfig.getInt("nAncestryInferenceFeatures")) } else { "1" * 3 + "0" * (20 - 3) },
  nArrays = dataConfig.getObjList("arrays").size,
  nCohorts = dataConfig.getObjList("cohorts").size,
  nMetas = dataConfig.getObjList("metas").size,
  nMetrics = dataConfig.getStrList("sampleQcMetrics").size,

  // arrays
  Arrays = {

    for {
      array <- dataConfig.getObjList("arrays")
    } yield {

      ConfigArray(
        id = array.getStr("id"),
        filename = array.getStr("filename"),
        format = array.getStr("format"),
        partitions = array.getInt("partitions"),
        liftOver = if (array.isDefined("liftOverChain")) { Some(array.getStr("liftOverChain")) } else { None },
        xChr = array.getBool("xChr"),
        yChr = array.getBool("yChr"),
        mtChr = array.getBool("mtChr"),
        skipGh = array.getStrList("skipGh"))

    }

  },

  Cohorts = {

    for {
      cohort <- dataConfig.getObjList("cohorts")
    } yield {

      ConfigCohort(
        id = cohort.getStr("id"),
        array = cohort.getStr("array"),
        ancestry = cohort.getStrList("ancestry"),
        partitions = cohort.getInt("partitions"))

    }

  },

  Metas = {

    for {
      meta <- dataConfig.getObjList("metas")
    } yield {

      ConfigMeta(
        id = meta.getStr("id"),
        cohorts = meta.getStrList("cohorts"),
        partitions = meta.getInt("partitions"))

    }

  },

  Merges = {

    for {
      merge <- dataConfig.getObjList("merges")
    } yield {

      ConfigMerge(
        id = merge.getStr("id"),
        cohorts_metas = merge.getStrList("cohorts_metas"),
        partitions = merge.getInt("partitions"))

    }

  },

  Phenos = {

    for {
      pheno <- dataConfig.getObjList("phenos")
    } yield {

      ConfigPheno(
        id = pheno.getStr("id"),
        name = pheno.getStr("name"))

    }

  },

  Models = {

    for {
      model <- dataConfig.getObjList("models")
    } yield {

      ConfigModel(
        id = model.getStr("id"),
        pheno = model.getStr("pheno"),
        trans = model.getStr("trans"),
        test = model.getStr("test"),
        covars = model.getStrList("covars"))
    }

  },

  Knowns = {

    for {
      known <- dataConfig.getObjList("knowns")
    } yield {

      ConfigKnown(
        id = known.getStr("id"),
        data = known.getStr("data"),
        hiLd = known.getStr("hiLd"),
        n = if ( known.isDefined("n") ) { known.getStr("n") } else { "" },
        nCase = if ( known.isDefined("nCase") ) { known.getStr("nCase") } else { "" },
        nCtrl = if ( known.isDefined("nCtrl") ) { known.getStr("nCtrl") } else { "" },
        desc = known.getStr("desc"),
        citation = known.getStr("citation"))

    }

  },

  Runs = {

    for {
      run <- dataConfig.getObjList("runs")
    } yield {

      ConfigRun(
        models = run.getStrList("models"),
        cohorts = run.getStrList("cohorts"),
        metas = run.getStrList("metas"),
        merges = run.getStrList("merges"),
        knowns = run.getStrList("knowns"))

    }

  }

)
