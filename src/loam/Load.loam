/**
  * Load Step
  *  Description: Generate the Hail matrix table from VCF file
  *  Requires: Hail v0.2
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._

def Load(array: ConfigArray): Unit = {

  hailCloud match {

    case true =>

      local {
      
        googleCopy(arrayStores(array).refData.vcf.data.local.get, arrayStores(array).refData.vcf.data.google.get)
        googleCopy(arrayStores(array).refData.vcf.tbi.local.get, arrayStores(array).refData.vcf.tbi.google.get)
      
      }
      
      google {
      
        hail"""$pyHailLoad --
          --reference-genome ${projectConfig.referenceGenome}
          --partitions ${array.partitions.toString}
          --vcf-in ${projectConfig.projectId} ${arrayStores(array).refData.vcf.data.google.get}
          --sample-in ${ProjectStores.sampleFileGoogle.get}
          --id-col ${projectConfig.sampleFileId}
          --variant-metrics-out ${arrayStores(array).refData.variantMetricsGoogle.get}
          --sites-vcf-out ${arrayStores(array).refData.sitesVcfGoogle.get}
          --mt-out ${arrayStores(array).refData.mtGoogle.get}
          --cloud
          --log ${arrayStores(array).refData.hailLogGoogle.get}"""
          .in(arrayStores(array).refData.vcf.data.google.get, arrayStores(array).refData.vcf.tbi.google.get, ProjectStores.sampleFileGoogle.get)
          .out(arrayStores(array).refData.mtGoogle.get, arrayStores(array).refData.hailLogGoogle.get, arrayStores(array).refData.variantMetricsGoogle.get, arrayStores(array).refData.sitesVcfGoogle.get)
          .tag(s"${arrayStores(array).refData.vcf.base.local.get}.pyHailLoad".split("/").last)
      
      }

      local {

        googleCopy(arrayStores(array).refData.hailLogGoogle.get, arrayStores(array).refData.hailLog)
        googleCopy(arrayStores(array).refData.variantMetricsGoogle.get, arrayStores(array).refData.variantMetrics)
        googleCopy(arrayStores(array).refData.sitesVcfGoogle.get, arrayStores(array).refData.sitesVcf)

      }

    case false =>

      drmWith(imageName = s"$imgHail", cores = projectConfig.resources.loadHail.cpus, mem = projectConfig.resources.loadHail.mem, maxRunTime = projectConfig.resources.loadHail.maxRunTime) {

        cmd"""$binPython $pyHailLoad
          --reference-genome ${projectConfig.referenceGenome}
          --partitions ${array.partitions.toString}
          --vcf-in ${projectConfig.projectId} ${arrayStores(array).refData.vcf.data.local.get}
          --sample-in ${ProjectStores.sampleFile}
          --id-col ${projectConfig.sampleFileId}
          --variant-metrics-out ${arrayStores(array).refData.variantMetrics}
          --sites-vcf-out ${arrayStores(array).refData.sitesVcf}
          --mt-out ${arrayStores(array).refData.mt.get}
          --log ${arrayStores(array).refData.hailLog}"""
          .in(arrayStores(array).refData.vcf.data.local.get, arrayStores(array).refData.vcf.tbi.local.get, ProjectStores.sampleFile)
          .out(arrayStores(array).refData.mt.get, arrayStores(array).refData.hailLog, arrayStores(array).refData.variantMetrics, arrayStores(array).refData.sitesVcf)
          .tag(s"${arrayStores(array).refData.vcf.base.local.get}.pyHailLoad".split("/").last)

      }

  }

}
