/**
  * Load Step
  *  Description: Generate the Hail matrix table from VCF file
  *  Requires: Hail v0.2
  */
import ProjectConfig._
import ArrayStores._
import ProjectStores._
import Fxns._

def Load(array: ConfigArray): Unit = {

  val minPartitions =  array.minPartitions.getOrElse("") match { case "" => ""; case _ => s"--min-partitions ${array.minPartitions.get}" }
  val gqThreshold =  array.gqThreshold.getOrElse("") match { case "" => ""; case _ => s"--gq-threshold ${array.gqThreshold.get}" }

  val inputType = array.technology + "_" + array.format

  projectConfig.hailCloud match {

    case true =>

      val inputOptionString = inputType match {
        case "wgs_vcf" | "wes_vcf" => s"--vcf-in ${arrayStores(array).refData.vcf.get.data.google.get}"
        case "gwas_plink" | "gwas_vcf" | "wgs_plink" | "wes_plink" => s"--plink-in ${arrayStores(array).refData.plink.get.base.google.get}"
        case _ => throw new CfgException("Load: invalid input type " + inputType + " for array " + array.id)
      }

      val inputFiles = array.technology + "_" + array.format match {
        case "wgs_vcf" | "wes_vcf" => Seq(ProjectStores.hailUtilsGoogle.get, arrayStores(array).refData.vcf.get.data.google.get, arrayStores(array).refData.vcf.get.tbi.google.get, ProjectStores.sampleFileGoogle.get)
        case "gwas_plink" | "gwas_vcf" | "wgs_plink" | "wes_plink" => arrayStores(array).refData.plink.get.data.google.get :+ ProjectStores.hailUtilsGoogle.get :+ ProjectStores.sampleFileGoogle.get
        case _ => throw new CfgException("Load: invalid input type " + inputType + " for array " + array.id)
      }

      val tagString = array.technology + "_" + array.format match {
        case "wgs_vcf" | "wes_vcf" => s"${arrayStores(array).refData.vcf.get.base.local.get}.pyHailLoad".split("/").last
        case "gwas_plink" | "gwas_vcf" | "wgs_plink" | "wes_plink" => s"${arrayStores(array).refData.plink.get.base.local.get}.pyHailLoad".split("/").last
        case _ => throw new CfgException("Load: invalid input type " + inputType + " for array " + array.id)
      }

      array.technology + "_" + array.format match {
        case "wgs_vcf" | "wes_vcf" => 
          local {
            googleCopy(arrayStores(array).refData.vcf.get.data.local.get, arrayStores(array).refData.vcf.get.data.google.get)
            googleCopy(arrayStores(array).refData.vcf.get.tbi.local.get, arrayStores(array).refData.vcf.get.tbi.google.get)
          }
        case "gwas_plink" | "gwas_vcf" | "wgs_plink" | "wes_plink" =>
          local {
            googleCopy(arrayStores(array).refData.plink.get.data.local.get, arrayStores(array).refData.plink.get.data.google.get)
          }
        case _ => throw new CfgException("Load: invalid input type " + inputType + " for array " + array.id)
      }

      googleWith(projectConfig.cloudResources.loadCluster) {
      
        hail"""${utils.python.pyHailLoad} --
          --reference-genome ${projectConfig.referenceGenome}
          ${minPartitions}
          ${gqThreshold}
          --cloud
          --hail-utils ${ProjectStores.hailUtilsGoogle.get}
          --log ${arrayStores(array).refData.hailLogGoogle.get}
          ${inputOptionString}
          --sample-in ${ProjectStores.sampleFileGoogle.get}
          --id-col ${projectConfig.sampleFileId}
          --variant-metrics-out ${arrayStores(array).refData.variantMetricsGoogle.get}
          --sex-col ${projectConfig.sampleFileSrSex}
          --male-code ${projectConfig.sampleFileMaleCode}
          --female-code ${projectConfig.sampleFileFemaleCode}
          --sexcheck-out ${arrayStores(array).sexcheckData.sexcheckGoogle.get}
          --sexcheck-problems-out ${arrayStores(array).sexcheckData.problemsGoogle.get}
          --sites-vcf-out ${arrayStores(array).refData.sitesVcfGoogle.get}
          --mt-checkpoint ${arrayStores(array).refData.mtCheckpointGoogle.get}
          --mt-out ${arrayStores(array).refData.mtGoogle.get}"""
          .in(inputFiles)
          .out(arrayStores(array).refData.mtGoogle.get, arrayStores(array).refData.mtCheckpointGoogle.get, arrayStores(array).refData.hailLogGoogle.get, arrayStores(array).refData.variantMetricsGoogle.get, arrayStores(array).sexcheckData.sexcheckGoogle.get, arrayStores(array).sexcheckData.problemsGoogle.get, arrayStores(array).refData.sitesVcfGoogle.get)
          .tag(tagString)
      
      }

      local {

        googleCopy(arrayStores(array).refData.hailLogGoogle.get, arrayStores(array).refData.hailLog)
        googleCopy(arrayStores(array).refData.variantMetricsGoogle.get, arrayStores(array).refData.variantMetrics)
        googleCopy(arrayStores(array).refData.sitesVcfGoogle.get, arrayStores(array).refData.sitesVcf)
        googleCopy(arrayStores(array).sexcheckData.sexcheckGoogle.get, arrayStores(array).sexcheckData.sexcheck)
        googleCopy(arrayStores(array).sexcheckData.problemsGoogle.get, arrayStores(array).sexcheckData.problems)

      }

    case false =>

      val inputOptionString = array.technology + "_" + array.format match {
        case "wgs_vcf" | "wes_vcf" => s"--vcf-in ${arrayStores(array).refData.vcf.get.data.local.get}"
        case "gwas_plink" | "gwas_vcf" | "wgs_plink" | "wes_plink" => s"--plink-in ${arrayStores(array).refData.plink.get.base.local.get}"
        case _ => throw new CfgException("Load: invalid input type " + inputType + " for array " + array.id)
      }

      val inputFiles = array.technology + "_" + array.format match {
        case "wgs_vcf" | "wes_vcf" => Seq(arrayStores(array).refData.vcf.get.data.local.get, arrayStores(array).refData.vcf.get.tbi.local.get, ProjectStores.sampleFile)
        case "gwas_plink" | "gwas_vcf" | "wgs_plink" | "wes_plink" => arrayStores(array).refData.plink.get.data.local.get :+ ProjectStores.sampleFile
        case _ => throw new CfgException("Load: invalid input type " + inputType + " for array " + array.id)
      }

      val tagString = array.technology + "_" + array.format match {
        case "wgs_vcf" | "wes_vcf" => s"${arrayStores(array).refData.vcf.get.base.local.get}.pyHailLoad".split("/").last
        case "gwas_plink" | "gwas_vcf" | "wgs_plink" | "wes_plink" => s"${arrayStores(array).refData.plink.get.base.local.get}.pyHailLoad".split("/").last
        case _ => throw new CfgException("Load: invalid input type " + inputType + " for array " + array.id)
      }

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.loadHail.cpus, mem = projectConfig.resources.loadHail.mem, maxRunTime = projectConfig.resources.loadHail.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailLoad}
          --reference-genome ${projectConfig.referenceGenome}
          ${minPartitions}
          ${gqThreshold}
          --log ${arrayStores(array).refData.hailLog}
          ${inputOptionString}
          --sample-in ${ProjectStores.sampleFile}
          --id-col ${projectConfig.sampleFileId}
          --variant-metrics-out ${arrayStores(array).refData.variantMetrics}
          --sex-col ${projectConfig.sampleFileSrSex}
          --male-code ${projectConfig.sampleFileMaleCode}
          --female-code ${projectConfig.sampleFileFemaleCode}
          --sexcheck-out ${arrayStores(array).sexcheckData.sexcheck}
          --sexcheck-problems-out ${arrayStores(array).sexcheckData.problems}
          --sites-vcf-out ${arrayStores(array).refData.sitesVcf}
          --mt-checkpoint ${arrayStores(array).refData.mtCheckpoint.get}
          --mt-out ${arrayStores(array).refData.mt.get}"""
          .in(inputFiles)
          .out(arrayStores(array).refData.mt.get, arrayStores(array).refData.mtCheckpoint.get, arrayStores(array).refData.hailLog, arrayStores(array).refData.variantMetrics, arrayStores(array).sexcheckData.sexcheck, arrayStores(array).sexcheckData.problems, arrayStores(array).refData.sitesVcf)
          .tag(tagString)

      }

  }

}
