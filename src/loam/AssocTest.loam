/**
 * Run Assoc Analysis
 * 
 */
import ProjectConfig._
import ModelStores._
import ArrayStores._
import Fxns._

final case class CfgException(s: String) extends Exception(s)

def AssocTest(configModel: ConfigModel, configCohorts: Seq[ConfigCohort], configMeta: Option[ConfigMeta] = None, configKnown: Option[ConfigKnown] = None): Unit = {

  val array = projectConfig.Arrays.filter(e => e.id == configCohorts.head.array).head

  configModel.assocPlatforms.contains("epacts") match {
  
    case true =>
    
      val transString = configModel.trans match {
        case Some(_) => "--trans ${configModel.trans}"
        case None => ""
      }
  
      drmWith(imageName = s"${utils.image.imgR}") {
      
        cmd"""${utils.binary.binRscript} --vanilla --verbose
          ${utils.r.rConvertPhenoToPed}
          --pheno ${modelStores((configModel, configCohorts, configMeta)).pheno.local.get}
          --pcs ${modelStores((configModel, configCohorts, configMeta)).pcsInclude.local.get}
          --pheno-col ${configModel.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --sex-col ${projectConfig.sampleFileSrSex}
          --male-code ${projectConfig.sampleFileMaleCode}
          --female-code ${projectConfig.sampleFileFemaleCode}
          ${transString}
          --covars "${configModel.covars}"
          --model-vars ${modelStores((configModel, configCohorts, configMeta)).modelVarsEpacts.get}
          --ped ${modelStores((configModel, configCohorts, configMeta)).pedEpacts.get}"""
          .in(modelStores((configModel, configCohorts, configMeta)).pheno.local.get, modelStores((configModel, configCohorts, configMeta)).pcsInclude.local.get)
          .out(modelStores((configModel, configCohorts, configMeta)).pedEpacts.get, modelStores((configModel, configCohorts, configMeta)).modelVarsEpacts.get)
          .tag(s"${modelStores((configModel, configCohorts, configMeta)).pedEpacts.get}".split("/").last)
      
      }
  
    case false => ()
  
  }

  for {
  
    test <- configModel.tests
  
  } yield {
  
    (test.split("\\.")(0), groupTests.contains(test), modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups.size) match {
  
      case ("epacts", true, n) if n > 0 =>

        val groups = fileToList(s"""${modelStores((configModel, configCohorts, configMeta)).groupFile.get.base.local.get.toString.split("@")(1)}""")

        for {
        
          group <- groups
        
        } yield {
        
          val groupid = group.split("\t")(0)
          
          drmWith(imageName = s"${utils.image.imgTools}") {
          
            cmd"""echo "${group}" > ${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).groupFile}"""
              .out(modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).groupFile)
              .tag(s"${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).groupFile}".split("/").last)
          
          }
          
          val vcfString = modelStores((configModel, configCohorts, configMeta)).vcf match {
            case Some(s) => s"""--vcf ${modelStores((configModel, configCohorts, configMeta)).vcf.get.data.local.get.toString.split("@")(1)}"""
            case None => s"""--vcf ${arrayStores(array).cleanData.get.vcf.data.local.get.toString.split("@")(1)}"""
          }
          
          var epactsIn = Seq(modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).groupFile, modelStores((configModel, configCohorts, configMeta)).pedEpacts.get, modelStores((configModel, configCohorts, configMeta)).modelVarsEpacts.get)
          modelStores((configModel, configCohorts, configMeta)).vcf match {
            case Some(s) => epactsIn = epactsIn ++ Seq(modelStores((configModel, configCohorts, configMeta)).vcf.get.data.local.get)
            case None => epactsIn = epactsIn ++ Seq(arrayStores(array).cleanData.get.vcf.data.local.get)
          }
        
          drmWith(imageName = s"${utils.image.imgUmichStatgen}") {
          
            cmd"""${utils.bash.shEpacts}
              --bin ${utils.binary.binEpacts}
              --type group
              ${vcfString}
              --groupf ${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).groupFile}
              --ped ${modelStores((configModel, configCohorts, configMeta)).pedEpacts.get}
              --vars ${modelStores((configModel, configCohorts, configMeta)).modelVarsEpacts.get}
              --test ${test.replace("epacts.","")}
              --field "DS"
              --out ${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).results}
              --run 1"""
              .in(epactsIn)
              .out(modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).results)
              .tag(s"${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).results}".split("/").last)
          
          }
        
        }
        
        val mergeResultsLines = {
          for {
            group <- groups
          } yield {
            val groupid = group.split("\t")(0)
            s"""${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).results.toString.split("@")(1)}"""
          }
        }
        
        val mergeResultsFiles = {
          for {
            group <- groups
          } yield {
            val groupid = group.split("\t")(0)
            modelStores((configModel, configCohorts, configMeta)).assoc.base(test).groups(groupid).results
          }
        }
        
        drmWith(imageName = s"${utils.image.imgTools}") {
        
          cmd"""echo "${mergeResultsLines.mkString("\n")}" > ${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).mergeList.get}"""
            .in(mergeResultsFiles)
            .out(modelStores((configModel, configCohorts, configMeta)).assoc.base(test).mergeList.get)
            .tag(s"${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).mergeList.get}".split("/").last)
        
        }
        
        drmWith(imageName = s"${utils.image.imgTools}") {
        
          cmd"""${utils.bash.shMergeResults}
             ${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).mergeList.get}
             ${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).results.local.get}"""
            .in(modelStores((configModel, configCohorts, configMeta)).assoc.base(test).mergeList.get)
            .out(modelStores((configModel, configCohorts, configMeta)).assoc.base(test).results.local.get)
            .tag(s"${modelStores((configModel, configCohorts, configMeta)).assoc.base(test).results.local.get}".split("/").last)
        
        }
        
      case _ => ()
  
    }

  }

}
