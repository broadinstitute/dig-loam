/**
 * Run Assoc Analysis
 * 
 */
import ProjectConfig._
import ModelStores._
import ArrayStores._
import Fxns._
import SchemaStores._
import ProjectStores._

final case class CfgException(s: String) extends Exception(s)

def AssocTest(configModel: ConfigModel, configSchema: ConfigSchema, configCohorts: Seq[ConfigCohort], configMeta: Option[ConfigMeta] = None, configKnown: Option[ConfigKnown] = None): Unit = {

  val array = projectConfig.Arrays.filter(e => e.id == configCohorts.head.array).head

  configModel.assocPlatforms.contains("epacts") match {
  
    case true =>
    
      val transString = configModel.trans match {
        case Some(_) => "--trans ${configModel.trans}"
        case None => ""
      }
  
      drmWith(imageName = s"${utils.image.imgR}") {
      
        cmd"""${utils.binary.binRscript} --vanilla --verbose
          ${utils.r.rConvertPhenoToPed}
          --pheno ${modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.local.get}
          --pcs ${modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.local.get}
          --pheno-col ${configModel.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --sex-col ${projectConfig.sampleFileSrSex}
          --male-code ${projectConfig.sampleFileMaleCode}
          --female-code ${projectConfig.sampleFileFemaleCode}
          ${transString}
          --covars "${configModel.covars}"
          --model-vars ${modelStores((configModel, configSchema, configCohorts, configMeta)).modelVarsEpacts.get}
          --ped ${modelStores((configModel, configSchema, configCohorts, configMeta)).pedEpacts.get}"""
          .in(modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.local.get, modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.local.get)
          .out(modelStores((configModel, configSchema, configCohorts, configMeta)).pedEpacts.get, modelStores((configModel, configSchema, configCohorts, configMeta)).modelVarsEpacts.get)
          .tag(s"${modelStores((configModel, configSchema, configCohorts, configMeta)).pedEpacts.get}".split("/").last)
      
      }
  
    case false => ()
  
  }

  projectConfig.hailCloud match {

    case true =>

      local {
      
        googleCopy(modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.local.get, modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.google.get)
        googleCopy(modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.local.get, modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.google.get)
      
      }

    case false => ()

  }

  for {
  
    test <- modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle.keys
  
  } yield {
  
    test.split("\\.")(0) match {
  
      case "hail" =>

        projectConfig.hailCloud match {

          case true =>
            
            googleWith(projectConfig.cloudResources.mtCluster) {
            
              hail"""${utils.python.pyHailAssoc} --
                --hail-utils ${projectStores.hailUtils.google.get}
                --mt-in ${arrayStores(array).refData.mt.google.get}
                --pheno-in ${modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.google.get}
                --iid-col ${projectConfig.phenoFileId}
                --pheno-col ${configModel.pheno}
                --pcs-include ${modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.google.get}
                --variant-stats-in ${schemaStores((configSchema, configCohorts)).variantsStatsHt.base.google.get}
                --test ${test}
                --trans "${configModel.trans}"
                --covars "${configModel.covars}"
                --out ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.google.get}
                --cloud
                --log ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).resultsHailLog.get.google.get}"""
                  .in(projectStores.hailUtils.google.get, arrayStores(array).refData.mt.google.get, modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.google.get, modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.google.get, schemaStores((configSchema, configCohorts)).variantsStatsHt.base.google.get)
                  .out(modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.google.get, modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).resultsHailLog.get.google.get)
                  .tag(s"${modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.local.get}.google".split("/").last)
            
            }
            
            local {
            
              googleCopy(modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.google.get, modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.local.get)
              googleCopy(modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).resultsHailLog.get.google.get, modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).resultsHailLog.get.local.get)
            
            }
          
          case false =>
          
            drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.matrixTableHail.cpus, mem = projectConfig.resources.matrixTableHail.mem, maxRunTime = projectConfig.resources.matrixTableHail.maxRunTime) {
            
              cmd"""${utils.binary.binPython} ${utils.python.pyHailAssoc}
                --mt-in ${arrayStores(array).refData.mt.local.get}
                --pheno-in ${modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.local.get}
                --iid-col ${projectConfig.phenoFileId}
                --pheno-col ${configModel.pheno}
                --pcs-include ${modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.local.get}
                --variant-stats-in ${schemaStores((configSchema, configCohorts)).variantsStatsHt.base.local.get}
                --test ${test}
                --trans "${configModel.trans}"
                --covars "${configModel.covars}"
                --out ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.local.get}
                --log ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).resultsHailLog.get.local.get}"""
                  .in(arrayStores(array).prunedData.plink.data :+ arrayStores(array).refData.mt.local.get :+ modelStores((configModel, configSchema, configCohorts, configMeta)).pheno.local.get :+ modelStores((configModel, configSchema, configCohorts, configMeta)).pcsInclude.local.get :+ schemaStores((configSchema, configCohorts)).variantsStatsHt.base.local.get)
                  .out(modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.local.get, modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).resultsHailLog.get.local.get)
                  .tag(s"${modelStores((configModel, configSchema, configCohorts, configMeta)).assocSingle(test).results.local.get}".split("/").last)
            
            }

        }

      case _ => ()

    }

  }

  for {
  
    test <- modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup.keys.toList
  
  } yield {
  
    test.split("\\.")(0) match {
  
      case "epacts" =>

        val modelTestGroupsKeys = modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups.keys

        for {
        
          group <- modelTestGroupsKeys.toList
        
        } yield {
        
          val groupid = group.split("\t")(0)
          
          val vcfString = schemaStores((configSchema, configCohorts)).vcf match {
            case Some(s) => s"""--vcf ${schemaStores((configSchema, configCohorts)).vcf.get.data.local.get.toString.split("@")(1)}"""
            case None => s"""--vcf ${arrayStores(array).cleanData.get.vcf.data.local.get.toString.split("@")(1)}"""
          }
          
          var epactsIn = Seq(modelStores((configModel, configSchema, configCohorts, configMeta)).pedEpacts.get, modelStores((configModel, configSchema, configCohorts, configMeta)).modelVarsEpacts.get, schemaStores((configSchema, configCohorts)).groupFile.base.base.local.get)
          schemaStores((configSchema, configCohorts)).vcf match {
            case Some(s) => epactsIn = epactsIn ++ Seq(schemaStores((configSchema, configCohorts)).vcf.get.data.local.get)
            case None => epactsIn = epactsIn ++ Seq(arrayStores(array).cleanData.get.vcf.data.local.get)
          }
        
          drmWith(imageName = s"${utils.image.imgUmichStatgen}") {
          
            cmd"""${utils.bash.shEpacts}
              --bin ${utils.binary.binEpacts}
              --type group
              ${vcfString}
              --groupfin ${schemaStores((configSchema, configCohorts)).groupFile.base.base.local.get}
              --groupfout ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups(groupid).groupFile}
              --groupid "${groupid}"
              --ped ${modelStores((configModel, configSchema, configCohorts, configMeta)).pedEpacts.get}
              --vars ${modelStores((configModel, configSchema, configCohorts, configMeta)).modelVarsEpacts.get}
              --test ${test.replace("epacts.","")}
              --field "DS"
              --out ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups(groupid).results}
              --run 1"""
              .in(epactsIn)
              .out(modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups(groupid).groupFile, modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups(groupid).results)
              .tag(s"${modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups(groupid).results}".split("/").last)
          
          }
        
        }

        modelTestGroupsKeys.size match {
        
          case n if n > 0 =>
        
            val resultsFile = s"""${modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups(modelTestGroupsKeys.head.split("\t")(0)).results.toString.split("@")(1).replace(modelTestGroupsKeys.head.split("\t")(0), "___GROUP___")}"""
        
            val resultsFiles = for {
              group <- modelTestGroupsKeys.toList
            } yield {
              modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).groups(group.split("\t")(0)).results
            }
            
            drmWith(imageName = s"${utils.image.imgTools}") {
            
              cmd"""${utils.bash.shMergeResults}
                 --results ${resultsFile}
                 --groupf ${schemaStores((configSchema, configCohorts)).groupFile.base.base.local.get}
                 --out ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).results}"""
                .in(resultsFiles :+ schemaStores((configSchema, configCohorts)).groupFile.base.base.local.get)
                .out(modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).results)
                .tag(s"${modelStores((configModel, configSchema, configCohorts, configMeta)).assocGroup(test).results}".split("/").last)
            
            }
        
          case _ => ()
        
        }

      case _ => ()

    }

  }

  for {

    mask <- modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup.keys.toList
  
  } yield {

    for {
    
      test <- modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask).keys.toList
    
    } yield {

      test.split("\\.")(0) match {
          
        case "epacts" =>
        
          val modelTestMaskGroupsKeys = modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups.keys
          
          for {
          
            group <- modelTestMaskGroupsKeys.toList
          
          } yield {
          
            val groupid = group.split("\t")(0)
                  
            val vcfString = schemaStores((configSchema, configCohorts)).vcf match {
              case Some(s) => s"""--vcf ${schemaStores((configSchema, configCohorts)).vcf.get.data.local.get.toString.split("@")(1)}"""
              case None => s"""--vcf ${arrayStores(array).cleanData.get.vcf.data.local.get.toString.split("@")(1)}"""
            }
            
            var epactsIn = Seq(modelStores((configModel, configSchema, configCohorts, configMeta)).pedEpacts.get, modelStores((configModel, configSchema, configCohorts, configMeta)).modelVarsEpacts.get, schemaStores((configSchema, configCohorts)).groupFile.base.masks(mask).local.get)
            schemaStores((configSchema, configCohorts)).vcf match {
              case Some(s) => epactsIn = epactsIn ++ Seq(schemaStores((configSchema, configCohorts)).vcf.get.data.local.get)
              case None => epactsIn = epactsIn ++ Seq(arrayStores(array).cleanData.get.vcf.data.local.get)
            }
            
            drmWith(imageName = s"${utils.image.imgUmichStatgen}") {
            
              cmd"""${utils.bash.shEpacts}
                --bin ${utils.binary.binEpacts}
                --type group
                ${vcfString}
                --groupfin ${schemaStores((configSchema, configCohorts)).groupFile.base.masks(mask).local.get}
                --groupid "${groupid}"
                --groupfout ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups(groupid).groupFile}
                --ped ${modelStores((configModel, configSchema, configCohorts, configMeta)).pedEpacts.get}
                --vars ${modelStores((configModel, configSchema, configCohorts, configMeta)).modelVarsEpacts.get}
                --test ${test.replace("epacts.","")}
                --field "DS"
                --out ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups(groupid).results}
                --run 1"""
                .in(epactsIn)
                .out(modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups(groupid).groupFile, modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups(groupid).results)
                .tag(s"${modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups(groupid).results}".split("/").last)
            
            }
        
          }
        
          modelTestMaskGroupsKeys.size match {
          
            case n if n > 0 =>
          
              val maskResultsFile = s"""${modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups(modelTestMaskGroupsKeys.head.split("\t")(0)).results.toString.split("@")(1).replace(modelTestMaskGroupsKeys.head.split("\t")(0), "___GROUP___")}"""
              
              val maskResultsFiles = for {
                group <- modelTestMaskGroupsKeys.toList
              } yield {
                modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).groups(group.split("\t")(0)).results
              }
        
              drmWith(imageName = s"${utils.image.imgTools}") {
              
                cmd"""${utils.bash.shMergeResults}
                   --results ${maskResultsFile}
                   --groupf ${schemaStores((configSchema, configCohorts)).groupFile.base.masks(mask).local.get}
                   --out ${modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).results}"""
                  .in(maskResultsFiles :+ schemaStores((configSchema, configCohorts)).groupFile.base.masks(mask).local.get)
                  .out(modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).results)
                  .tag(s"${modelStores((configModel, configSchema, configCohorts, configMeta)).assocMaskGroup(mask)(test).results}".split("/").last)
              
              }
          
            case _ => ()
          
          }
        
      }
    
    }

  }

}
