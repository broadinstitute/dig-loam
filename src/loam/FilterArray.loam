/**
 * Filter Array Step
 * filter samples and variants to generate array-level exclusions for analysis
 */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._

def FilterArray(array: ConfigArray): Unit = {

  val vfilters = {
    array.analysisVariantFilters match {
      case Some(a) =>
        for {
          f <- a.tupelize_metrics
        } yield {
          f._2 match {
            case Some(s) => "--vfilter " + f._1 + " \"" + s + "\""
            case _ => ""
          }
        }
      case _ => List("")
    }
  }.mkString(" ")

  val sfilters = {
    array.analysisSampleFilters match {
      case Some(a) =>
        for {
          f <- a.tupelize_metrics
        } yield {
          f._2 match {
            case Some(s) => "--sfilter " + f._1 + " \"" + s + "\""
            case _ => ""
          }
        }
      case _ => List("")
    }
  }.mkString(" ")

  projectConfig.hailCloud match {

    case true =>
 
      local {
      
        googleCopy(arrayStores(array).filterPass1.samplesExclude, arrayStores(array).filterPass1.samplesExcludeGoogle.get)
      
      }

      google {

        hail"""${utils.python.pyHailFilter} --
          --cloud
          ${sfilters}
          ${vfilters}
          --log ${arrayStores(array).filterPass2.hailLogGoogle.get}
          --mt-in ${arrayStores(array).refData.mtGoogle.get}
          --samples-remove ${arrayStores(array).filterPass1.samplesExcludeGoogle.get}
          --samples-stats-out ${arrayStores(array).filterPass2.samplesStatsGoogle.get}
          --samples-exclude-out ${arrayStores(array).filterPass2.samplesExcludeGoogle.get}
          --variants-stats-out ${arrayStores(array).filterPass2.variantsStatsGoogle.get}
          --variants-exclude-out ${arrayStores(array).filterPass2.variantsExcludeGoogle.get}"""
          .in(arrayStores(array).refData.mtGoogle.get, arrayStores(array).sexcheckData.sexcheckGoogle.get, arrayStores(array).filterPass1.samplesExcludeGoogle.get)
          .out(arrayStores(array).filterPass2.samplesStatsGoogle.get, arrayStores(array).filterPass2.samplesExcludeGoogle.get, arrayStores(array).filterPass2.variantsStatsGoogle.get, arrayStores(array).filterPass2.variantsExcludeGoogle.get, arrayStores(array).filterPass2.hailLogGoogle.get)
          .tag(s"${arrayStores(array).filterPass2.hailLog}.pyHailFilter.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(arrayStores(array).filterPass2.samplesStatsGoogle.get, arrayStores(array).filterPass2.samplesStats)
        googleCopy(arrayStores(array).filterPass2.samplesExcludeGoogle.get, arrayStores(array).filterPass2.samplesExclude)
        googleCopy(arrayStores(array).filterPass2.variantsStatsGoogle.get, arrayStores(array).filterPass2.variantsStats)
        googleCopy(arrayStores(array).filterPass2.variantsExcludeGoogle.get, arrayStores(array).filterPass2.variantsExclude)
        googleCopy(arrayStores(array).filterPass2.hailLogGoogle.get, arrayStores(array).filterPass2.hailLog)
      
      }

    case false =>

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.filterFinalHail.cpus, mem = projectConfig.resources.filterFinalHail.mem, maxRunTime = projectConfig.resources.filterFinalHail.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailFilter}
          ${sfilters}
          ${vfilters}
          --log ${arrayStores(array).filterPass2.hailLog}
          --mt-in ${arrayStores(array).refData.mt.get}
          --samples-remove ${arrayStores(array).filterPass1.samplesExclude}
          --samples-stats-out ${arrayStores(array).filterPass2.samplesStats}
          --samples-exclude-out ${arrayStores(array).filterPass2.samplesExclude}
          --variants-stats-out ${arrayStores(array).filterPass2.variantsStats}
          --variants-exclude-out ${arrayStores(array).filterPass2.variantsExclude}"""
          .in(arrayStores(array).refData.mt.get, arrayStores(array).sexcheckData.sexcheck, arrayStores(array).filterPass1.samplesExclude)
          .out(arrayStores(array).filterPass2.samplesStats, arrayStores(array).filterPass2.samplesExclude, arrayStores(array).filterPass2.variantsStats, arrayStores(array).filterPass2.variantsExclude, arrayStores(array).filterPass2.hailLog)
          .tag(s"${arrayStores(array).filterPass2.hailLog}.pyHailFilter".split("/").last)

      }

  }
  
  //drmWith(imageName = s"${utils.image.imgTools}") {
  //
  //  cmd"""${utils.binary.binTabix} -f -p vcf ${arrayStores(array).cleanData.vcf}"""
  //    .in(arrayStores(array).cleanData.vcf)
  //    .out(arrayStores(array).cleanData.tbi)
  //    .tag(s"${arrayStores(array).cleanData.tbi}".split("/").last)
  //
  //}
  //
  //drmWith(imageName = s"${utils.image.imgTools}", cores = projectConfig.resources.filterFinalPlink.cpus, mem = projectConfig.resources.filterFinalPlink.mem, maxRunTime = projectConfig.resources.filterFinalPlink.maxRunTime) {
  //
  //  cmd"""${utils.binary.binPlink} --vcf ${arrayStores(array).cleanData.vcf} --allow-no-sex --output-chr MT --keep-allele-order --make-bed --out ${arrayStores(array).cleanData.plink.base} --memory ${projectConfig.resources.filterFinalPlink.mem * 0.9 * 1000}"""
  //    .in(arrayStores(array).cleanData.vcf)
  //    .out(arrayStores(array).cleanData.plink.data)
  //    .tag(s"${arrayStores(array).cleanData.plink.base}".split("/").last)
  //
  //}
  //
  //drmWith(imageName = s"${utils.image.imgR34}", cores = projectConfig.resources.filterFinalPcair.cpus, mem = projectConfig.resources.filterFinalPcair.mem, maxRunTime = projectConfig.resources.filterFinalPcair.maxRunTime) {
  //
  //  cmd"""${utils.binary.binRscript} --vanilla --verbose
  //    ${utils.r.rPcair}
  //    --cpus ${projectConfig.resources.filterFinalPcair.cpus}
  //    --plink-in ${arrayStores(array).prunedData.base}
  //    --gds-out ${arrayStores(array).cleanData.gds}
  //    --exclude ${arrayStores(array).finalData.samplesExclude}
  //    --scores ${arrayStores(array).cleanData.pcaScores}
  //    > ${arrayStores(array).cleanData.pcaLog}"""
  //    .in(arrayStores(array).prunedData.data :+ arrayStores(array).finalData.samplesExclude)
  //    .out(arrayStores(array).cleanData.gds, arrayStores(array).cleanData.pcaScores, arrayStores(array).cleanData.pcaLog)
  //    .tag(s"${arrayStores(array).cleanData.pcaScores}".split("/").last)
  //
  //}

}
