/**
 * Filter Array Step
 * filter samples and variants to generate array-level exclusions for analysis
 */
import ProjectConfig._
import ArrayStores._
import ProjectStores._
import Fxns._

final case class CfgException(s: String) extends Exception(s)

def FilterArray(array: ConfigArray): Unit = {

  var vFilters = Seq[String]()
  array.postQcVariantFilters match {
    case Some(l) =>
      vFilters = vFilters ++ variantFiltersToPrintableList(cfg = projectConfig, filters = l)
    case None => ()
  }

  var sFilters = Seq[String]()
  array.postQcSampleFilters match {
    case Some(l) =>
      sFilters = sFilters ++ sampleFiltersToPrintableList(cfg = projectConfig, filters = l)
    case None => ()
  }

  vFilters.size match {

    case n if n > 0 =>

      drmWith(imageName = s"${utils.image.imgTools}") {
      
        cmd"""echo "${vFilters.mkString("\n")}" > ${arrayStores(array).filterPostQc.vFilters}"""
          .out(arrayStores(array).filterPostQc.vFilters)
          .tag(s"${arrayStores(array).filterPostQc.vFilters}".split("/").last)

      }

    case _ =>

      drmWith(imageName = s"${utils.image.imgTools}") {
      
        cmd"""touch ${arrayStores(array).filterPostQc.vFilters}"""
          .out(arrayStores(array).filterPostQc.vFilters)
          .tag(s"${arrayStores(array).filterPostQc.vFilters}".split("/").last)

      }

  }

  sFilters.size match {

    case n if n > 0 =>

      drmWith(imageName = s"${utils.image.imgTools}") {
      
        cmd"""echo "${sFilters.mkString("\n")}" > ${arrayStores(array).filterPostQc.sFilters}"""
          .out(arrayStores(array).filterPostQc.sFilters)
          .tag(s"${arrayStores(array).filterPostQc.sFilters}".split("/").last)
      
      }

    case _ =>

      drmWith(imageName = s"${utils.image.imgTools}") {
      
        cmd"""touch ${arrayStores(array).filterPostQc.sFilters}"""
          .out(arrayStores(array).filterPostQc.sFilters)
          .tag(s"${arrayStores(array).filterPostQc.sFilters}".split("/").last)
      
      }

  }

  projectConfig.hailCloud match {

    case true =>
 
      local {
      
        googleCopy(arrayStores(array).filterQc.samplesExclude, arrayStores(array).filterQc.samplesExcludeGoogle.get)
        googleCopy(arrayStores(array).filterPostQc.vFilters, arrayStores(array).filterPostQc.vFiltersGoogle.get)
        googleCopy(arrayStores(array).filterPostQc.sFilters, arrayStores(array).filterPostQc.sFiltersGoogle.get)
      
      }

      google {

        hail"""${utils.python.pyHailFilter} --
          --cloud
          --reference-genome ${projectConfig.referenceGenome}
          --hail-utils ${projectStores.hailUtilsGoogle.get}
          --sample-filters ${arrayStores(array).filterPostQc.sFiltersGoogle.get}
          --variant-filters ${arrayStores(array).filterPostQc.vFiltersGoogle.get}
          --log ${arrayStores(array).filterPostQc.hailLogGoogle.get}
          --mt-in ${arrayStores(array).refData.mtGoogle.get}
          --samples-remove ${arrayStores(array).filterQc.samplesExcludeGoogle.get}
          --samples-stats-out ${arrayStores(array).filterPostQc.samplesStatsGoogle.get}
          --samples-exclude-out ${arrayStores(array).filterPostQc.samplesExcludeGoogle.get}
          --variants-stats-out ${arrayStores(array).filterPostQc.variantsStatsGoogle.get}
          --variants-exclude-out ${arrayStores(array).filterPostQc.variantsExcludeGoogle.get}"""
          .in(projectStores.hailUtilsGoogle.get, arrayStores(array).refData.mtGoogle.get, arrayStores(array).filterPostQc.sFiltersGoogle.get, arrayStores(array).filterPostQc.vFiltersGoogle.get, arrayStores(array).sexcheckData.sexcheckGoogle.get, arrayStores(array).filterQc.samplesExcludeGoogle.get)
          .out(arrayStores(array).filterPostQc.samplesStatsGoogle.get, arrayStores(array).filterPostQc.samplesExcludeGoogle.get, arrayStores(array).filterPostQc.variantsStatsGoogle.get, arrayStores(array).filterPostQc.variantsExcludeGoogle.get, arrayStores(array).filterPostQc.hailLogGoogle.get)
          .tag(s"${arrayStores(array).filterPostQc.hailLog}.pyHailFilter.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(arrayStores(array).filterPostQc.samplesStatsGoogle.get, arrayStores(array).filterPostQc.samplesStats)
        googleCopy(arrayStores(array).filterPostQc.samplesExcludeGoogle.get, arrayStores(array).filterPostQc.samplesExclude)
        googleCopy(arrayStores(array).filterPostQc.variantsStatsGoogle.get, arrayStores(array).filterPostQc.variantsStats)
        googleCopy(arrayStores(array).filterPostQc.variantsExcludeGoogle.get, arrayStores(array).filterPostQc.variantsExclude)
        googleCopy(arrayStores(array).filterPostQc.hailLogGoogle.get, arrayStores(array).filterPostQc.hailLog)
      
      }

    case false =>

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.filterFinalHail.cpus, mem = projectConfig.resources.filterFinalHail.mem, maxRunTime = projectConfig.resources.filterFinalHail.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailFilter}
          --reference-genome ${projectConfig.referenceGenome}
          --sample-filters ${arrayStores(array).filterPostQc.sFilters}
          --variant-filters ${arrayStores(array).filterPostQc.vFilters}
          --log ${arrayStores(array).filterPostQc.hailLog}
          --mt-in ${arrayStores(array).refData.mt.get}
          --samples-remove ${arrayStores(array).filterQc.samplesExclude}
          --samples-stats-out ${arrayStores(array).filterPostQc.samplesStats}
          --samples-exclude-out ${arrayStores(array).filterPostQc.samplesExclude}
          --variants-stats-out ${arrayStores(array).filterPostQc.variantsStats}
          --variants-exclude-out ${arrayStores(array).filterPostQc.variantsExclude}"""
          .in(arrayStores(array).refData.mt.get, arrayStores(array).sexcheckData.sexcheck, arrayStores(array).filterPostQc.sFilters, arrayStores(array).filterPostQc.vFilters, arrayStores(array).filterQc.samplesExclude)
          .out(arrayStores(array).filterPostQc.samplesStats, arrayStores(array).filterPostQc.samplesExclude, arrayStores(array).filterPostQc.variantsStats, arrayStores(array).filterPostQc.variantsExclude, arrayStores(array).filterPostQc.hailLog)
          .tag(s"${arrayStores(array).filterPostQc.hailLog}.pyHailFilter".split("/").last)

      }

  }

}
