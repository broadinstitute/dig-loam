import scala.util.{Try, Success, Failure}
import scala.util.control.NonFatal
import java.nio.file.{Paths, Files}

final case class CfgException(s: String) extends Exception(s)

trait Debug{
  def debugVars(): Any = {
    val vars = this.getClass.getDeclaredFields
    val name = this.getClass.getName.split("\\$")(1)
    for(v <- vars) {
      v.setAccessible(true)
      println("Class: " + name + " Field: " + v.getName() + " => " + v.get(this))
    }
  }
}

def requiredStr(config: loamstream.conf.DataConfig, field: String, regex: String = ".*", default: Option[String] = None): String = {
  Try(config.getStr(field)) match {
    case Success(o) =>
      o.matches(regex) match {
        case false => throw new CfgException("requiredStr: field " + field + " value " + o + " does not match regex format " + regex)
        case true  => o
      }
    case Failure(NonFatal(e)) => 
      default match {
        case Some(s) => s
        case None    => throw new CfgException("requiredStr: field '" + field + "' not found")
      }
    case Failure(_)           => throw new CfgException("requiredStr: field '" + field + "' fatal error")
  }
}

def optionalStr(config: loamstream.conf.DataConfig, field: String, regex: String = ".*"): Option[String] = {
  Try(config.getStr(field)) match {
    case Success(o)           =>
      o.matches(regex) match {
        case false => throw new CfgException("optionalStr: field " + field + " value " + o + " does not match regex format " + regex)
        case true  => Some(o)
      }
    case Failure(NonFatal(e)) => None
    case Failure(_)           => throw new CfgException("optionalStr: field '" + field + "' fatal error")
  }
}

def getStrOrBlank(config: loamstream.conf.DataConfig, field: String, regex: String = ".*"): String = {
  Try(config.getStr(field)) match {
    case Success(o)           =>
      o.matches(regex) match {
        case false => throw new CfgException("getStrOrBlank: field " + field + " value " + o + " does not match regex format " + regex)
        case true  => o
      }
    case Failure(NonFatal(e)) => ""
    case Failure(_)           => throw new CfgException("getStrOrBlank: field '" + field + "' fatal error")
  }
}

def requiredInt(config: loamstream.conf.DataConfig, field: String, default: Option[Int] = None): Int = {
  Try(config.getInt(field)) match {
    case Success(o) => o
    case Failure(NonFatal(e)) =>
      default match {
        case Some(i) => i
        case None    => throw new CfgException("requiredInt: field '" + field + "' not found")
      }
    case Failure(_)           => throw new CfgException("requiredInt: field '" + field + "' fatal error")
  }
}

def optionalInt(config: loamstream.conf.DataConfig, field: String, regex: String = ".*"): Option[Int] = {
  Try(config.getInt(field)) match {
    case Success(o)           =>
      o.toString.matches(regex) match {
        case false => throw new CfgException("optionalInt: field " + field + " value " + o.toString + " does not match regex format " + regex)
        case true  => Some(o)
      }
    case Failure(NonFatal(e)) => None
    case Failure(_)           => throw new CfgException("optionalInt: field '" + field + "' fatal error")
  }
}

def requiredBool(config: loamstream.conf.DataConfig, field: String, default: Option[Boolean] = None): Boolean = {
  Try(config.getBool(field)) match {
    case Success(o) => o
    case Failure(NonFatal(e)) =>
      default match {
        case Some(i) => i
        case None    => throw new CfgException("requiredBool: field '" + field + "' not found")
      }
    case Failure(_)           => throw new CfgException("requiredBool: field '" + field + "' fatal error")
  }
}

def requiredStrList(config: loamstream.conf.DataConfig, field: String, regex: String = ".*" , default: Option[Seq[String]] = None): Seq[String] = {
  Try(config.getStrList(field)) match {
    case Success(o)           =>
      for ( x <- o ) {
        x.toString.matches(regex) match {
          case false => throw new CfgException("requiredStrList: field " + field + " value " + x.toString + " does not match regex format " + regex)
          case true  => ()
        }
      }
      o 
    case Failure(NonFatal(e)) => 
      default match {
        case Some(s) =>
          s.toString.matches(regex) match {
            case false => throw new CfgException("optionalInt: field " + field + " value " + s.toString + " does not match regex format " + regex)
            case true  => s
          }
        case None    => throw new CfgException("requiredStrList: field '" + field + "' not found")
      }
    case Failure(_)           => throw new CfgException("requiredStrList: field '" + field + "' fatal error")
  }
}

def optionalStrList(config: loamstream.conf.DataConfig, field: String): Option[Seq[String]] = {
  Try(config.getStrList(field)) match {
    case Success(o)           => Some(o)
    case Failure(NonFatal(e)) => None
    case Failure(_)           => throw new CfgException("optionalStrList: field '" + field + "' fatal error")
  }
}

def requiredObjList(config: loamstream.conf.DataConfig, field: String, default: Option[Seq[loamstream.conf.DataConfig]] = None): Seq[loamstream.conf.DataConfig] = {
  Try(config.getObjList(field)) match {
    case Success(o)           => o
    case Failure(NonFatal(e)) => 
      default match {
        case Some(s) => s
        case None    => throw new CfgException("requiredObjList: field '" + field + "' not found")
      }
    case Failure(_)           => throw new CfgException("requiredObjList: field '" + field + "' fatal error")
  }
}

def checkPath(s: String): String = {
  Files.exists(Paths.get(s)) match {
    case false => throw new CfgException("checkPath: " + s + " not found")
    case true  => s
  }
}

def initDir(s: String): String = {
  val dir = Paths.get(s)
  Files.exists(dir) match {
    case false =>
      Files.createDirectory(dir)
      s
    case true  => s
  }
}

def expandChrList(chrs: Seq[String]): Seq[String] = {
  val y = for {
    x <- chrs
  } yield {
    x.matches("([1-9]|1[0-9]|2[0-1])-([2-9]|1[0-9]|2[0-2])") match {
      case true => (x.split("-").head.toInt to x.split("-").tail.head.toInt).toList.map(_.toString)
      case false => Seq(x)
    }
  }
  y.flatten
}
