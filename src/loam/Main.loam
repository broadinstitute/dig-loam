import ProjectConfig._
//import PipelineConfig._
//import Directories._
//import StoreHelpers._
//import ProjectStores._
import ArrayStores._
import Upload._
import Prepare._
import Harmonize._
import Load._
import Annotate._
import FilterForQc._
import Kinship._
import Ancestry._
import Pca._
import SampleQc._
//import FilterFinal._
//import Impute._
//import VariantAssoc._
//import CrossCohort._
//import Meta._
//import Merge._
//import ResultsSummary._
//import AssocStores._
//import Phenotype._
//import QcReport._
//import AnalysisReport._

import loamstream.conf.DataConfig
import loamstream.googlecloud.HailSupport._
import loamstream.model.Store
import loamstream.util.CanBeClosed.enclosed

//throw new Exception(s"${ProjectStores.regionsExcludeGoogle.get.uri}")

// Upload input files to Google Cloud
Upload()

// Array specific QC steps up to ancestry inferrence
for {
  array <- projectConfig.Arrays if array.technology == "gwas"
} yield {
    
  Prepare(array)
  Harmonize(array)

}

for {
  array <- projectConfig.Arrays
} yield {

  Load(array)
  FilterForQc(array)
  Annotate(array)
  Kinship(array)
  AncestryPca(array)
  AncestryCluster(array)

}

// Reconcile inferred ancestry
MergeInferredAncestry()

// Array specific QC steps post ancestry inference
for {
  array <- projectConfig.Arrays
} yield { 

  Pca(array)
  SampleQc(array)
  //FilterFinal(array)

}

//// QC Report
//QcReport()
//
//// Generate imputation ready data files
//for {
//  array <- projectConfig.Arrays
//} yield { 
//
//  FilterImpute(array.id)
//
//}
//
// Only proceed if phenoFile is defined
//
//ProjectStores.phenoFile match {
//
//  case None => ()
//
//  case _ =>
//
//  // Cohort variant association
//  for {
//    x <- modelCohorts
//  } yield {
//  
//    VariantAssoc(configModel = x.model, configCohort = x.cohort, configMeta = None)
//  
//  }
//  
//  // Copy known results to Google Cloud
//  for {
//    x <- ProjectStores.knownStores.keys
//  } yield {
//  
//    KnownLociToGoogle(configKnown = x)
//  
//  }
//  
//  // Cohort variant association for known loci
//  for {
//    x <- modelCohortKnowns
//  } yield {
//  
//    KnownLociAssoc(configModel = x.model, configCohort = x.cohort, configKnown = x.known, configMeta = None)
//  
//  }
//  
//  // Meta-analysis cross-cohort common variants search
//  for {
//    meta <- metas
//  } yield {
//  
//    CrossCohortCommonVars(configMeta = meta)
//  
//  }
//  
//  // Meta-analysis cross-cohort qc prep
//  for {
//    meta <- metas
//    cohort <- projectConfig.Cohorts.filter(e => meta.cohorts contains e.id)
//  } yield {
//  
//    CrossCohortPrep(configMeta = meta, configCohort = cohort)
//  
//  }
//  
//  // Meta-analysis cross-array kinship
//  for {
//    meta <- metas
//  } yield {
//  
//    CrossCohortKinship(meta)
//  
//  }
//  
//  // Meta-analysis calculate cross-cohort kinship sample exclusions
//  for {
//    meta <- metas
//    cohort <- projectConfig.Cohorts.filter(e => meta.cohorts contains e.id)
//  } yield {
//  
//    CrossCohortExclude(configMeta = meta, configCohort = cohort)
//  
//  }
//  
//  // Meta-analysis specific cohort variant association
//  for {
//    x <- modelCohortMetas
//  } yield { 
//  
//    VariantAssoc(configCohort = x.cohort, configModel = x.model, configMeta = Some(x.meta))
//  
//  }
//  
//  // Meta-analysis specific cohort variant association for known loci
//  for {
//    x <- modelCohortMetaKnowns
//  } yield { 
//  
//    KnownLociAssoc(configModel = x.model, configCohort = x.cohort, configKnown = x.known, configMeta = Some(x.meta))
//  
//  }
//  
//  // Meta-analysis
//  for {
//    x <- modelMetas
//  } yield {
//  
//    MetaAnalysis(configModel = x.model, configMeta = x.meta)
//  
//  }
//  
//  // Meta-analysis for known loci
//  for {
//    x <- modelMetaKnowns
//  } yield {
//  
//    MetaAnalysisKnownLoci(configModel = x.model, configMeta = x.meta, configKnown = x.known)
//  
//  }
//  
//  // Merge results
//  for {
//    x <- modelMerges
//  } yield {
//  
//    MergeAssoc(configModel = x.model, configMerge = x.merge)
//  
//  }
//  
//  // Merge known assoc results
//  for {
//    x <- modelMergeKnowns
//  } yield {
//  
//    MergeKnownAssoc(configModel = x.model, configMerge = x.merge, configKnown = x.known)
//  
//  }
//  
//  // Cohort Results Summary
//  for {
//    x <- modelCohortsReport
//  } yield {
//  
//    ResultsSummary(configModel = x.model, configCohort = Some(x.cohort), configMeta = None, configMerge = None)
//  
//  }
//  
//  // Meta Results Summary
//  for {
//    x <- modelMetasReport
//  } yield { 
//  
//    ResultsSummary(configModel = x.model, configCohort = None, configMeta = Some(x.meta), configMerge = None)
//  
//  }
//  
//  // Merge Results Summary
//  for {
//    x <- modelMerges
//  } yield { 
//  
//    ResultsSummary(configModel = x.model, configCohort = None, configMeta = None, configMerge = Some(x.merge))
//  
//  }
//  
//  // Cohort Known Loci Results Summary
//  for {
//    x <- modelCohortKnownsReport
//  } yield { 
//  
//    ResultsKnownLociSummary(configModel = x.model, configCohort = Some(x.cohort), configMeta = None, configMerge = None, configKnown = x.known)
//  
//  }
//  
//  // Meta Known Loci Results Summary
//  for {
//    x <- modelMetaKnownsReport
//  } yield { 
//  
//    ResultsKnownLociSummary(configModel = x.model, configCohort = None, configMeta = Some(x.meta), configMerge = None, configKnown = x.known)
//  
//  }
//  
//  // Merge Known Loci Results Summary
//  for {
//    x <- modelMergeKnowns
//  } yield { 
//  
//    ResultsKnownLociSummary(configModel = x.model, configCohort = None, configMeta = None, configMerge = Some(x.merge), configKnown = x.known)
//  
//  }
//  
//  // Generate Phenotype Figures for Cohorts
//  for {
//    x <- phenoCohorts
//  } yield { 
//  
//    PhenotypeDistPlots(configPheno = x.pheno, configCohort = x.cohort, configMeta = None)
//  
//  }
//  
//  // Generate Phenotype Figures for Meta Cohorts
//  for {
//    x <- phenoCohortMetas
//  } yield { 
//  
//    PhenotypeDistPlots(configPheno = x.pheno, configCohort = x.cohort, configMeta = Some(x.meta))
//  
//  }
//  
//  // Analysis Report Global
//  for {
//    report <- projectConfig.Reports
//  } yield {
//  
//    AnalysisReportGlobal(configReport = report)
//  
//  }
//  
//  // Analysis Report Phenotypes
//  for {
//    report <- projectConfig.Reports
//    section <- report.sections
//    pheno <- projectConfig.Models.filter(e => section.models contains e.id).map(e => projectConfig.Phenos.filter(f => f.id == e.pheno)).flatten.distinct
//  } yield {
//  
//    AnalysisReportPheno(configReport = report, configSection = section, configPheno = pheno)
//  
//  }
//  
//  // Analysis Report Compile
//  for {
//    report <- projectConfig.Reports
//  } yield {
//  
//  AnalysisReportCompile(configReport = report)
//  
//  }
//}