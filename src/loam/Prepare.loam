/**
  * Prepare Step
  *  Description: Prepare plink files: remove lowest quality duplicate variants, etc. and liftOver if necessary
  *  Requires: Plink1.9, liftOver
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._

def Prepare(array: String): Unit = {

  drmWith(imageName = s"$imgTools") {

    cmd"""awk '$$1 == 0 {print $$2}' ${arrayStores(array).rawData.base}.bim > ${arrayStores(array).rawData.unplaced}"""
      .in(arrayStores(array).rawData.data)
      .out(arrayStores(array).rawData.unplaced)
      .tag(s"${arrayStores(array).rawData.unplaced}".split("/").last)
  
    cmd"""awk '{k=$$1":"$$4":"$$5":"$$6; if(!m[k]) {print $$2; m[k]=1}}' ${arrayStores(array).rawData.base}.bim > ${arrayStores(array).rawData.unique}"""
      .in(arrayStores(array).rawData.data)
      .out(arrayStores(array).rawData.unique)
      .tag(s"${arrayStores(array).rawData.unique}".split("/").last)
  
    cmd"""awk '{if($$5$$6 == "ID" || $$5$$6 == "DI") print $$2}' ${arrayStores(array).rawData.base}.bim > ${arrayStores(array).rawData.indel}"""
      .in(arrayStores(array).rawData.data)
      .out(arrayStores(array).rawData.indel)
      .tag(s"${arrayStores(array).rawData.indel}".split("/").last)

  }

  drmWith(imageName = s"$imgTools", cores = projectConfig.resources.preparePlink.cpus, mem = projectConfig.resources.preparePlink.mem, maxRunTime = projectConfig.resources.preparePlink.maxRunTime) {
  
    cmd"""$binPlink --bfile ${arrayStores(array).rawData.base} --allow-no-sex --missing --out ${arrayStores(array).rawData.rawBase}.missing --memory ${projectConfig.resources.preparePlink.mem * 0.9 * 1000}"""
      .in(arrayStores(array).rawData.data)
      .out(arrayStores(array).rawData.lmiss, arrayStores(array).rawData.imiss)
      .tag(s"${arrayStores(array).rawData.base}.missing".split("/").last)

  }

  drmWith(imageName = s"$imgTools") {

    cmd"""sed '1d' ${arrayStores(array).rawData.imiss} | awk '{if($$6 > 0.5) print $$1" "$$2}' > ${arrayStores(array).rawData.imissRemove}"""
      .in(arrayStores(array).rawData.imiss)
      .out(arrayStores(array).rawData.imissRemove)
      .tag(s"${arrayStores(array).rawData.imissRemove}".split("/").last)

  }

  drmWith(imageName = s"$imgTools", cores = projectConfig.resources.preparePlink.cpus, mem = projectConfig.resources.preparePlink.mem, maxRunTime = projectConfig.resources.preparePlink.maxRunTime) {
  
    cmd"""$binPlink --bfile ${arrayStores(array).rawData.base} --allow-no-sex --freq --out ${arrayStores(array).rawData.rawBase}.freq --memory ${projectConfig.resources.preparePlink.mem * 0.9 * 1000}"""
      .in(arrayStores(array).rawData.data)
      .out(arrayStores(array).rawData.freq)
      .tag(s"${arrayStores(array).rawData.freq}".split("/").last)

  }

  drmWith(imageName = s"$imgTools") {
  
    cmd"""sed '1d' ${arrayStores(array).rawData.freq} | awk '{if($$5 == 0) print $$2}' > ${arrayStores(array).rawData.mono}"""
      .in(arrayStores(array).rawData.freq)
      .out(arrayStores(array).rawData.mono)
      .tag(s"${arrayStores(array).rawData.mono}".split("/").last)

  }

  drmWith(imageName = s"$imgR34", cores = projectConfig.resources.prepareFindBestDuplicateVariants.cpus, mem = projectConfig.resources.prepareFindBestDuplicateVariants.mem, maxRunTime = projectConfig.resources.prepareFindBestDuplicateVariants.maxRunTime) {
  
    cmd"""$binRscript --vanilla --verbose 
      $rFindBestDuplicateVariants
      --bim-in ${arrayStores(array).rawData.base}.bim
      --freq-in ${arrayStores(array).rawData.freq}
      --miss-in ${arrayStores(array).rawData.lmiss}
      --out ${arrayStores(array).rawData.dupRemove}"""
      .in(arrayStores(array).rawData.data :+ arrayStores(array).rawData.freq :+ arrayStores(array).rawData.lmiss)
      .out(arrayStores(array).rawData.dupRemove)
      .tag(s"${arrayStores(array).rawData.dupRemove}".split("/").last)

  }

  drmWith(imageName = s"$imgTools", cores = projectConfig.resources.preparePlink.cpus, mem = projectConfig.resources.preparePlink.mem, maxRunTime = projectConfig.resources.preparePlink.maxRunTime) {

    cmd"""$shPlinkPrepare $binPlink ${arrayStores(array).rawData.base} ${arrayStores(array).preparedData.base} ${arrayStores(array).rawData.imissRemove} ${arrayStores(array).rawData.dupRemove} ${projectConfig.resources.preparePlink.mem * 0.9 * 1000}"""
      .in(arrayStores(array).rawData.data :+ arrayStores(array).rawData.imissRemove :+ arrayStores(array).rawData.dupRemove)
      .out(arrayStores(array).preparedData.data)
      .tag(s"${arrayStores(array).preparedData.base}".split("/").last)

  }

  drmWith(imageName = s"$imgTools") {
  
    cmd"""awk '{if(x[$$1":"$$4]) {x_count[$$1":"$$4]++; print $$2; if(x_count[$$1":"$$4] == 1) {print x[$$1":"$$4]}} x[$$1":"$$4] = $$2}' ${arrayStores(array).preparedData.base}.bim > ${arrayStores(array).preparedData.multiallelic}"""
      .in(arrayStores(array).preparedData.data)
      .out(arrayStores(array).preparedData.multiallelic)
      .tag(s"${arrayStores(array).preparedData.multiallelic}".split("/").last)
  
  }

  projectConfig.Arrays.filter(_.id == array)(0).liftOver match {

    case Some(s) =>

      drmWith(imageName = s"$imgTools") {
      
        cmd"""awk '{print "chr"$$1"\t"$$4"\t"$$4+1"\t"$$2}' ${arrayStores(array).preparedData.base}.bim | sed 's/^chrMT/chrM/g' > ${arrayStores(array).preparedData.bed.get}"""
          .in(arrayStores(array).preparedData.data)
          .out(arrayStores(array).preparedData.bed.get)
      
      }
      
      drmWith(imageName = s"$imgTools", cores = projectConfig.resources.prepareLiftOver.cpus, mem = projectConfig.resources.prepareLiftOver.mem, maxRunTime = projectConfig.resources.prepareLiftOver.maxRunTime) {
      
        cmd"""$binLiftOver ${arrayStores(array).preparedData.bed.get} ${arrayStores(array).preparedData.chain.get} ${arrayStores(array).preparedData.lifted.get} ${arrayStores(array).preparedData.unlifted.get}"""
          .in(arrayStores(array).preparedData.bed.get, arrayStores(array).preparedData.chain.get)
          .out(arrayStores(array).preparedData.lifted.get, arrayStores(array).preparedData.unlifted.get)
      
      }
      
      drmWith(imageName = s"$imgTools") {

        cmd"""sed 's/^chrM/chrMT/g' ${arrayStores(array).preparedData.lifted.get} | sed 's/^chr//g' | awk '{print $$1"\t"$$2"\t"$$4}' > ${arrayStores(array).preparedData.liftedUpdate.get}"""
          .in(arrayStores(array).preparedData.lifted.get)
          .out(arrayStores(array).preparedData.liftedUpdate.get)
      
        cmd"""awk '{print $$4}' ${arrayStores(array).preparedData.lifted.get} > ${arrayStores(array).preparedData.liftedExtract.get}"""
          .in(arrayStores(array).preparedData.lifted.get)
          .out(arrayStores(array).preparedData.liftedExtract.get)

      }

      drmWith(imageName = s"$imgTools", cores = projectConfig.resources.preparePlink.cpus, mem = projectConfig.resources.preparePlink.mem, maxRunTime = projectConfig.resources.preparePlink.maxRunTime) {
      
        cmd"""$binPlink
          --bfile ${arrayStores(array).preparedData.base}
		  --allow-no-sex
          --extract ${arrayStores(array).preparedData.liftedExtract.get}
          --update-chr ${arrayStores(array).preparedData.liftedUpdate.get} 1 3
          --update-map ${arrayStores(array).preparedData.liftedUpdate.get} 2 3
          --output-chr MT
          --make-bed
          --out ${arrayStores(array).annotatedData.base}
          --memory ${projectConfig.resources.preparePlink.mem * 0.9 * 1000}"""
          .in(arrayStores(array).preparedData.data :+ arrayStores(array).preparedData.liftedExtract.get :+ arrayStores(array).preparedData.liftedUpdate.get)
          .out(arrayStores(array).annotatedData.data)
      
      }

    case None => ()
    
  }

}