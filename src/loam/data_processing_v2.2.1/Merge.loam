/**
  * Merge Step
  *  Description: Merge results
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import AssocStores._

def MergeAssoc(configModel: ConfigModel, configMerge: ConfigMerge): Unit = {

  val merge = mergeStores((configModel, configMerge))

  hailCloud match {

    case true =>

      val resultsListStrings = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          val result = (assocStores.filter(e => ! e._1._3.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.resultsGoogle.get).toSeq ++ metaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._2.resultsGoogle.isDefined).map(e => e._2.resultsGoogle.get).toSeq).head
          c + "___" + s"${result.toString.split("@")(1)}"
      
        }
      
      }
      
      val resultsList = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          (assocStores.filter(e => ! e._1._3.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.resultsGoogle.get).toSeq ++ metaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._2.resultsGoogle.isDefined).map(e => e._2.resultsGoogle.get).toSeq).head
      
        }
      
      }
      
      google {
      
        hail"""$pyHailMerge --
          --results ${resultsListStrings.mkString(",")}
          --out ${merge.resultsGoogle.get}
          --log ${merge.hailLogGoogle.get}"""
            .in(resultsList)
            .out(merge.resultsGoogle.get, merge.hailLogGoogle.get)
            .tag(s"${merge.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(merge.resultsGoogle.get, merge.results)
        googleCopy(merge.hailLogGoogle.get, merge.hailLog)
      
      }

    case false =>

      val resultsListStrings = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          val result = (assocStores.filter(e => ! e._1._3.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.results).toSeq ++ metaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).map(e => e._2.results).toSeq).head
          c + "___" + s"${result.toString.split("@")(1)}"
      
        }
      
      }
      
      val resultsList = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          (assocStores.filter(e => ! e._1._3.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._2.id == c).map(e => e._2.results).toSeq ++ metaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).map(e => e._2.results).toSeq).head
      
        }
      
      }

      drmWith(imageName = s"$imgHail", cores = projectConfig.nCoresHail, mem = projectConfig.nMemHail) {

        cmd"""$binPython $pyHailMerge
          --results ${resultsListStrings.mkString(",")}
          --out ${merge.results}
          --log ${merge.hailLog}"""
            .in(resultsList)
            .out(merge.results, merge.hailLog)
            .tag(s"${merge.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"$imgTools") {
  
    cmd"""$binTabix -f -b 2 -e 2 ${merge.results}"""
      .in(merge.results)
      .out(merge.tbi)
      .tag(s"${merge.tbi}".split("/").last)
  
  }

}

def MergeKnownAssoc(configModel: ConfigModel, configMerge: ConfigMerge, configKnown: ConfigKnown): Unit = {

  val known = knownMergeStores((configModel, configMerge, configKnown))

  hailCloud match {

    case true =>

      val resultsListStrings = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          val result = (knownLociStores.filter(e => ! e._1._4.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._1._2.id == c).map(e => e._2.assoc.resultsGoogle.get).toSeq ++ knownMetaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._2.meta.resultsGoogle.isDefined).map(e => e._2.meta.resultsGoogle.get).toSeq).head
          c + "___" + s"${result.toString.split("@")(1)}"
      
        }
      
      }
      
      val resultsList = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          (knownLociStores.filter(e => ! e._1._4.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._1._2.id == c).map(e => e._2.assoc.resultsGoogle.get).toSeq ++ knownMetaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._2.meta.resultsGoogle.isDefined).map(e => e._2.meta.resultsGoogle.get).toSeq).head
      
        }
      
      }
      
      google {
      
        hail"""$pyHailMerge --
          --results ${resultsListStrings.mkString(",")}
          --out ${known.merge.resultsGoogle.get}
          --log ${known.merge.hailLogGoogle.get}"""
            .in(resultsList)
            .out(known.merge.resultsGoogle.get, known.merge.hailLogGoogle.get)
            .tag(s"${known.merge.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(known.merge.resultsGoogle.get, known.merge.results)
        googleCopy(known.merge.hailLogGoogle.get, known.merge.hailLog)
      
      }

    case false =>

      val resultsListStrings = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          val result = (knownLociStores.filter(e => ! e._1._4.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._1._2.id == c).map(e => e._2.assoc.results).toSeq ++ knownMetaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).map(e => e._2.meta.results).toSeq).head
          c + "___" + s"${result.toString.split("@")(1)}"
      
        }
      
      }
      
      val resultsList = {
      
        for {
          c <- configMerge.cohorts_metas
        } yield {
      
          (knownLociStores.filter(e => ! e._1._4.isDefined).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).filter(e => e._1._2.id == c).map(e => e._2.assoc.results).toSeq ++ knownMetaStores.filter(e => e._1._2.id == c).filter(e => e._1._1 == configModel).filter(e => e._1._3 == configKnown).map(e => e._2.meta.results).toSeq).head
      
        }
      
      }

      drmWith(imageName = s"$imgHail", cores = projectConfig.nCoresHail, mem = projectConfig.nMemHail) {

        cmd"""$binPython $pyHailMerge
          --results ${resultsListStrings.mkString(",")}
          --out ${known.merge.results}
          --log ${known.merge.hailLog}"""
            .in(resultsList)
            .out(known.merge.results, known.merge.hailLog)
            .tag(s"${known.merge.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"$imgTools") {
  
    cmd"""$binTabix -f -b 2 -e 2 ${known.merge.results}"""
      .in(known.merge.results)
      .out(known.merge.tbi)
      .tag(s"${known.merge.tbi}".split("/").last)
  
  }

}
