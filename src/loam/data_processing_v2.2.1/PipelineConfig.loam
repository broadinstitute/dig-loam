val pipelineConfig   = loadConfig("pipelineConfig", "")

// Run Hail In Cloud?
val hailCloud = pipelineConfig.getBool("hailCloud")

// Images
val imgHail   = path(pipelineConfig.getStr("images.hail"))
val imgLocuszoom = path(pipelineConfig.getStr("images.locuszoom"))
val imgPython27  = path(pipelineConfig.getStr("images.python27"))
val imgR34       = path(pipelineConfig.getStr("images.r34"))
val imgTools     = path(pipelineConfig.getStr("images.tools"))
val imgTex       = path(pipelineConfig.getStr("images.tex"))

// Binaries
val binLiftOver             = path(pipelineConfig.getStr("binaries.binLiftOver"))
val binGenotypeHarmonizer   = path(pipelineConfig.getStr("binaries.binGenotypeHarmonizer"))
val binKing                 = path(pipelineConfig.getStr("binaries.binKing"))
val binPlink                = path(pipelineConfig.getStr("binaries.binPlink"))
val binTabix                = path(pipelineConfig.getStr("binaries.binTabix"))
val binGhostscript          = path(pipelineConfig.getStr("binaries.binGhostscript"))
val binKlustakwik           = path(pipelineConfig.getStr("binaries.binKlustakwik"))
val binPython               = path(pipelineConfig.getStr("binaries.binPython"))
val binLocuszoom            = path(pipelineConfig.getStr("binaries.binLocuszoom"))
val binPdflatex             = path(pipelineConfig.getStr("binaries.binPdflatex"))
val binRscript              = path(pipelineConfig.getStr("binaries.binRscript"))

// Scripts
val pyAlignNon1kgVariants                      = path(pipelineConfig.getStr("scripts.pyAlignNon1kgVariants"))
val pyHailLoad                                 = path(pipelineConfig.getStr("scripts.pyHailLoad"))
val pyHailFilter                               = path(pipelineConfig.getStr("scripts.pyHailFilter"))
val pyHailAncestryPcaMerge1kg                  = path(pipelineConfig.getStr("scripts.pyHailAncestryPcaMerge1kg"))
val pyHailPcaMerge1kg                          = path(pipelineConfig.getStr("scripts.pyHailPcaMerge1kg"))
val pyHailSampleqc                             = path(pipelineConfig.getStr("scripts.pyHailSampleqc"))
val pyHailSexcheck                             = path(pipelineConfig.getStr("scripts.pyHailSexcheck"))
val pyHailFilterFinal                          = path(pipelineConfig.getStr("scripts.pyHailFilterFinal"))
val pyHailListSamples                          = path(pipelineConfig.getStr("scripts.pyHailListSamples"))
val pyHailAssoc                                = path(pipelineConfig.getStr("scripts.pyHailAssoc"))
val pyHailMerge                                = path(pipelineConfig.getStr("scripts.pyHailMerge"))
val pyHailMetaAnalysis                         = path(pipelineConfig.getStr("scripts.pyHailMetaAnalysis")) 
val pyQqPlot                                   = path(pipelineConfig.getStr("scripts.pyQqPlot"))
val pyMhtPlot                                  = path(pipelineConfig.getStr("scripts.pyMhtPlot"))
val shRegPlot                                  = path(pipelineConfig.getStr("scripts.shRegPlot"))
val pyExtractTopRegions                        = path(pipelineConfig.getStr("scripts.pyExtractTopRegions"))
val pyMakeSamplesRestoreTable                  = path(pipelineConfig.getStr("scripts.pyMakeSamplesRestoreTable"))
val pyCompileExclusions                        = path(pipelineConfig.getStr("scripts.pyCompileExclusions"))
val pyGenerateReportHeader                     = path(pipelineConfig.getStr("scripts.pyGenerateReportHeader"))
val pyGenerateQcReportIntro                    = path(pipelineConfig.getStr("scripts.pyGenerateQcReportIntro"))
val pyGenerateQcReportData                     = path(pipelineConfig.getStr("scripts.pyGenerateQcReportData"))
val pyGenerateQcReportAncestry                 = path(pipelineConfig.getStr("scripts.pyGenerateQcReportAncestry"))
val pyGenerateQcReportIbdSexcheck              = path(pipelineConfig.getStr("scripts.pyGenerateQcReportIbdSexcheck"))
val pyGenerateQcReportSampleqc                 = path(pipelineConfig.getStr("scripts.pyGenerateQcReportSampleqc"))
val pyGenerateQcReportVariantqc                = path(pipelineConfig.getStr("scripts.pyGenerateQcReportVariantqc"))
val pyGenerateQcReportBibliography             = path(pipelineConfig.getStr("scripts.pyGenerateQcReportBibliography"))
val pyGenerateAnalysisReportIntro              = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportIntro"))
val pyGenerateAnalysisReportData               = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportData"))
val pyGenerateAnalysisReportStrategy           = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportStrategy"))
val pyGenerateAnalysisReportPhenoSummary       = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportPhenoSummary"))
val pyGenerateAnalysisReportPhenoCalibration   = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportPhenoCalibration"))
val pyGenerateAnalysisReportPhenoTopLoci       = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportPhenoTopLoci"))
val pyGenerateAnalysisReportPhenoKnownLoci     = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportPhenoKnownLoci"))
val pyGenerateAnalysisReportBibliography       = path(pipelineConfig.getStr("scripts.pyGenerateAnalysisReportBibliography"))
val pyMergeVariantLists                        = path(pipelineConfig.getStr("scripts.pyMergeVariantLists"))
val pyTop1000                                  = path(pipelineConfig.getStr("scripts.pyTop1000"))
val pyAddGeneAnnot                             = path(pipelineConfig.getStr("scripts.pyAddGeneAnnot"))
val pyPhenoDistPlot                            = path(pipelineConfig.getStr("scripts.pyPhenoDistPlot"))
val shKing                                     = path(pipelineConfig.getStr("scripts.shKing"))
val shCrossCohortCommonVariants                = path(pipelineConfig.getStr("scripts.shCrossCohortCommonVariants"))
val shMetaCohortSamples                        = path(pipelineConfig.getStr("scripts.shMetaCohortSamples"))
val shKlustakwikPca                            = path(pipelineConfig.getStr("scripts.shKlustakwikPca"))
val shKlustakwikMetric                         = path(pipelineConfig.getStr("scripts.shKlustakwikMetric"))
val shTop1000Genes                             = path(pipelineConfig.getStr("scripts.shTop1000Genes"))
val rFindBestDuplicateVariants                 = path(pipelineConfig.getStr("scripts.rFindBestDuplicateVariants"))
val rAncestryClusterMerge                      = path(pipelineConfig.getStr("scripts.rAncestryClusterMerge"))
val rAncestryClusterTable                      = path(pipelineConfig.getStr("scripts.rAncestryClusterTable"))
val rCalcKinshipFamSizes                       = path(pipelineConfig.getStr("scripts.rCalcKinshipFamSizes"))
val rPcair                                     = path(pipelineConfig.getStr("scripts.rPcair"))
val rPlotAncestryPca                           = path(pipelineConfig.getStr("scripts.rPlotAncestryPca"))
val rPlotAncestryCluster                       = path(pipelineConfig.getStr("scripts.rPlotAncestryCluster"))
val rIstatsPcsGmmClusterPlot                   = path(pipelineConfig.getStr("scripts.rIstatsPcsGmmClusterPlot"))
val rIstatsAdjGmmPlotMetrics                   = path(pipelineConfig.getStr("scripts.rIstatsAdjGmmPlotMetrics"))
val rCalcIstatsAdj                             = path(pipelineConfig.getStr("scripts.rCalcIstatsAdj"))
val rIstatsAdjPca                              = path(pipelineConfig.getStr("scripts.rIstatsAdjPca"))
val rExcludeCrossArray                         = path(pipelineConfig.getStr("scripts.rExcludeCrossArray"))
val rGeneratePheno                             = path(pipelineConfig.getStr("scripts.rGeneratePheno"))
val rVariantsSummaryTable                      = path(pipelineConfig.getStr("scripts.rVariantsSummaryTable"))
val rUpsetplotBimFam                           = path(pipelineConfig.getStr("scripts.rUpsetplotBimFam"))
val rMakeOutlierTable                          = path(pipelineConfig.getStr("scripts.rMakeOutlierTable"))
val rMakeMetricDistPlot                        = path(pipelineConfig.getStr("scripts.rMakeMetricDistPlot"))
val rTop20                                     = path(pipelineConfig.getStr("scripts.rTop20"))
val rTop50Known                                = path(pipelineConfig.getStr("scripts.rTop50Known"))
val rMetaExclusionsTable                       = path(pipelineConfig.getStr("scripts.rMetaExclusionsTable"))

//Google Cloud-Facing
val gsutil                  = path("/humgen/diabetes2/users/dig/loamstream/google-cloud-sdk/bin/gsutil")
val gcloud                  = path("/humgen/diabetes2/users/dig/loamstream/google-cloud-sdk/bin/gcloud")

//Output directories
val localOutDir = path(pipelineConfig.getStr("outputDirs.local"))
val googleOutDir = uri(pipelineConfig.getStr("outputDirs.google"))
