import ProjectConfig._
import PipelineConfig._
import StoreHelpers._

final case class TablesData(
  variantsSummary: Store,
  clusters: Store,
  ancestry: Store,
  sampleQc: Store)

final case class TexData(
  header: Store,
  intro: Store,
  data: Store,
  ancestry: Store,
  ibdSexcheck: Store,
  sampleQc: Store,
  variantQc: Store,
  bibliography: Store)

final case class FigureData(
  samplesUpsetPlotPdf: Option[Store],
  variantsUpsetPlotPdf: Option[Store],
  metricDistUnadjPdf: Store,
  metricDistAdjPdf: Store,
  samplesRemainingUpsetPlotPdf: Store,
  variantsRemainingUpsetPlotPdf: Option[Store])

final case class QcReport(
  tablesData: TablesData,
  texData: TexData,
  figureData: FigureData,
  tex: Store,
  pdf: Store)

val qcReportStores = QcReport(

  tablesData = TablesData(
    variantsSummary = store(projectConfig.home / s"QCR.${projectConfig.projectId}.variants.summary.tbl"),
    clusters = store(projectConfig.home / s"QCR.${projectConfig.projectId}.clusters.tbl"),
    ancestry = store(projectConfig.home / s"QCR.${projectConfig.projectId}.ancestry.tbl"),
    sampleQc = store(projectConfig.home / s"QCR.${projectConfig.projectId}.sampleqc.tbl")),

  texData = TexData(
    header = store(projectConfig.home / s"QCR.${projectConfig.projectId}.header.tex"),
    intro = store(projectConfig.home / s"QCR.${projectConfig.projectId}.intro.tex"),
    data = store(projectConfig.home / s"QCR.${projectConfig.projectId}.data.tex"),
    ancestry = store(projectConfig.home / s"QCR.${projectConfig.projectId}.ancestry.tex"),
    ibdSexcheck = store(projectConfig.home / s"QCR.${projectConfig.projectId}.ibd_sexcheck.tex"),
    sampleQc = store(projectConfig.home / s"QCR.${projectConfig.projectId}.sampleqc.tex"),
    variantQc = store(projectConfig.home / s"QCR.${projectConfig.projectId}.variantqc.tex"),
    bibliography = store(projectConfig.home / s"QCR.${projectConfig.projectId}.bibliography.tex")),

  figureData = FigureData(
    samplesUpsetPlotPdf = if (projectConfig.nArrays > 1) { Some(store(projectConfig.home / s"QCR.${projectConfig.projectId}.samples.upsetplot.pdf")) } else { None },
    variantsUpsetPlotPdf = if (projectConfig.nArrays > 1) { Some(store(projectConfig.home / s"QCR.${projectConfig.projectId}.variants.upsetplot.pdf")) } else { None },
    metricDistUnadjPdf = store(projectConfig.home / s"QCR.${projectConfig.projectId}.metric_dist_unadj.pdf"),
    metricDistAdjPdf = store(projectConfig.home / s"QCR.${projectConfig.projectId}.metric_dist_adj.pdf"),
    samplesRemainingUpsetPlotPdf = store(projectConfig.home / s"QCR.${projectConfig.projectId}.samples_remaining.upsetplot.pdf"),
    variantsRemainingUpsetPlotPdf = if (projectConfig.nArrays > 1) { Some(store(projectConfig.home / s"QCR.${projectConfig.projectId}.variants_remaining.upsetplot.pdf")) } else { None }),

  tex = store(projectConfig.home / s"QCR.${projectConfig.projectId}.tex"),
  pdf = store(projectConfig.home / s"QCR.${projectConfig.projectId}.pdf")

)
