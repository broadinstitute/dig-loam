import ProjectConfig._
import DirTree._
import Collections._
import StoreHelpers._

final case class Assoc(
  idMap: Store,
  phenoLog: Store,
  pheno: Store,
  phenoGoogle: Option[Store],
  pcs: Store,
  pcsGoogle: Option[Store],
  results: Store,
  resultsGoogle: Option[Store],
  variantsStats: Option[Store],
  variantsStatsGoogle: Option[Store],
  variantsFilter: Option[Store],
  variantsFilterGoogle: Option[Store],
  variantsExclude: Option[Store],
  variantsExcludeGoogle: Option[Store],
  resultsHailLog: Store,
  resultsHailLogGoogle: Option[Store],
  tbi: Store)

final case class MetaCohort(
  data: Seq[Store],
  base: Path,
  samples: Store,
  famMerge: Store,
  kinshipSamplesExclude: Store)

final case class MetaKinship(
  commonVariants: Store,
  mergeList: Store,
  dataFiltered: Seq[Store],
  baseFiltered: Path,
  baseKinship: Path,
  log: Store,
  kin0: Store,
  kin0Related: Store,
  metaCohort: Map[ConfigCohort, MetaCohort])

final case class Meta(
  results: Store,
  resultsGoogle: Option[Store],
  hailLog: Store,
  hailLogGoogle: Option[Store],
  tbi: Store)

final case class Merge(
  results: Store,
  resultsGoogle: Option[Store],
  hailLog: Store,
  hailLogGoogle: Option[Store],
  tbi: Store)

val assocStores = (
    (
      for {
		x <- modelCohorts
      } yield {
        (x.model, x.cohort, None)
      } 
    ) ++
    (
      for {
        x <- modelCohortMetas
      } yield {
        (x.model, x.cohort, Some(x.meta))
      }
    )
  ).map { assoc => 

    val model = assoc._1
    val cohort = assoc._2
    val meta: Option[ConfigMeta] = assoc._3
    
    val prefix = meta match {
      case Some(s) => s"${projectConfig.projectId}.${meta.get.id}.${cohort.id}.${model.id}"
      case None => s"${projectConfig.projectId}.${cohort.id}.${model.id}"
    }

    val local_home = dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get

    val cloud_home = projectConfig.hailCloud match { case true => Some(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).google.get); case false => None }

    assoc -> Assoc(
      idMap = store(local_home / s"${prefix}.samples_exclude.map.tsv"),
      phenoLog = store(local_home / s"${prefix}.pheno.log"),
      pheno = store(local_home / s"${prefix}.pheno.tsv"),
      phenoGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.pheno.tsv")); case false => None },
      pcs = store(local_home / s"${prefix}.pcs.include"),
      pcsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.pcs.include")); case false => None },
      results = store(local_home / s"${prefix}.results.tsv.bgz"),
      resultsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.tsv.bgz")); case false => None },
      variantsStats = Some(store(local_home / s"${prefix}.variants.stats.tsv")),
      variantsStatsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.variants.stats.tsv")); case false => None },
      variantsFilter = Some(store(local_home / s"${prefix}.variants.filter.tsv")),
      variantsFilterGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.variants.filter.tsv")); case false => None },
      variantsExclude = Some(store(local_home / s"${prefix}.variants.exclude.txt")),
      variantsExcludeGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.variants.exclude.txt")); case false => None },
      resultsHailLog = store(local_home / s"${prefix}.results.hail.log"),
      resultsHailLogGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.hail.log")); case false => None },
      tbi = store(local_home / s"${prefix}.results.tsv.bgz.tbi")
    )

  }.toMap

val knownLociStores = (
    (
      for {
        x <- modelCohortKnowns
      } yield {
        (x.model, x.cohort, x.known, None)
      }
    ) ++
    (
      for {
        x <- modelCohortMetaKnowns
      } yield {
        (x.model, x.cohort, x.known, Some(x.meta))
      }
    )
  ).map { knownLoci => 

    val model = knownLoci._1
    val cohort = knownLoci._2
    val known = knownLoci._3
    val meta: Option[ConfigMeta] = knownLoci._4
    
    val prefix = meta match {
      case Some(s) => s"${projectConfig.projectId}.${meta.get.id}.${cohort.id}.${model.id}.${known.id}"
      case None => s"${projectConfig.projectId}.${cohort.id}.${model.id}.${known.id}"
    }

    val local_home = dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get

    val cloud_home = projectConfig.hailCloud match { case true => Some(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).google.get); case false => None }
    
    knownLoci -> Assoc(
        idMap = store(local_home / s"${prefix}.samples_exclude.map.tsv"),
        phenoLog = store(local_home / s"${prefix}.pheno.log"),
        pheno = store(local_home / s"${prefix}.pheno.tsv"),
        phenoGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.pheno.tsv")); case false => None },
        pcs = store(local_home / s"${prefix}.pcs.include"),
        pcsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.pcs.include")); case false => None },
        results = store(local_home / s"${prefix}.results.tsv.bgz"),
        resultsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.tsv.bgz")); case false => None },
        variantsStats = None,
        variantsStatsGoogle = None,
        variantsFilter = None,
        variantsFilterGoogle = None,
        variantsExclude = None,
        variantsExcludeGoogle = None,
        resultsHailLog = store(local_home / s"${prefix}.results.hail.log"),
        resultsHailLogGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.hail.log")); case false => None },
        tbi = store(local_home / s"${prefix}.results.tsv.bgz.tbi")
      )

  }.toMap

val metaKinshipStores = metas.map { meta =>

  val baseString = s"${projectConfig.projectId}.${meta.id}"
  val baseRefFilteredString = s"${baseString}.ref.filtered"
  val baseKinshipString = s"${baseString}.kinship"

  val local_home = dirTree.dataGlobalKinshipMap(meta).local.get

  val commonVariants = store(local_home / s"${baseRefFilteredString}.common_variants.txt")

  val metaCohort = projectConfig.Cohorts.filter(e => meta.cohorts contains e.id).map { cohort =>

    val cohortBaseString = s"${baseString}.${cohort.id}"
    val cohortRefBaseString = s"${cohortBaseString}.ref"
    val cohortKinshipBaseString = s"${cohortBaseString}.kinship"

    cohort -> MetaCohort(
      data = bedBimFam(local_home / cohortRefBaseString),
      base = local_home / cohortRefBaseString,
      samples = store(local_home / s"${cohortBaseString}.samples"),
      famMerge = store(local_home / s"${cohortRefBaseString}.fam.merge"),
      kinshipSamplesExclude = store(local_home / s"${cohortKinshipBaseString}.samples.exclude"))

  }.toMap

  meta -> MetaKinship(
    commonVariants = commonVariants,
    mergeList= store(local_home / s"${baseRefFilteredString}.merge_list.txt"),
    dataFiltered = bedBimFam(local_home / baseRefFilteredString),
    baseFiltered = local_home / baseRefFilteredString,
    baseKinship = local_home / baseKinshipString,
    log = store(local_home / s"${baseKinshipString}.log"),
    kin0 = store(local_home / s"${baseKinshipString}.kin0"),
    kin0Related = store(local_home / s"${baseKinshipString}.kin0.related"),
    metaCohort = metaCohort)

}.toMap

val metaStores = (
    (
      for {
        x <- modelMetas
      } yield {
        (x.model, x.meta)
      }
    )
  ).map { modelMeta =>

  val model = modelMeta._1
  val meta = modelMeta._2

  val baseString = s"${projectConfig.projectId}.${meta.id}.${model.id}"

  val local_home = dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).metas(meta).local.get

  val cloud_home = projectConfig.hailCloud match { case true => Some(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).metas(meta).google.get); case false => None }

  modelMeta -> Meta(
    results = store(local_home / s"${baseString}.results.tsv.bgz"),
    resultsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${baseString}.results.tsv.bgz")); case false => None },
    hailLog = store(local_home / s"${baseString}.results.hail.log"),
    hailLogGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${baseString}.results.hail.log")); case false => None },
    tbi = store(local_home / s"${baseString}.results.tsv.bgz.tbi")
  )

}.toMap

val knownMetaStores = (
    (
      for {
        x <- modelMetaKnowns
      } yield {
        (x.model, x.meta, x.known)
      }
    )
  ).map { modelMetaKnown =>

  val model = modelMetaKnown._1
  val meta = modelMetaKnown._2
  val known = modelMetaKnown._3

  val prefix = s"${projectConfig.projectId}.${meta.id}.${model.id}.${known.id}"

  val local_home = dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).metas(meta).local.get

  val cloud_home = projectConfig.hailCloud match { case true => Some(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).metas(meta).google.get); case false => None }

  modelMetaKnown -> Meta(
      results = store(local_home / s"${prefix}.results.tsv.bgz"),
      resultsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.tsv.bgz")); case false => None },
      hailLog = store(local_home / s"${prefix}.results.hail.log"),
      hailLogGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.hail.log")); case false => None },
      tbi = store(local_home / s"${prefix}.results.tsv.bgz.tbi")
  )

}.toMap

val mergeStores = (
    (
      for {
        x <- modelMerges
      } yield {
        (x.model, x.merge)
      }
    )
  ).map { modelMerge =>

  val model = modelMerge._1
  val merge = modelMerge._2

  val baseString = s"${projectConfig.projectId}.${merge.id}.${model.id}"

  val local_home = dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).merges(merge).local.get

  val cloud_home = projectConfig.hailCloud match { case true => Some(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).merges(merge).google.get); case false => None }

  modelMerge -> Merge(
    results = store(local_home / s"${baseString}.results.tsv.bgz"),
    resultsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${baseString}.results.tsv.bgz")); case false => None },
    hailLog = store(local_home / s"${baseString}.results.hail.log"),
    hailLogGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${baseString}.results.hail.log")); case false => None },
    tbi = store(local_home / s"${baseString}.results.tsv.bgz.tbi")
  )

}.toMap

val knownMergeStores = (
    (
      for {
        x <- modelMergeKnowns
      } yield {
        (x.model, x.merge, x.known)
      }
    )
  ).map { modelMergeKnown =>

  val model = modelMergeKnown._1
  val merge = modelMergeKnown._2
  val known = modelMergeKnown._3

  val prefix = s"${projectConfig.projectId}.${merge.id}.${model.id}.${known.id}"

  val local_home = dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).merges(merge).local.get

  val cloud_home = projectConfig.hailCloud match { case true => Some(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).merges(merge).google.get); case false => None }

  modelMergeKnown -> Merge(
      results = store(local_home / s"${prefix}.results.tsv.bgz"),
      resultsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.tsv.bgz")); case false => None },
      hailLog = store(local_home / s"${prefix}.results.hail.log"),
      hailLogGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_home.get / s"${prefix}.results.hail.log")); case false => None },
      tbi = store(local_home / s"${prefix}.results.tsv.bgz.tbi")
  )

}.toMap
