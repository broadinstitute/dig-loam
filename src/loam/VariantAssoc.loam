/**
  * Association Step
  *  Description: Run association tests
  *  Requires: Hail
  */
import ProjectConfig._
import ArrayStores._
import AssocStores._
import CohortStores._
import ProjectStores._
import Hail._

def VariantAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configMeta: Option[ConfigMeta] = None): Unit = {

  val assoc = assocStores((configModel, configCohort, configMeta))

  val array = projectConfig.Arrays.filter(e => e.id == configCohort.array).head

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile.get, ProjectStores.ancestryInferred, arrayStores(array).sampleQcData.stats, arrayStores(array).kinshipData.kin0Related, arrayStores(array).filterPostQc.variantsExclude, arrayStores(array).filterQc.samplesExclude, arrayStores(array).filterPostQc.samplesExclude, cohortStores(configCohort).samplesExclude, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile.get, ProjectStores.ancestryInferred, arrayStores(array).sampleQcData.stats, arrayStores(array).kinshipData.kin0Related, arrayStores(array).filterPostQc.variantsExclude, arrayStores(array).filterQc.samplesExclude, arrayStores(array).filterPostQc.samplesExclude, cohortStores(configCohort).samplesExclude)

  }
  
  drmWith(imageName = s"${utils.image.imgR34}", cores = projectConfig.resources.variantAssocGeneratePheno.cpus, mem = projectConfig.resources.variantAssocGeneratePheno.mem, maxRunTime = projectConfig.resources.variantAssocGeneratePheno.maxRunTime) {

    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rGeneratePheno}
      --cpus ${projectConfig.resources.variantAssocGeneratePheno.cpus}
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile.get}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --sampleqc-in ${arrayStores(array).sampleQcData.stats}
      --kinship-in ${arrayStores(array).kinshipData.kin0Related}
      --samples-exclude-qc ${arrayStores(array).filterQc.samplesExclude}
      --samples-exclude-postqc ${arrayStores(array).filterPostQc.samplesExclude}
      --samples-exclude-cohort ${cohortStores(configCohort).samplesExclude}
      --samples-exclude-cross-array "${excludeCrossArrayString}"
      --variants-exclude-postqc ${arrayStores(array).filterPostQc.variantsExclude}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --min-pcs ${projectConfig.minPCs}
      --max-pcs ${projectConfig.maxPCs}
      --n-stddevs ${projectConfig.nStddevs}
      --out-id-map ${assoc.idMap}
      --out-pheno ${assoc.pheno}
      --out-pcs ${assoc.pcs}
      > ${assoc.phenoLog}"""
      .in(generatePhenoIn)
      .out(assoc.idMap, assoc.pheno, assoc.pcs, assoc.phenoLog)
      .tag(s"${assoc.pheno}".split("/").last)

  }

  projectConfig.hailCloud match {

    case true =>

      val Seq(_, prunedBim, _) = arrayStores(array).prunedData.plink.data
  
      local {
      
        googleCopy(assoc.pheno, assoc.phenoGoogle.get)
        googleCopy(assoc.pcs, assoc.pcsGoogle.get)
        googleCopy(prunedBim, arrayStores(array).prunedData.bimGoogle.get)
      
      }
      
      google {
      
        hail"""${utils.python.pyHailAssoc} --
          --mt-in ${arrayStores(array).refData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${assoc.phenoGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${assoc.pcsGoogle.get}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${assoc.resultsGoogle.get}
          --cloud
          --log ${assoc.resultsHailLogGoogle.get}"""
            .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).refData.mtGoogle.get, assoc.phenoGoogle.get, assoc.pcsGoogle.get)
            .out(assoc.resultsGoogle.get, assoc.resultsHailLogGoogle.get)
            .tag(s"${assoc.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(assoc.resultsGoogle.get, assoc.results)
        googleCopy(assoc.resultsHailLogGoogle.get, assoc.resultsHailLog)
      
      }

    case false =>

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.variantAssocHailAssoc.cpus, mem = projectConfig.resources.variantAssocHailAssoc.mem, maxRunTime = projectConfig.resources.variantAssocHailAssoc.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailAssoc}
          --mt-in ${arrayStores(array).refData.mt.get}
          --bim-in ${arrayStores(array).prunedData.plink.base}.bim
          --pheno-in ${assoc.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${assoc.pcs}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${assoc.results}
          --log ${assoc.resultsHailLog}"""
            .in(arrayStores(array).prunedData.plink.data :+ arrayStores(array).refData.mt.get :+ assoc.pheno :+ assoc.pcs)
            .out(assoc.results, assoc.resultsHailLog)
            .tag(s"${assoc.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"${utils.image.imgTools}") {

    cmd"""${utils.binary.binTabix} -f -b 2 -e 2 ${assoc.results}"""
      .in(assoc.results)
      .out(assoc.tbi)
      .tag(s"${assoc.tbi}".split("/").last)

  }

}

def KnownLociToGoogle(configKnown: ConfigKnown): Unit = {

  projectConfig.hailCloud match {

    case true =>

      local {
      
        googleCopy(ProjectStores.knownStores(configKnown).hiLd, ProjectStores.knownStores(configKnown).hiLdGoogle.get)
      
      }

    case false => ()

  }

}

def KnownLociAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configKnown: ConfigKnown, configMeta: Option[ConfigMeta] = None): Unit = {

  val known = knownLociStores((configModel, configCohort, configKnown, configMeta))

  val array = projectConfig.Arrays.filter(e => e.id == configCohort.array).head

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile.get, ProjectStores.ancestryInferred, arrayStores(array).sampleQcData.stats, arrayStores(array).kinshipData.kin0Related, arrayStores(array).filterPostQc.variantsExclude, arrayStores(array).filterQc.samplesExclude, arrayStores(array).filterPostQc.samplesExclude, cohortStores(configCohort).samplesExclude, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile.get, ProjectStores.ancestryInferred, arrayStores(array).sampleQcData.stats, arrayStores(array).kinshipData.kin0Related, arrayStores(array).filterPostQc.variantsExclude, arrayStores(array).filterQc.samplesExclude, arrayStores(array).filterPostQc.samplesExclude, cohortStores(configCohort).samplesExclude)

  }
  
  drmWith(imageName = s"${utils.image.imgR34}", cores = projectConfig.resources.variantAssocGeneratePheno.cpus, mem = projectConfig.resources.variantAssocGeneratePheno.mem, maxRunTime = projectConfig.resources.variantAssocGeneratePheno.maxRunTime) {

    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rGeneratePheno}
      --cpus ${projectConfig.resources.variantAssocGeneratePheno.cpus}
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile.get}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --sampleqc-in ${arrayStores(array).sampleQcData.stats}
      --kinship-in ${arrayStores(array).kinshipData.kin0Related}
      --samples-exclude-qc ${arrayStores(array).filterQc.samplesExclude}
      --samples-exclude-postqc ${arrayStores(array).filterPostQc.samplesExclude}
      --samples-exclude-cohort ${cohortStores(configCohort).samplesExclude}
      --samples-exclude-cross-array "${excludeCrossArrayString}"
      --variants-exclude-postqc ${arrayStores(array).filterPostQc.variantsExclude}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --min-pcs ${projectConfig.minPCs}
      --max-pcs ${projectConfig.maxPCs}
      --n-stddevs ${projectConfig.nStddevs}
      --out-id-map ${known.idMap}
      --out-pheno ${known.pheno}
      --out-pcs ${known.pcs}
      > ${known.phenoLog}"""
      .in(generatePhenoIn)
      .out(known.idMap, known.pheno, known.pcs, known.phenoLog)
      .tag(s"${known.pheno}".split("/").last)

  }

  projectConfig.hailCloud match {

    case true =>
  
      local {
      
        googleCopy(known.pheno, known.phenoGoogle.get)
        googleCopy(known.pcs, known.pcsGoogle.get)
      
      }
      
      google {
      
        hail"""${utils.python.pyHailAssoc} --
          --mt-in ${arrayStores(array).refData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${known.phenoGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${known.pcsGoogle.get}
          --extract-ld ${ProjectStores.knownStores(configKnown).hiLdGoogle.get}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${known.resultsGoogle.get}
          --cloud
          --log ${known.resultsHailLogGoogle.get}"""
            .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).refData.mtGoogle.get, known.phenoGoogle.get, known.pcsGoogle.get, ProjectStores.knownStores(configKnown).hiLdGoogle.get)
            .out(known.resultsGoogle.get, known.resultsHailLogGoogle.get)
            .tag(s"${known.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(known.resultsGoogle.get, known.results)
        googleCopy(known.resultsHailLogGoogle.get, known.resultsHailLog)
      
      }

    case false =>

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.variantAssocHailAssoc.cpus, mem = projectConfig.resources.variantAssocHailAssoc.mem, maxRunTime = projectConfig.resources.variantAssocHailAssoc.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailAssoc}
          --mt-in ${arrayStores(array).refData.mt.get}
          --bim-in ${arrayStores(array).prunedData.plink.base}.bim
          --pheno-in ${known.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${known.pcs}
          --extract-ld ${ProjectStores.knownStores(configKnown).hiLd}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${known.results}
          --log ${known.resultsHailLog}"""
            .in(arrayStores(array).prunedData.plink.data :+ arrayStores(array).refData.mt.get :+ known.pheno :+ known.pcs :+ ProjectStores.knownStores(configKnown).hiLd)
            .out(known.results, known.resultsHailLog)
            .tag(s"${known.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"${utils.image.imgTools}") {

    cmd"""${utils.binary.binTabix} -f -b 2 -e 2 ${known.results}"""
      .in(known.results)
      .out(known.tbi)
      .tag(s"${known.tbi}".split("/").last)

  }

}