/**
  * Association Step
  *  Description: Run association tests
  *  Requires: Hail
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import AssocStores._
import ProjectStores._
import Hail._

def VariantAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configMeta: Option[ConfigMeta] = None): Unit = {

  val assoc = assocStores((configModel, configCohort, configMeta))

  val array = configCohort.array
  val Seq(_, prunedBim, _) = arrayStores(array).prunedData.data

  hailCloud match {

    case true =>

      local {
      
        googleCopy(prunedBim, arrayStores(array).prunedData.bimGoogle.get)
      
      }
      
      google {
      
        hail"""$pyHailListSamples --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${ProjectStores.phenoFileGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${assoc.phenoPrelimGoogle.get}
          --out-samples ${assoc.samplesIncludeGoogle.get}
          --cloud
          --log ${assoc.listSamplesHailLogGoogle.get}"""
        .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get)
        .out(assoc.phenoPrelimGoogle.get, assoc.samplesIncludeGoogle.get, assoc.listSamplesHailLogGoogle.get)
        .tag(s"${assoc.phenoPrelim}.google".split("/").last)
      
      }
        
      local {
      
        googleCopy(assoc.phenoPrelimGoogle.get, assoc.phenoPrelim)
        googleCopy(assoc.samplesIncludeGoogle.get, assoc.samplesInclude)
        googleCopy(assoc.listSamplesHailLogGoogle.get, assoc.listSamplesHailLog)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores = projectConfig.highCpuHighMem.cpus, mem = projectConfig.highCpuHighMem.mem) {

        cmd"""$binPython $pyHailListSamples
          --mt-in ${arrayStores(array).cleanData.mt.get}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${ProjectStores.phenoFile}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${assoc.phenoPrelim}
          --out-samples ${assoc.samplesInclude}
          --log ${assoc.listSamplesHailLog}"""
        .in(arrayStores(array).prunedData.data :+ arrayStores(array).cleanData.mt.get :+ ProjectStores.phenoFile)
        .out(assoc.phenoPrelim, assoc.samplesInclude, assoc.listSamplesHailLog)
        .tag(s"${assoc.phenoPrelim}".split("/").last)

      }

  }

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, assoc.samplesInclude, arrayStores(array).finalData.variantsExcludeIds)

  }
  
  drmWith(imageName = s"$imgR34", cores = projectConfig.highCpuLowMem.cpus, mem = projectConfig.highCpuLowMem.mem) {

    cmd"""$binRscript --vanilla --verbose
      $rGeneratePheno
      --cpus ${projectConfig.highCpuLowMem.cpus}
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --samples-include ${assoc.samplesInclude}
      --samples-exclude "${excludeCrossArrayString}"
      --variants-exclude ${arrayStores(array).finalData.variantsExcludeIds}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --out-pheno ${assoc.pheno}
      --out-pcs ${assoc.pcs}
      > ${assoc.phenoLog}"""
      .in(generatePhenoIn)
      .out(assoc.pheno, assoc.pcs, assoc.phenoLog)
      .tag(s"${assoc.pheno}".split("/").last)

  }

  hailCloud match {

    case true =>
  
      local {
      
        googleCopy(assoc.pheno, assoc.phenoGoogle.get)
        googleCopy(assoc.pcs, assoc.pcsGoogle.get)
      
      }
      
      google {
      
        hail"""$pyHailAssoc --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${assoc.phenoGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${assoc.pcsGoogle.get}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${assoc.resultsGoogle.get}
          --cloud
          --log ${assoc.resultsHailLogGoogle.get}"""
            .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get, assoc.phenoGoogle.get, assoc.pcsGoogle.get)
            .out(assoc.resultsGoogle.get, assoc.resultsHailLogGoogle.get)
            .tag(s"${assoc.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(assoc.resultsGoogle.get, assoc.results)
        googleCopy(assoc.resultsHailLogGoogle.get, assoc.resultsHailLog)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores = projectConfig.highCpuHighMem.cpus, mem = projectConfig.highCpuHighMem.mem) {

        cmd"""$binPython $pyHailAssoc
          --mt-in ${arrayStores(array).cleanData.mt.get}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${assoc.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${assoc.pcs}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${assoc.results}
          --log ${assoc.resultsHailLog}"""
            .in(arrayStores(array).prunedData.data :+ arrayStores(array).cleanData.mt.get :+ ProjectStores.phenoFile :+ assoc.pheno :+ assoc.pcs)
            .out(assoc.results, assoc.resultsHailLog)
            .tag(s"${assoc.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"$imgTools", cores = 1, mem = projectConfig.lowMem) {

    cmd"""$binTabix -f -b 2 -e 2 ${assoc.results}"""
      .in(assoc.results)
      .out(assoc.tbi)
      .tag(s"${assoc.tbi}".split("/").last)

  }

}

def KnownLociToGoogle(configKnown: ConfigKnown): Unit = {

  hailCloud match {

    case true =>

      local {
      
        googleCopy(ProjectStores.knownStores(configKnown).hiLd, ProjectStores.knownStores(configKnown).hiLdGoogle.get)
      
      }

    case false => ()

  }

}

def KnownLociAssoc(configModel: ConfigModel, configCohort: ConfigCohort, configKnown: ConfigKnown, configMeta: Option[ConfigMeta] = None): Unit = {

  val known = knownLociStores((configModel, configCohort, configKnown, configMeta))

  val array = configCohort.array

  hailCloud match {

    case true =>

      google {
      
        hail"""$pyHailListSamples --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${ProjectStores.phenoFileGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${known.phenoPrelimGoogle.get}
          --out-samples ${known.samplesIncludeGoogle.get}
          --cloud
          --log ${known.listSamplesHailLogGoogle.get}"""
        .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get)
        .out(known.phenoPrelimGoogle.get, known.samplesIncludeGoogle.get, known.listSamplesHailLogGoogle.get)
        .tag(s"${known.phenoPrelim}.google".split("/").last)
      
      }
        
      local {
      
        googleCopy(known.phenoPrelimGoogle.get, known.phenoPrelim)
        googleCopy(known.samplesIncludeGoogle.get, known.samplesInclude)
        googleCopy(known.listSamplesHailLogGoogle.get, known.listSamplesHailLog)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores = projectConfig.highCpuHighMem.cpus, mem = projectConfig.highCpuHighMem.mem) {

        cmd"""$binPython $pyHailListSamples
          --mt-in ${arrayStores(array).cleanData.mt.get}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${ProjectStores.phenoFile}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --test ${configModel.test}
          --covars "${configModel.covars}"
          --out-pheno-prelim ${known.phenoPrelim}
          --out-samples ${known.samplesInclude}
          --log ${known.listSamplesHailLog}"""
        .in(arrayStores(array).prunedData.data :+ arrayStores(array).cleanData.mt.get :+ ProjectStores.phenoFile)
        .out(known.phenoPrelim, known.samplesInclude, known.listSamplesHailLog)
        .tag(s"${known.phenoPrelim}".split("/").last)

      }

  }

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val generatePhenoIn = configMeta match {

    case Some(s) => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, known.samplesInclude, arrayStores(array).finalData.variantsExcludeIds, metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(array).pcaData.gds, ProjectStores.phenoFile, ProjectStores.ancestryInferred, known.samplesInclude, arrayStores(array).finalData.variantsExcludeIds)

  }
  
  drmWith(imageName = s"$imgR34", cores = projectConfig.highCpuLowMem.cpus, mem = projectConfig.highCpuLowMem.mem) {

    cmd"""$binRscript --vanilla --verbose
      $rGeneratePheno
      --cpus ${projectConfig.highCpuLowMem.cpus}
      --gds-in ${arrayStores(array).pcaData.gds}
      --pheno-in ${ProjectStores.phenoFile}
      --ancestry-in ${ProjectStores.ancestryInferred}
      --ancestry-keep ${configCohort.ancestry.mkString(",")}
      --pheno-col ${configModel.pheno}
      --iid-col ${projectConfig.phenoFileId}
      --samples-include ${known.samplesInclude}
      --samples-exclude "${excludeCrossArrayString}"
      --variants-exclude ${arrayStores(array).finalData.variantsExcludeIds}
      --test ${configModel.test}
      --trans "${configModel.trans}"
      --covars "${configModel.covars}"
      --out-pheno ${known.pheno}
      --out-pcs ${known.pcs}
      > ${known.phenoLog}"""
      .in(generatePhenoIn)
      .out(known.pheno, known.pcs, known.phenoLog)
      .tag(s"${known.pheno}".split("/").last)

  }

  hailCloud match {

    case true =>
  
      local {
      
        googleCopy(known.pheno, known.phenoGoogle.get)
        googleCopy(known.pcs, known.pcsGoogle.get)
      
      }
      
      google {
      
        hail"""$pyHailAssoc --
          --mt-in ${arrayStores(array).cleanData.mtGoogle.get}
          --bim-in ${arrayStores(array).prunedData.bimGoogle.get}
          --pheno-in ${known.phenoGoogle.get}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${known.pcsGoogle.get}
          --extract-ld ${ProjectStores.knownStores(configKnown).hiLdGoogle.get}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${known.resultsGoogle.get}
          --cloud
          --log ${known.resultsHailLogGoogle.get}"""
            .in(arrayStores(array).prunedData.bimGoogle.get, arrayStores(array).cleanData.mtGoogle.get, ProjectStores.phenoFileGoogle.get, known.phenoGoogle.get, known.pcsGoogle.get, ProjectStores.knownStores(configKnown).hiLdGoogle.get)
            .out(known.resultsGoogle.get, known.resultsHailLogGoogle.get)
            .tag(s"${known.results}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(known.resultsGoogle.get, known.results)
        googleCopy(known.resultsHailLogGoogle.get, known.resultsHailLog)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores = projectConfig.highCpuHighMem.cpus, mem = projectConfig.highCpuHighMem.mem) {

        cmd"""$binPython $pyHailAssoc
          --mt-in ${arrayStores(array).cleanData.mt.get}
          --bim-in ${arrayStores(array).prunedData.base}.bim
          --pheno-in ${known.pheno}
          --iid-col ${projectConfig.phenoFileId}
          --pheno-col ${configModel.pheno}
          --pcs-include ${known.pcs}
          --extract-ld ${ProjectStores.knownStores(configKnown).hiLd}
          --test ${configModel.test}
          --trans "${configModel.trans}"
          --covars "${configModel.covars}"
          --out ${known.results}
          --log ${known.resultsHailLog}"""
            .in(arrayStores(array).prunedData.data :+ arrayStores(array).cleanData.mt.get :+ ProjectStores.phenoFile :+ known.pheno :+ known.pcs :+ ProjectStores.knownStores(configKnown).hiLd)
            .out(known.results, known.resultsHailLog)
            .tag(s"${known.results}".split("/").last)

      }

  }
  
  drmWith(imageName = s"$imgTools", cores = 1, mem = projectConfig.lowMem) {

    cmd"""$binTabix -f -b 2 -e 2 ${known.results}"""
      .in(known.results)
      .out(known.tbi)
      .tag(s"${known.tbi}".split("/").last)

  }

}
