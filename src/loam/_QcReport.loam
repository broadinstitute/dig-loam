/**
  * QC Report Step
  *  Description: Generate QC Report
  *  Requires: R-3.4, Python, convert, pdflatex
  */
import ProjectConfig._
import ArrayStores._
import AssocStores._
import ProjectStores._
import MetaStores._
import QcReportStores._
import DirTree._

def QcReport(): Unit = {

  val freqStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).rawData.freq.get.path}""").mkString(",") } }
  val indelStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).rawData.indel.get.path}""").mkString(",") } }
  val multiStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).preparedData.get.multiallelic.path}""").mkString(",") } }
  val dupVarsRemoveStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).rawData.dupVarsRemove.get.path}""").mkString(",") } }

  drmWith(imageName = s"${utils.image.imgR}") {
  
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rVariantsSummaryTable}
      --freq-in ${freqStrings.mkString(" ")}
      --indel-in ${indelStrings.mkString(" ")}
      --multi-in ${multiStrings.mkString(" ")}
      --dupl-in ${dupVarsRemoveStrings.mkString(" ")}
      --out ${qcReportStores.tablesData.variantsSummary}"""
      .in(arrayStores.map(e => e._2).map(e => e.rawData.freq.get).toSeq ++ arrayStores.map(e => e._2).map(e => e.rawData.indel.get).toSeq ++ arrayStores.map(e => e._2).map(e => e.preparedData.get.multiallelic).toSeq ++ arrayStores.map(e => e._2).map(e => e.rawData.dupVarsRemove.get).toSeq)
      .out(qcReportStores.tablesData.variantsSummary)
      .tag(s"${qcReportStores.tablesData.variantsSummary}".split("/").last)

  }

  val clusterGroupsStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).ancestryClusterData.groups.path}""").mkString(",") } }
  val ancestryInferredStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).ancestryData.inferred.path}""").mkString(",") } }

  drmWith(imageName = s"${utils.image.imgR}") {

    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rAncestryClusterTable}
      --cluster-in ${clusterGroupsStrings.mkString(" ")}
      --ancestry-in ${ancestryInferredStrings.mkString(" ")}
      --final-in ${ProjectStores.ancestryInferred}
      --cluster-out ${qcReportStores.tablesData.clusters}
      --final-out ${qcReportStores.tablesData.ancestry}"""
      .in(arrayStores.map(e => e._2).map(e => e.ancestryClusterData.groups).toSeq ++ arrayStores.map(e => e._2).map(e => e.ancestryData.inferred).toSeq :+ ProjectStores.ancestryInferred)
      .out(qcReportStores.tablesData.clusters, qcReportStores.tablesData.ancestry)
      .tag(s"${qcReportStores.tablesData.ancestry}".split("/").last)

  }

  val dataStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.format, a.filename).mkString(",") } }

  drmWith(imageName = s"${utils.image.imgPython2}") {

	cmd"""${utils.binary.binPython} ${utils.python.pyGenerateReportHeader}
      --out ${qcReportStores.texData.header}"""
      .out(qcReportStores.texData.header)
      .tag(s"${qcReportStores.texData.header}".split("/").last)
    
    cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportIntro}
      --id ${projectConfig.projectId}
      --authors "${projectConfig.authors.mkString(",")}"
      --organization "${projectConfig.organization}"
      --email "${projectConfig.email}"
      --out ${qcReportStores.texData.intro} 
      --array-data ${dataStrings.mkString(" ")}"""
      .in(arrayStores.map(e => e._2).flatMap(e => e.rawData.plink.get.data).toSeq)
      .out(qcReportStores.texData.intro)
      .tag(s"${qcReportStores.texData.intro}".split("/").last)

  }

  val famStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"${arrayStores(a).refData.plink.get.base.local.get}.fam").mkString(",") } }
  val bimStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"${arrayStores(a).refData.plink.get.base.local.get}.bim").mkString(",") } }
  val imissRemoveStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).rawData.imissRemove.get.path}""").mkString(",") } }
  
  if (projectConfig.nArrays > 1) {

    drmWith(imageName = s"${utils.image.imgR}") {
  
      cmd"""${utils.binary.binRscript} --vanilla --verbose
        ${utils.r.rUpsetplotBimFam}
        --input ${famStrings.mkString(" ")}
        --type fam
        --out ${qcReportStores.figureData.samplesUpsetPlotPdf.get}"""
        .in(arrayStores.map(e => e._2).flatMap(e => e.refData.plink.get.data.local.get).toSeq)
        .out(qcReportStores.figureData.samplesUpsetPlotPdf.get)
        .tag(s"${qcReportStores.figureData.samplesUpsetPlotPdf.get}".split("/").last)
      
      cmd"""${utils.binary.binRscript} --vanilla --verbose
        ${utils.r.rUpsetplotBimFam}
        --input ${bimStrings.mkString(" ")}
        --type bim
        --out ${qcReportStores.figureData.variantsUpsetPlotPdf.get}"""
        .in(arrayStores.map(e => e._2).flatMap(e => e.refData.plink.get.data.local.get).toSeq)
        .out(qcReportStores.figureData.variantsUpsetPlotPdf.get)
        .tag(s"${qcReportStores.figureData.variantsUpsetPlotPdf.get}".split("/").last)

    }

    drmWith(imageName = s"${utils.image.imgPython2}") {
      
      cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportData}
        --narrays ${projectConfig.nArrays}
        --imiss ${imissRemoveStrings.mkString(" ")}
        --samples-upset-diagram ${qcReportStores.figureData.samplesUpsetPlotPdf.get.path.toAbsolutePath()}
        --variants-summary-table ${qcReportStores.tablesData.variantsSummary.path.toAbsolutePath()} 
        --variants-upset-diagram ${qcReportStores.figureData.variantsUpsetPlotPdf.get.path.toAbsolutePath()} 
        --out ${qcReportStores.texData.data}"""
        .in(arrayStores.map(e => e._2).map(e => e.rawData.imissRemove.get).toSeq :+ qcReportStores.figureData.samplesUpsetPlotPdf.get :+ qcReportStores.tablesData.variantsSummary :+ qcReportStores.figureData.variantsUpsetPlotPdf.get)
        .out(qcReportStores.texData.data)
        .tag(s"${qcReportStores.texData.data}".split("/").last)

    }
  
  } else {

    drmWith(imageName = s"${utils.image.imgPython2}") {
  
      cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportData}
      --narrays ${projectConfig.nArrays}
      --imiss ${imissRemoveStrings.mkString(" ")}
      --fam ${famStrings(0)}
      --variants-summary-table ${qcReportStores.tablesData.variantsSummary} 
      --bim ${bimStrings(0)}
      --out ${qcReportStores.texData.data}"""
      .in(arrayStores.map(e => e._2).map(e => e.rawData.imissRemove.get).toSeq ++ arrayStores.map(e => e._2).flatMap(e => e.refData.plink.get.data.local.get).toSeq :+ qcReportStores.tablesData.variantsSummary)
      .out(qcReportStores.texData.data)
      .tag(s"${qcReportStores.texData.data}".split("/").last)

    }

  }

  val ref1kgBimStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"${arrayStores(a).ref1kgData.plink.base.local.get}.bim").mkString(",") } }
  val ancestryPcaPlotsStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).ancestryPcaData.plots.path.toAbsolutePath()}""").mkString(",") } }
  val ancestryClusterPlotsStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).ancestryClusterData.plots.path.toAbsolutePath()}""").mkString(",") } }
  val restoreStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).filterQc.samplesRestore.path}""").mkString(",") } }

  drmWith(imageName = s"${utils.image.imgPython2}") {

    cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportAncestry}
      --kg-merged-bim ${ref1kgBimStrings.mkString(" ")}
      --features ${projectConfig.nAncestryInferenceFeatures}
      --pca-plots ${ancestryPcaPlotsStrings.mkString(" ")}
      --cluster-plots ${ancestryClusterPlotsStrings.mkString(" ")}
      --cluster-table ${qcReportStores.tablesData.clusters.path.toAbsolutePath()}
      --final-table ${qcReportStores.tablesData.ancestry.path.toAbsolutePath()}
      --restore ${restoreStrings.mkString(" ")}
      --out ${qcReportStores.texData.ancestry}"""
      .in(arrayStores.map(e => e._2).flatMap(e => e.ref1kgData.plink.data.local.get).toSeq ++ arrayStores.map(e => e._2).map(e => e.ancestryPcaData.plots).toSeq ++ arrayStores.map(e => e._2).map(e => e.ancestryClusterData.plots).toSeq ++ arrayStores.map(e => e._2).map(e => e.filterQc.samplesRestore).toSeq :+ qcReportStores.tablesData.clusters :+ qcReportStores.tablesData.ancestry)
      .out(qcReportStores.texData.ancestry)
      .tag(s"${qcReportStores.texData.ancestry}".split("/").last)

  }

  val refPrunedBimStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"${arrayStores(a).prunedData.plink.base}.bim").mkString(",") } }
  val kin0Strings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).kinshipData.kin0.path}""").mkString(",") } }
  val famSizesStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).kinshipData.famSizes.path}""").mkString(",") } }
  val sexcheckProblemsStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).sexcheckData.problems.path}""").mkString(",") } }

  drmWith(imageName = s"${utils.image.imgPython2}") {
    
    cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportIbdSexcheck}
      --filtered-bim ${refPrunedBimStrings.mkString(" ")}
      --kin0-related ${kin0Strings.mkString(" ")}
      --famsizes ${famSizesStrings.mkString(" ")}
      --sexcheck-problems ${sexcheckProblemsStrings.mkString(" ")}
      --restore ${restoreStrings.mkString(" ")}
      --out ${qcReportStores.texData.ibdSexcheck}"""
      .in(arrayStores.map(e => e._2).flatMap(e => e.prunedData.plink.data).toSeq ++ arrayStores.map(e => e._2).map(e => e.kinshipData.kin0).toSeq ++ arrayStores.map(e => e._2).map(e => e.kinshipData.famSizes).toSeq ++ arrayStores.map(e => e._2).map(e => e.sexcheckData.problems).toSeq ++ arrayStores.map(e => e._2).map(e => e.filterQc.samplesRestore).toSeq)
      .out(qcReportStores.texData.ibdSexcheck)
      .tag(s"${qcReportStores.texData.ibdSexcheck}".split("/").last)

  }

  drmWith(imageName = s"${utils.image.imgR}") {
  
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rMakeMetricDistPlot}
      --sampleqc ${arrayStores(projectConfig.Arrays.head).sampleQcData.stats}
      --metric ${projectConfig.Arrays.head.sampleQcMetrics.head}
      --out ${qcReportStores.figureData.metricDistUnadjPdf}
      """
      .in(arrayStores(projectConfig.Arrays.head).sampleQcData.stats)
      .out(qcReportStores.figureData.metricDistUnadjPdf)
      .tag(s"${qcReportStores.figureData.metricDistUnadjPdf}".split("/").last)
    
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rMakeMetricDistPlot}
      --sampleqc ${arrayStores(projectConfig.Arrays.head).sampleQcData.statsAdj}
      --metric ${projectConfig.Arrays.head.sampleQcMetrics.head}_res
      --out ${qcReportStores.figureData.metricDistAdjPdf}
      """
      .in(arrayStores(projectConfig.Arrays.head).sampleQcData.statsAdj)
      .out(qcReportStores.figureData.metricDistAdjPdf)
      .tag(s"${qcReportStores.figureData.metricDistAdjPdf}".split("/").last)

  }

  val sampleQcOutliersStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).sampleQcData.outliers.path}""").mkString(",") } }
  val finalSampleExclusionsStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).filterQc.samplesExclude.path}""").mkString(",") } }

  drmWith(imageName = s"${utils.image.imgR}") {
    
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rMakeOutlierTable}
      --ancestry-inferred-outliers ${ProjectStores.ancestryOutliers}
      --kinship-related ${kin0Strings.mkString(" ")}
      --kinship-famsizes ${famSizesStrings.mkString(" ")}
      --imiss ${imissRemoveStrings.mkString(" ")}
      --sampleqc-outliers ${sampleQcOutliersStrings.mkString(" ")}
      --sexcheck-problems ${sexcheckProblemsStrings.mkString(" ")}
      --final-exclusions ${finalSampleExclusionsStrings.mkString(" ")}
      --out ${qcReportStores.tablesData.sampleQc}"""
      .in(arrayStores.map(e => e._2).map(e => e.rawData.imissRemove.get).toSeq ++ arrayStores.map(e => e._2).map(e => e.kinshipData.kin0).toSeq ++ arrayStores.map(e => e._2).map(e => e.kinshipData.famSizes).toSeq ++ arrayStores.map(e => e._2).map(e => e.sampleQcData.outliers).toSeq ++ arrayStores.map(e => e._2).map(e => e.sexcheckData.problems).toSeq ++ arrayStores.map(e => e._2).map(e => e.filterQc.samplesExclude).toSeq :+ ProjectStores.ancestryOutliers)
      .out(qcReportStores.tablesData.sampleQc)
      .tag(s"${qcReportStores.tablesData.sampleQc}".split("/").last)

  }

  val rawFamStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"${arrayStores(a).rawData.plink.get.base}.fam").mkString(",") } }

  drmWith(imageName = s"${utils.image.imgR}") {
    
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rUpsetplotBimFam}
      --input ${rawFamStrings.mkString(" ")}
      --exclusions ${finalSampleExclusionsStrings.mkString(" ")}
      --type fam
      --ancestry ${ProjectStores.ancestryInferred}
      --out ${qcReportStores.figureData.samplesRemainingUpsetPlotPdf}"""
      .in(arrayStores.map(e => e._2).flatMap(e => e.rawData.plink.get.data).toSeq ++ arrayStores.map(e => e._2).map(e => e.filterQc.samplesExclude).toSeq :+ ProjectStores.ancestryInferred)
      .out(qcReportStores.figureData.samplesRemainingUpsetPlotPdf)
      .tag(s"${qcReportStores.figureData.samplesRemainingUpsetPlotPdf}".split("/").last)

  }

  val metricOutlierPlotsStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).sampleQcData.metricPlots.path.toAbsolutePath()}""").mkString(",") } }

  drmWith(imageName = s"${utils.image.imgPython2}") {

    cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportSampleqc}
      --compare-dist-unadj ${qcReportStores.figureData.metricDistUnadjPdf.path.toAbsolutePath()}
      --compare-dist-adj ${qcReportStores.figureData.metricDistAdjPdf.path.toAbsolutePath()}
      --compare-dist-label ${projectConfig.Arrays.map(e => e.id).head}
      --compare-dist-metric ${projectConfig.Arrays.head.sampleQcMetrics.head}
      --metric-outlier-plots ${metricOutlierPlotsStrings.mkString(" ")}
      --sampleqc-summary-table ${qcReportStores.tablesData.sampleQc.path.toAbsolutePath()}
      --samples-upset-diagram ${qcReportStores.figureData.samplesRemainingUpsetPlotPdf.path.toAbsolutePath()}
      --restore ${restoreStrings.mkString(" ")}
      --out ${qcReportStores.texData.sampleQc}"""
      .in(arrayStores.map(e => e._2).map(e => e.sampleQcData.metricPlots).toSeq ++ arrayStores.map(e => e._2).map(e => e.filterQc.samplesRestore).toSeq :+ qcReportStores.figureData.metricDistUnadjPdf :+ qcReportStores.figureData.metricDistAdjPdf :+ qcReportStores.tablesData.sampleQc :+ qcReportStores.figureData.samplesRemainingUpsetPlotPdf)
      .out(qcReportStores.texData.sampleQc)
      .tag(s"${qcReportStores.texData.sampleQc}".split("/").last)

  }

  //val finalVariantExclusionsStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"""${arrayStores(a).finalData.variantsExclude.path}""").mkString(",") } }
  //val cleanBimStrings = { for { a <- projectConfig.Arrays } yield { Seq(a.id, s"${arrayStores(a).cleanData.base}.bim").mkString(",") } }
  //  
  //if (projectConfig.nArrays > 1) {
  //
  //  drmWith(imageName = s"${utils.image.imgR}") {
  //  
  //    cmd"""${utils.binary.binRscript} --vanilla --verbose
  //      ${utils.r.rUpsetplotBimFam}
  //      --input ${cleanBimStrings.mkString(" ")}
  //      --type bim
  //      --out ${qcReportStores.figureData.variantsRemainingUpsetPlotPdf.get}"""
  //      .in(arrayStores.map(e => e._2).flatMap(e => e.cleanData.data).toSeq)
  //      .out(qcReportStores.figureData.variantsRemainingUpsetPlotPdf.get)
  //      .tag(s"${qcReportStores.figureData.variantsRemainingUpsetPlotPdf.get}".split("/").last)
  //  
  //  }
  //
  //  drmWith(imageName = s"${utils.image.imgPython2}") {
  //	  
  //    cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportVariantqc}
  //      --variants-upset-diagram ${qcReportStores.figureData.variantsRemainingUpsetPlotPdf.get.path.toAbsolutePath()}
  //      --variant-exclusions ${finalVariantExclusionsStrings.mkString(" ")}
  //      --out ${qcReportStores.texData.variantQc}"""
  //      .in(arrayStores.map(e => e._2).map(e => e.finalData.variantsExclude).toSeq :+ qcReportStores.figureData.variantsRemainingUpsetPlotPdf.get)
  //      .out(qcReportStores.texData.variantQc)
  //      .tag(s"${qcReportStores.texData.variantQc}".split("/").last)
  //
  //  }
  //
  //} else {
  //
  //  drmWith(imageName = s"${utils.image.imgPython2}") {
  //
  //    cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportVariantqc}
  //      --bim ${cleanBimStrings.head}
  //      --variant-exclusions  ${finalVariantExclusionsStrings.mkString(" ")}
  //      --out ${qcReportStores.texData.variantQc}"""
  //      .in(arrayStores.map(e => e._2).flatMap(e => e.cleanData.data).toSeq ++ arrayStores.map(e => e._2).map(e => e.finalData.variantsExclude).toSeq)
  //      .out(qcReportStores.texData.variantQc)
  //      .tag(s"${qcReportStores.texData.variantQc}".split("/").last)
  //
  //  }
  //
  //}

  drmWith(imageName = s"${utils.image.imgPython2}") {
  
    cmd"""${utils.binary.binPython} ${utils.python.pyGenerateQcReportBibliography}
      --acknowledgements "${projectConfig.acknowledgementsQcReport.mkString(",")}"
      --loamstream-version "${projectConfig.loamstreamVersion}"
      --pipeline-version "${projectConfig.pipelineVersion}"
      --out ${qcReportStores.texData.bibliography}"""
      .out(qcReportStores.texData.bibliography)
      .tag(s"${qcReportStores.texData.bibliography}".split("/").last)

  }

  drmWith(imageName = s"${utils.image.imgTools}") {
    
    cmd"""cat ${qcReportStores.texData.header} ${qcReportStores.texData.intro} ${qcReportStores.texData.data} ${qcReportStores.texData.ancestry} ${qcReportStores.texData.ibdSexcheck} ${qcReportStores.texData.sampleQc} ${qcReportStores.texData.bibliography} > ${qcReportStores.tex}"""
      .in(qcReportStores.texData.header, qcReportStores.texData.intro, qcReportStores.texData.data, qcReportStores.texData.ancestry, qcReportStores.texData.ibdSexcheck, qcReportStores.texData.sampleQc, qcReportStores.texData.bibliography)
      .out(qcReportStores.tex)
      .tag(s"${qcReportStores.tex}".split("/").last)

  }

  drmWith(imageName = s"${utils.image.imgTexLive}") {
    
    cmd"""bash -c "${utils.binary.binPdflatex} --output-directory=${dirTree.reportQc.local.get} ${qcReportStores.tex}; sleep 5; ${utils.binary.binPdflatex} --output-directory=${dirTree.reportQc.local.get} ${qcReportStores.tex}""""
      .in(qcReportStores.tex)
      .out(qcReportStores.pdf)
      .tag(s"${qcReportStores.pdf}".split("/").last)

  }

}
