/**
  * Analysis Report Step
  *  Description: Generate Analysis Report
  *  Requires: R-3.4, Python, convert, pdflatex
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._
import AssocStores._
import PhenotypeStores._

def PhenotypeDistPlots(configPheno: ConfigPheno, configCohort: ConfigCohort, configMeta: Option[ConfigMeta] = None): Unit = {

  val phenoStores = phenotypeStores((configPheno, configCohort, configMeta))

  val excludeCrossArrayString = configMeta match {

    case Some(s) => s"""${metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude.toString.split("@")(1)}"""
    case None => ""

  }

  val phenoDistPlotIn = configMeta match {

    case Some(s) => Seq(arrayStores(configCohort.array).cleanData.data :+ ProjectStores.phenoFile.get :+ arrayStores(configCohort.array).ancestryData.inferred :+ metaKinshipStores(s).metaCohort(configCohort).kinshipSamplesExclude)
    case None => Seq(arrayStores(configCohort.array).cleanData.data :+ ProjectStores.phenoFile.get :+ arrayStores(configCohort.array).ancestryData.inferred)

  }

  configCohort.ancestry.size match {

    case x if x > 1 =>

      drmWith(imageName = s"$imgPython27") {
      
        cmd"""$binPython $pyPhenoDistPlot
          --pheno ${ProjectStores.phenoFile.get}
          --pheno-name ${configPheno.id}
          --iid-col ${projectConfig.phenoFileId}
          --fam ${arrayStores(configCohort.array).cleanData.base}.fam
          --samples-exclude "${excludeCrossArrayString}"
          --strat
          --ancestry ${arrayStores(configCohort.array).ancestryData.inferred}
          --pop "${configCohort.ancestry.mkString(",")}"
          --out ${phenoStores.figureData.distPlot}"""
          .in(phenoDistPlotIn.flatten)
          .out(phenoStores.figureData.distPlot)
          .tag(s"${phenoStores.figureData.distPlot}".split("/").last)
      
      }

    case y if y == 1 =>

      drmWith(imageName = s"$imgPython27") {
      
        cmd"""$binPython $pyPhenoDistPlot
          --pheno ${ProjectStores.phenoFile.get}
          --pheno-name ${configPheno.id}
          --iid-col ${projectConfig.phenoFileId}
          --fam ${arrayStores(configCohort.array).cleanData.base}.fam
          --samples-exclude "${excludeCrossArrayString}"
          --ancestry ${arrayStores(configCohort.array).ancestryData.inferred}
          --pop "${configCohort.ancestry.mkString(",")}"
          --out ${phenoStores.figureData.distPlot}"""
          .in(phenoDistPlotIn.flatten)
          .out(phenoStores.figureData.distPlot)
          .tag(s"${phenoStores.figureData.distPlot}".split("/").last)
      
      }

    case _ => ()

  }

}
