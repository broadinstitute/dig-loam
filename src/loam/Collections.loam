import ProjectConfig._

final case class ModelCohort(
    model: ConfigModel,
    cohort: ConfigCohort) {
  def canEqual(a: Any) = a.isInstanceOf[ModelCohort]
  override def equals(that: Any): Boolean = that match {
    case that: ModelCohort => that.canEqual(this) && this.hashCode == that.hashCode
    case _ => false
  }
  override def hashCode: Int = {
      val prime = 31
      var result = 1
      result = prime * result + model.id.hashCode
      result = prime * result + cohort.id.hashCode
      result
  }
}

final case class ModelMetaCohort(
    model: ConfigModel,
    meta: ConfigMeta,
    cohort: ConfigCohort) {
  def canEqual(a: Any) = a.isInstanceOf[ModelMetaCohort]
  override def equals(that: Any): Boolean = that match {
    case that: ModelMetaCohort => that.canEqual(this) && this.hashCode == that.hashCode
    case _ => false
  }
  override def hashCode: Int = {
      val prime = 31
      var result = 1
      result = prime * result + model.id.hashCode
      result = prime * result + meta.id.hashCode
      result = prime * result + cohort.id.hashCode
      result
  }
}

val modelCohorts: Seq[ModelCohort] = {
  val x = for {
    model <- projectConfig.Models.filter(e => ! e.metas.isDefined)
    cohort <- projectConfig.Cohorts.filter(e => model.cohorts.contains(e.id))
  } yield {
    ModelCohort(
      model = model,
      cohort = cohort
    )
  }
  val y = for {
    model <- projectConfig.Models.filter(e => e.metas.isDefined)
  } yield {
    val cohorts = for {
      cohort <- projectConfig.Cohorts.filter(e => model.cohorts.contains(e.id))
    } yield {
      cohort
    }
    val metaCohorts = for {
      meta <- projectConfig.Metas.filter(e => model.metas.get.contains(e.id))
      cohort <- projectConfig.Cohorts.filter(e => meta.cohorts.contains(e.id))
    } yield {
      cohort
    }
    for {
      cohort <- cohorts diff metaCohorts
    } yield {
      ModelCohort(
        model = model,
        cohort = cohort
      )
    }
  }
  x ++ y.flatten
}.distinct

val modelMetaCohorts: Seq[ModelMetaCohort] = {
  for {
    model <- projectConfig.Models.filter(e => e.metas.isDefined)
    meta <- projectConfig.Metas.filter(e => model.metas.get.contains(e.id))
    cohort <- projectConfig.Cohorts.filter(e => meta.cohorts.contains(e.id))
  } yield {
    ModelMetaCohort(
      model = model,
      meta = meta,
      cohort = cohort
    )
  }
}.distinct
