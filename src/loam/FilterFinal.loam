/**
 * Filter Clean Step
 * filter variants and generate final clean dataset
 */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._
import ProjectStores._

def FilterFinal(array: String): Unit = {

  hailCloud match {

    case true =>
 
      local {
      
        googleCopy(arrayStores(array).finalData.samplesExclude, arrayStores(array).finalData.samplesExcludeGoogle.get)
      
      }
      
      google {
      
        hail"""$pyHailFilterFinal --
          --mt-in ${arrayStores(array).harmonizedData.mtGoogle.get}
          --ancestry-in ${ProjectStores.ancestryInferredGoogle.get}
          --sexcheck-in ${arrayStores(array).sexcheckData.sexcheckGoogle.get}
          --sample-in ${ProjectStores.sampleFileGoogle.get}
          --iid-col ${projectConfig.sampleFileId}
          --case-ctrl-col ${projectConfig.sampleFileStatus}
          --samples-remove ${arrayStores(array).finalData.samplesExcludeGoogle.get}
          --variantqc-out ${arrayStores(array).variantQcData.statsGoogle.get}
          --variants-exclude-out ${arrayStores(array).finalData.variantsExcludeGoogle.get}
          --vcf-out ${arrayStores(array).cleanData.vcfGoogle.get}
          --mt-out ${arrayStores(array).cleanData.mtGoogle.get}
          --cloud
          --log ${arrayStores(array).cleanData.hailLogGoogle.get}"""
          .in(arrayStores(array).harmonizedData.mtGoogle.get, ProjectStores.ancestryInferredGoogle.get, arrayStores(array).sexcheckData.sexcheckGoogle.get, ProjectStores.sampleFileGoogle.get, arrayStores(array).finalData.samplesExcludeGoogle.get)
          .out(arrayStores(array).cleanData.vcfGoogle.get, arrayStores(array).variantQcData.statsGoogle.get, arrayStores(array).finalData.variantsExcludeGoogle.get, arrayStores(array).cleanData.mtGoogle.get, arrayStores(array).cleanData.hailLogGoogle.get)
          .tag(s"${arrayStores(array).cleanData.vcf}.google".split("/").last)
      
      }
      
      local {
      
        googleCopy(arrayStores(array).cleanData.vcfGoogle.get, arrayStores(array).cleanData.vcf)
        googleCopy(arrayStores(array).variantQcData.statsGoogle.get, arrayStores(array).variantQcData.stats)
        googleCopy(arrayStores(array).finalData.variantsExcludeGoogle.get, arrayStores(array).finalData.variantsExclude)
        googleCopy(arrayStores(array).cleanData.hailLogGoogle.get, arrayStores(array).cleanData.hailLog)
      
      }

    case false =>

      drmWith(imageName = s"$imgHail", cores = projectConfig.resources.filterFinalHail.cpus, mem = projectConfig.resources.filterFinalHail.mem, maxRunTime = projectConfig.resources.filterFinalHail.maxRunTime) {

        cmd"""$binPython $pyHailFilterFinal
          --mt-in ${arrayStores(array).harmonizedData.mt.get}
          --ancestry-in ${ProjectStores.ancestryInferred}
          --sexcheck-in ${arrayStores(array).sexcheckData.sexcheck}
          --sample-in ${ProjectStores.sampleFile}
          --iid-col ${projectConfig.sampleFileId}
          --case-ctrl-col ${projectConfig.sampleFileStatus}
          --samples-remove ${arrayStores(array).finalData.samplesExclude}
          --variantqc-out ${arrayStores(array).variantQcData.stats}
          --variants-exclude-out ${arrayStores(array).finalData.variantsExclude}
          --vcf-out ${arrayStores(array).cleanData.vcf}
          --mt-out ${arrayStores(array).cleanData.mt.get}
          --log ${arrayStores(array).cleanData.hailLog}"""
          .in(arrayStores(array).harmonizedData.mt.get, ProjectStores.ancestryInferred, arrayStores(array).sexcheckData.sexcheck, ProjectStores.sampleFile, arrayStores(array).finalData.samplesExclude)
          .out(arrayStores(array).cleanData.vcf, arrayStores(array).variantQcData.stats, arrayStores(array).finalData.variantsExclude, arrayStores(array).cleanData.mt.get, arrayStores(array).cleanData.hailLog)
          .tag(s"${arrayStores(array).cleanData.vcf}".split("/").last)

      }

  }
  
  drmWith(imageName = s"$imgTools") {
  
    cmd"""$binTabix -f -p vcf ${arrayStores(array).cleanData.vcf}"""
      .in(arrayStores(array).cleanData.vcf)
      .out(arrayStores(array).cleanData.tbi)
      .tag(s"${arrayStores(array).cleanData.tbi}".split("/").last)

  }

  drmWith(imageName = s"$imgTools", cores = projectConfig.resources.filterFinalPlink.cpus, mem = projectConfig.resources.filterFinalPlink.mem, maxRunTime = projectConfig.resources.filterFinalPlink.maxRunTime) {

    cmd"""$binPlink --vcf ${arrayStores(array).cleanData.vcf} --allow-no-sex --output-chr MT --keep-allele-order --make-bed --out ${arrayStores(array).cleanData.base} --memory ${projectConfig.resources.filterFinalPlink.mem * 0.9 * 1000} --seed 1"""
      .in(arrayStores(array).cleanData.vcf)
      .out(arrayStores(array).cleanData.data)
      .tag(s"${arrayStores(array).cleanData.base}".split("/").last)

  }
  
  drmWith(imageName = s"$imgR34", cores = projectConfig.resources.filterFinalPcair.cpus, mem = projectConfig.resources.filterFinalPcair.mem, maxRunTime = projectConfig.resources.filterFinalPcair.maxRunTime) {
  
    cmd"""$binRscript --vanilla --verbose
      $rPcair
      --cpus ${projectConfig.resources.filterFinalPcair.cpus}
      --plink-in ${arrayStores(array).prunedData.base}
      --gds-out ${arrayStores(array).cleanData.gds}
      --exclude ${arrayStores(array).finalData.samplesExclude}
      --scores ${arrayStores(array).cleanData.pcaScores}
      > ${arrayStores(array).cleanData.pcaLog}"""
      .in(arrayStores(array).prunedData.data :+ arrayStores(array).finalData.samplesExclude)
      .out(arrayStores(array).cleanData.gds, arrayStores(array).cleanData.pcaScores, arrayStores(array).cleanData.pcaLog)
      .tag(s"${arrayStores(array).cleanData.pcaScores}".split("/").last)
  
  }

}
