/**
  * Kinship Step
  *  Description: Calculate kinship to identify duplicates and any samples exhibiting abnormal (excessive) sharing
  *  Requires: King, R
  *  Notes:
  *     King is preferred to Plink or Hail based IBD calcs due to robust algorithm handling of population stratification. This step should be followed by a visual inspection for duplicates or excessive sharing
  * King only writes the '.kin0' file if families are found, so a bash script is used to write an empty file in that case
  */
import ProjectConfig._
import PipelineConfig._
import ArrayStores._

def Kinship(array: ConfigArray): Unit = {

  drmWith(imageName = s"${utils.image.imgTools}", cores = projectConfig.resources.kinshipKing.cpus, mem = projectConfig.resources.kinshipKing.mem, maxRunTime = projectConfig.resources.kinshipKing.maxRunTime) {

    cmd"""${utils.bash.shKing} ${utils.binary.binKing} ${arrayStores(array).filteredData.plink.base.local.get}.bed ${arrayStores(array).kinshipData.base} ${arrayStores(array).kinshipData.log} ${arrayStores(array).kinshipData.kin0} ${arrayStores(array).kinshipData.kin0Related} ${projectConfig.resources.kinshipKing.cpus}"""
    .in(arrayStores(array).filteredData.plink.data.local.get)
    .out(arrayStores(array).kinshipData.log, arrayStores(array).kinshipData.kin, arrayStores(array).kinshipData.kin0, arrayStores(array).kinshipData.kin0Related)
    .tag(s"${arrayStores(array).filteredData.plink.base.local.get}.shKing".split("/").last)

  }

  drmWith(imageName = s"${utils.image.imgR34}") {

    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rCalcKinshipFamSizes}
      --kin0 ${arrayStores(array).kinshipData.kin0Related}
      --out ${arrayStores(array).kinshipData.famSizes}"""
      .in(arrayStores(array).kinshipData.kin0Related)
      .out(arrayStores(array).kinshipData.famSizes)
      .tag(s"${arrayStores(array).kinshipData.famSizes}".split("/").last)

  }

}
