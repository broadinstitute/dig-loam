import ProjectConfig._
import PipelineConfig._
import StoreHelpers._

final case class FigureData(
  distPlot: Store)

final case class Phenotype(
  figureData: FigureData)

val phenotypeStores = (( for { c <- projectConfig.Cohorts; p <- projectConfig.Models.map(m => m.pheno).distinct; if c.report } yield { (None, c, p) } ) ++
  ( for { t <- projectConfig.Metas; c <- projectConfig.Cohorts.filter(e => t.cohorts contains e.id); p <- projectConfig.Models.map(m => m.pheno).distinct; if t.report } yield { (Some(t), c, p) } )) .map { cp =>

    val meta: Option[ConfigMeta] = cp._1
    val cohort = cp._2
    val phenotype = cp._3

    val prefix = meta match {
      case Some(s) => s"${projectConfig.projectId}.${meta.get.id}.${cohort.id}.${phenotype}"
      case None => s"${projectConfig.projectId}.${cohort.id}.${phenotype}"
    }

    val figureData = FigureData(
      distPlot = store.at(localOutDir / s"${prefix}.distplot.png"))

    cp -> Phenotype(
      figureData = figureData)

}.toMap
