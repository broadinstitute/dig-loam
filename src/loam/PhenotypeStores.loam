import ProjectConfig._
import StoreHelpers._

final case class FigureData(
  distPlot: Store)

final case class Phenotype(
  figureData: FigureData)

val phenotypeStores = (
  (
    for {
      x <- modelCohorts
      p <- projectConfig.Phenos.filter(e => e.id == x.model.pheno)
    } yield {
      (p, x.cohort, None)
    }
  ).distinct ++
  (
    for {
      x <- modelCohortMetas
      p <- projectConfig.Phenos.filter(e => e.id == x.model.pheno)
    } yield {
      (p, x.cohort, Some(x.meta))
    }
  ).distinct
).map { cp =>

  val pheno = cp._1
  val cohort = cp._2
  val meta: Option[ConfigMeta] = cp._3

  val prefix = meta match {
    case Some(s) => s"${projectConfig.projectId}.${s.id}.${cohort.id}.${pheno.id}"
    case None => s"${projectConfig.projectId}.${cohort.id}.${pheno.id}"
  }

  val figureData = FigureData(
    distPlot = store(projectConfig.home / s"${prefix}.distplot.png"))

  cp -> Phenotype(
    figureData = figureData)

}.toMap
