import java.io.{File, BufferedWriter, FileWriter}
import ProjectConfig._
import Collections._
import Stores._
import Fxns._

final case class DirTreeDataArray(
  base: MultiPath,
  prepare: MultiPath,
  harmonize: MultiPath,
  annotate: MultiPath,
  impute: MultiPath,
  sampleqc: MultiPath,
  kinship: MultiPath,
  ancestry: MultiPath,
  pca: MultiPath,
  sexcheck: MultiPath,
  metrics: MultiPath,
  filter: MultiPath,
  filterQc: MultiPath,
  filterPostQc: MultiPath,
  clean: MultiPath) extends Debug

final case class DirTreeAnalysisTest(
  base: MultiPath,
  groups: MultiPath,
  groupsMap: scala.collection.mutable.Map[String, MultiPath]) extends Debug

final case class DirTreeAnalysisModel(
  base: MultiPath,
  testsMap: Map[String, DirTreeAnalysisTest]) extends Debug

final case class DirTreeAnalysisPheno(
  base: MultiPath,
  modelsMap: Map[ConfigModel, DirTreeAnalysisModel]) extends Debug

final case class DirTree(
  base: MultiPath,
  data: MultiPath,
  dataArray: MultiPath,
  dataArrayMap: Map[ConfigArray, DirTreeDataArray],
  dataGlobal: MultiPath,
  dataGlobalAncestry: MultiPath,
  dataGlobalKinship: MultiPath,
  dataGlobalKinshipMap: Map[ConfigMeta, MultiPath],
  analysis: MultiPath,
  analysisPhenoMap: Map[ConfigPheno, DirTreeAnalysisPheno],
  report: MultiPath,
  reportQc: MultiPath,
  reportAnalysis: MultiPath,
  reportAnalysisMap: Map[ConfigReport, MultiPath]) extends Debug

def appendSubDir(msp: MultiPath, name: String): MultiPath = {
  MultiPath(
    local = Some(path(initDir(s"${msp.local.get}" + "/" + name))),
    google = projectConfig.hailCloud match {
      case true => Some(msp.google.get / name)
      case false => None
    }
  )
}

object DirTree {

  def initDirTree(cfg: ProjectConfig): DirTree = {

    val base = MultiPath(
      local = Some(path(initDir("loam_out"))),
      google = cfg.hailCloud match {
        case true => Some(cfg.cloudHome.get / "loam_out")
        case false => None
      }
    )

    val data = appendSubDir(base, "data")
    val dataArray = appendSubDir(data, "array")
    val dataGlobal = appendSubDir(data, "global")
    val dataGlobalAncestry = appendSubDir(dataGlobal, "ancestry")
    val dataGlobalKinship = appendSubDir(dataGlobal, "kinship")
    val analysis = appendSubDir(base, "analysis")
    val report = appendSubDir(base, "report")
    val reportQc = appendSubDir(report, "qc")
    val reportAnalysis = appendSubDir(report, "analysis")

    val dataArrayMap = cfg.Arrays.map { array =>
      val base = appendSubDir(dataArray, array.id)
      val sampleqc = appendSubDir(base, "sampleqc")
      val filter = appendSubDir(base, "filter")
      array -> DirTreeDataArray(
        base = base,
        prepare = appendSubDir(base, "prepare"),
        harmonize = appendSubDir(base, "harmonize"),
        annotate = appendSubDir(base, "annotate"),
        impute = appendSubDir(base, "impute"),
        sampleqc = sampleqc,
        kinship = appendSubDir(sampleqc, "kinship"),
        ancestry = appendSubDir(sampleqc, "ancestry"),
        pca = appendSubDir(sampleqc, "pca"),
        sexcheck = appendSubDir(sampleqc, "sexcheck"),
        metrics = appendSubDir(sampleqc, "metrics"),
        filter = filter,
        filterQc = appendSubDir(filter, "qc"),
        filterPostQc = appendSubDir(filter, "postqc"),
        clean = appendSubDir(base, "clean")
      )
    }.toMap

    val dataGlobalKinshipMap = projectConfig.Metas.map { meta =>
      meta -> appendSubDir(dataGlobalKinship, meta.id)
    }.toMap

    val analysisPhenoMap = projectConfig.Phenos.filter(e => projectConfig.Models.map(e => e.pheno).contains(e.id)).map { pheno =>

      val base_pheno = appendSubDir(analysis, pheno.id)

      pheno -> DirTreeAnalysisPheno(
        base = base_pheno,
        modelsMap = projectConfig.Models.filter(e => e.pheno == pheno.id).map { model =>
          val base_model = appendSubDir(base_pheno, model.id)
          val tests_map = model.tests.map { test =>
            val base_test = appendSubDir(base_model, test)
            val base_groups = appendSubDir(base_test, "groups")
            test -> DirTreeAnalysisTest(
              base = base_test,
              groups = base_groups,
              groupsMap = scala.collection.mutable.Map[String, MultiPath]()
              //groupsMap = model.groupFile match {
              //  case Some(_) =>
              //    val groups = fileToList(model.groupFile.get).map(e => e.split("\t")(0))
              //    groups.map { group =>
              //      group -> appendSubDir(base_groups, group)
              //    }.toMap
              //  case _ => scala.collection.mutable.Map[String, MultiPath]()
              //}
            )
          }.toMap
          model -> DirTreeAnalysisModel(
            base = base_model,
            testsMap = tests_map
          )
        }.toMap
      )

    }.toMap
    
    val reportAnalysisMap = cfg.Reports.map { report =>
      report -> appendSubDir(reportAnalysis, report.id)
    }.toMap

    new DirTree(
      base = base,
      data = data,
      dataArray = dataArray,
      dataArrayMap = dataArrayMap,
      dataGlobal = dataGlobal,
      dataGlobalAncestry = dataGlobalAncestry,
      dataGlobalKinship = dataGlobalKinship,
      dataGlobalKinshipMap = dataGlobalKinshipMap,
      analysis = analysis,
      analysisPhenoMap = analysisPhenoMap,
      report = report,
      reportQc = reportQc,
      reportAnalysis = reportAnalysis,
      reportAnalysisMap = reportAnalysisMap
    )

  }

}

println("Initializing Directory Tree ...")
val dirTree = DirTree.initDirTree(projectConfig)
println("... Finished Initializing Directory Tree")
