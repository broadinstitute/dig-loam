import java.io.{File, BufferedWriter, FileWriter}
import ProjectConfig._
import Collections._
import Stores._
import Fxns._

final case class DirTreeDataArray(
  base: MultiPath,
  prepare: MultiPath,
  harmonize: MultiPath,
  annotate: MultiPath,
  impute: MultiPath,
  sampleqc: MultiPath,
  kinship: MultiPath,
  ancestry: MultiPath,
  pca: MultiPath,
  sexcheck: MultiPath,
  metrics: MultiPath,
  filter: MultiPath,
  filterQc: MultiPath,
  filterPostQc: MultiPath,
  clean: MultiPath) extends Debug

final case class DirTree(
  base: MultiPath,
  data: MultiPath,
  dataArray: MultiPath,
  dataArrayMap: Map[ConfigArray, DirTreeDataArray],
  dataGlobal: MultiPath,
  dataGlobalAncestry: MultiPath,
  dataGlobalKinship: MultiPath,
  dataGlobalKinshipMap: Map[ConfigMeta, MultiPath],
  analysis: MultiPath,
  analysisSchema: MultiPath,
  analysisSchemaMap: Map[ConfigSchema, MultiPath],
  analysisModel: MultiPath,
  analysisModelGroups: MultiPath,
  analysisModelGroupsMap: scala.collection.mutable.Map[String, MultiPath],
  analysisModelRegions: MultiPath,
  analysisModelRegionsMap: scala.collection.mutable.Map[String, MultiPath],
  analysisModelMap: Map[ConfigModel, MultiPath],
  report: MultiPath,
  reportQc: MultiPath,
  reportAnalysis: MultiPath,
  reportAnalysisMap: Map[ConfigReport, MultiPath]) extends Debug

def appendSubDir(msp: MultiPath, name: String): MultiPath = {
  MultiPath(
    local = Some(path(initDir(s"${msp.local.get}" + "/" + name))),
    google = projectConfig.hailCloud match {
      case true => Some(msp.google.get / name)
      case false => None
    }
  )
}

object DirTree {

  def initDirTree(cfg: ProjectConfig): DirTree = {

    val base = MultiPath(
      local = Some(path(initDir("loam_out"))),
      google = cfg.hailCloud match {
        case true => Some(cfg.cloudHome.get / "loam_out")
        case false => None
      }
    )

    val data = appendSubDir(base, "data")
    val dataArray = appendSubDir(data, "array")
    val dataGlobal = appendSubDir(data, "global")
    val dataGlobalAncestry = appendSubDir(dataGlobal, "ancestry")
    val dataGlobalKinship = appendSubDir(dataGlobal, "kinship")
    val analysis = appendSubDir(base, "analysis")
    val report = appendSubDir(base, "report")
    val reportQc = appendSubDir(report, "qc")
    val reportAnalysis = appendSubDir(report, "analysis")

    val dataArrayMap = cfg.Arrays.map { array =>
      val base = appendSubDir(dataArray, array.id)
      val sampleqc = appendSubDir(base, "sampleqc")
      val filter = appendSubDir(base, "filter")
      array -> DirTreeDataArray(
        base = base,
        prepare = appendSubDir(base, "prepare"),
        harmonize = appendSubDir(base, "harmonize"),
        annotate = appendSubDir(base, "annotate"),
        impute = appendSubDir(base, "impute"),
        sampleqc = sampleqc,
        kinship = appendSubDir(sampleqc, "kinship"),
        ancestry = appendSubDir(sampleqc, "ancestry"),
        pca = appendSubDir(sampleqc, "pca"),
        sexcheck = appendSubDir(sampleqc, "sexcheck"),
        metrics = appendSubDir(sampleqc, "metrics"),
        filter = filter,
        filterQc = appendSubDir(filter, "qc"),
        filterPostQc = appendSubDir(filter, "postqc"),
        clean = appendSubDir(base, "clean")
      )
    }.toMap

    val dataGlobalKinshipMap = projectConfig.Metas.map { meta =>
      meta -> appendSubDir(dataGlobalKinship, meta.id)
    }.toMap

    val analysisSchema = appendSubDir(analysis, "schema")
    val analysisSchemaMap = projectConfig.Schemas.map { schema =>
      schema -> appendSubDir(analysisSchema, schema.id)
    }.toMap
    val analysisModel = appendSubDir(analysis, "model")
    val analysisModelGroups = appendSubDir(analysisModel, "groups")
    val analysisModelRegions = appendSubDir(analysisModel, "regions")
    val analysisModelRegionsMap = scala.collection.mutable.Map[String, MultiPath]()
    val analysisModelMap = projectConfig.Models.map { model =>
      model -> appendSubDir(analysisModel, model.id)
    }.toMap
    
    val reportAnalysisMap = cfg.Reports.map { report =>
      report -> appendSubDir(reportAnalysis, report.id)
    }.toMap

    new DirTree(
      base = base,
      data = data,
      dataArray = dataArray,
      dataArrayMap = dataArrayMap,
      dataGlobal = dataGlobal,
      dataGlobalAncestry = dataGlobalAncestry,
      dataGlobalKinship = dataGlobalKinship,
      dataGlobalKinshipMap = dataGlobalKinshipMap,
      analysis = analysis,
      analysisSchema = analysisSchema,
      analysisSchemaMap = analysisSchemaMap,
      analysisModel = analysisModel,
      analysisModelGroups = analysisModelGroups,
      analysisModelGroupsMap = scala.collection.mutable.Map[String, MultiPath](),
      analysisModelRegions = analysisModelRegions,
      analysisModelRegionsMap = scala.collection.mutable.Map[String, MultiPath](),
      analysisModelMap = analysisModelMap,
      report = report,
      reportQc = reportQc,
      reportAnalysis = reportAnalysis,
      reportAnalysisMap = reportAnalysisMap
    )

  }

}

println("Initializing Directory Tree ...")
val dirTree = DirTree.initDirTree(projectConfig)
println("... Finished Initializing Directory Tree")
