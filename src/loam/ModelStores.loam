import ProjectConfig._
import StoreHelpers._
import Stores._
import Fxns._
import DirTree._
import Collections._
import SchemaStores._

//final case class ModelBaseCohortStore(
//  base: MultiStore,
//  cohorts: Map[ConfigCohort, MultiStore])
//
//final case class ModelBaseMaskStore(
//  base: MultiStore,
//  masks: Map[MaskFilter, MultiStore])

//final case class ModelGroupResult(
//  results: Store,
//  groupFile: Store)

//final case class ModelResult(
//  results: Option[MultiStore],
//  resultsHailLog: Option[MultiStore],
//  filteredResults: Option[Store],
//  groups: Map[String, ModelGroup]
//)

final case class ModelAssocSingle(
  results: MultiStore,
  resultsHailLog: Option[MultiStore],
  filteredResults: Store,
  qqPlot: Store,
  qqPlotLowMaf: Store,
  qqPlotMidMaf: Store,
  qqPlotHighMaf: Store,
  mhtPlot: Store,
  topResults: Store,
  topResultsAnnot: Store,
  topResultsAnnotWarnings: Store,
  topResultsAnnotHeader: Store,
  topResultsSitesVcf: Vcf
)

final case class ModelAssocGroup(
  results: Store,
  groupFile: Store
)

final case class ModelAssocGroupBase(
  results: Store,
  groupFile: Store,
  qqPlot: Store,
  mhtPlot: Store,
  groups: Map[String, ModelAssocGroup]
)

//final case class ModelTest(
//  base: Map[String, ModelResult],
//  masks: Map[String, Map[MaskFilter, ModelResult]])

final case class Model(
  sampleMap: Store,
  cohortMap: MultiStore,
  phenoPrelim: Store,
  samplesAvailable: Store,
  samplesAvailableLog: Store,
  pcaBase: Path,
  pcaScores: Store, 
  pcaEigenVecs: Store, 
  pcaLoadings: Store, 
  pcaEigenVals: Store, 
  pcaPve: Store, 
  pcaMeansd: Store, 
  outliers: Store, 
  pcaLog: Store,
  pheno: MultiStore,
  pedEpacts: Option[Store],
  modelVarsEpacts: Option[Store],
  pcsInclude: MultiStore,
  assocSingle: Map[String, ModelAssocSingle],
  assocGroup: Map[String, ModelAssocGroupBase],
  //assocMaskGroup: Map[MaskFilter, Map[String, ModelAssocGroupBase]]
  assocMaskGroup: Map[String, Map[MaskFilter, ModelAssocGroupBase]]
)

val modelStores = (
  (for {
    x <- modelSchemaCohorts
  } yield {
    (x.model, x.schema, x.cohorts, None)
  }) ++
  (for {
    x <- modelSchemaMetaCohorts
  } yield {
    (x.model, x.schema, x.cohorts, Some(x.meta))
  })).map { sm =>

  val model = sm._1
  val schema = sm._2
  val cohorts = sm._3
  val meta: Option[ConfigMeta] = sm._4

  val array = projectConfig.Arrays.filter(e => e.id == cohorts.head.array).head

  val nullString = meta match {
    case Some(s) => s"${projectConfig.projectId}.${model.id}.${meta.get.id}"
    case None => s"${projectConfig.projectId}.${model.id}"
  }

  val baseString = schema.design match {
    case "full" => s"${nullString}"
    case "strat" => s"${nullString}.${cohorts.head.id}"
  }

  val local_dir = dirTree.analysisModelMap(model).local.get

  val cloud_dir = projectConfig.hailCloud match {
      case true => Some(dirTree.analysisModelMap(model).google.get)
      case false => None
  }

  val nmasks = schema.masks match {
    case Some(_) => schema.masks.get.size
    case None => 0
  }

  val modelSingleTests = model.tests.filter(e => ! groupTests.contains(e))
  val modelGroupTests = model.tests.filter(e => groupTests.contains(e))

  var masksAvailable = Seq[MaskFilter]()
  schema.masks match {
    case Some(_) => 
      for {
        sm <- schema.masks.get
      } yield {
        try {
          checkPath(s"""${schemaStores((schema, cohorts)).groupFile.base.masks(sm).local.get.toString.split("@")(1)}""")
          masksAvailable = masksAvailable ++ Seq(sm)
        }
        catch {
          case x: CfgException =>
            println(s"""skipping split assoc test by group due to missing group file: ${schemaStores((schema, cohorts)).groupFile.base.masks(sm).local.get.toString.split("@")(1)}""")
        }
      }
    case None => ()
  }

  sm -> Model(
    sampleMap = store(local_dir / s"${baseString}.sample.map.tsv"),
    cohortMap = MultiStore(
      local = Some(store(local_dir / s"${baseString}.cohort.map.tsv")),
      google = projectConfig.hailCloud match { case true => Some(store(cloud_dir.get / s"${baseString}.cohort.map.tsv")); case false => None }
    ),
    phenoPrelim = store(local_dir / s"${baseString}.pheno.prelim.tsv"),
    samplesAvailable = store(local_dir / s"${baseString}.samples.available.txt"),
    samplesAvailableLog = store(local_dir / s"${baseString}.samples.available.log"),
    pcaBase = local_dir / s"${baseString}.pca",
    pcaScores = store(local_dir / s"${baseString}.pca.scores.tsv"),
    pcaEigenVecs = store(local_dir / s"${baseString}.pca.eigenvecs.tsv"),
    pcaLoadings = store(local_dir / s"${baseString}.pca.loadings.tsv"),
    pcaEigenVals = store(local_dir / s"${baseString}.pca.eigenvals.txt"),
    pcaPve = store(local_dir / s"${baseString}.pca.pve.txt"),
    pcaMeansd = store(local_dir / s"${baseString}.pca.meansd.tsv"),
    outliers = store(local_dir / s"${baseString}.pca.outliers.txt"),
    pcaLog = store(local_dir / s"${baseString}.pca.log"),
    pheno = MultiStore(
      local = Some(store(local_dir / s"${baseString}.pheno.tsv")),
      google = projectConfig.hailCloud match { case true => Some(store(cloud_dir.get / s"${baseString}.pheno.tsv")); case false => None }
    ),
    pedEpacts = model.assocPlatforms.contains("epacts") match { case true => Some(store(local_dir / s"${baseString}.epacts.ped")); case false => None },
    modelVarsEpacts = model.assocPlatforms.contains("epacts") match { case true => Some(store(local_dir / s"${baseString}.epacts.model.vars")); case false => None },
    pcsInclude = MultiStore(
      local = Some(store(local_dir / s"${baseString}.pcs.include.txt")),
      google = projectConfig.hailCloud match { case true => Some(store(cloud_dir.get / s"${baseString}.pcs.include.txt")); case false => None }
    ),
    assocSingle = modelSingleTests.map { test =>
      test -> ModelAssocSingle(
        results = MultiStore(
          local = Some(store(local_dir / s"${baseString}.${test}.results.tsv.bgz")),
          google = projectConfig.hailCloud match { case true => Some(store(cloud_dir.get / s"${baseString}.${test}.results.tsv.bgz")); case false => None }
        ),
        resultsHailLog = test.split("\\.")(0) match {
          case "hail" => Some(MultiStore(
              local = Some(store(local_dir / s"${baseString}.${test}.results.hail.log")),
              google = projectConfig.hailCloud match { case true => Some(store(cloud_dir.get / s"${baseString}.${test}.results.hail.log")); case false => None }
            ))
          case _ => None
        },
        filteredResults = store(local_dir / s"${baseString}.${test}.results.filtered.tsv.bgz"),
        qqPlot = store(local_dir / s"${baseString}.${test}.results.qqplot.png"),
        qqPlotLowMaf = store(local_dir / s"${baseString}.${test}.results.qqplot.lowmaf.png"),
        qqPlotMidMaf = store(local_dir / s"${baseString}.${test}.results.qqplot.midmaf.png"),
        qqPlotHighMaf = store(local_dir / s"${baseString}.${test}.results.qqplot.highmaf.png"),
        mhtPlot = store(local_dir / s"${baseString}.${test}.results.mhtplot.png"),
        topResults = store(local_dir / s"${baseString}.${test}.topresults.tsv"),
        topResultsAnnot = store(local_dir / s"${baseString}.${test}.topresults.sites.annot.tsv"),
        topResultsAnnotWarnings = store(local_dir / s"${baseString}.${test}.topresults.sites.annot.warnings"),
        topResultsAnnotHeader = store(local_dir / s"${baseString}.${test}.topresults.sites.annot.header"),
        topResultsSitesVcf = Vcf(
          base = local_dir / s"${baseString}.${test}.topresults.sites",
          data = store(local_dir / s"${baseString}.${test}.topresults.sites.vcf.bgz"),
          tbi = store(local_dir / s"${baseString}.${test}.topresults.sites.vcf.bgz.tbi")
        )
      )
    }.toMap,
    assocGroup = nmasks match {
      case 0 =>
        try {
          val gFile = checkPath(s"""${schemaStores((schema, cohorts)).groupFile.base.base.local.get.toString.split("@")(1)}""")
          val l = fileToList(gFile).map(e => e.split("\t")(0))
          modelGroupTests.map { test =>
            test -> ModelAssocGroupBase(
              results = store(local_dir  / s"${baseString}.${test}.results.tsv.bgz"),
              groupFile = store(local_dir  / s"${baseString}.${test}.groupfile.tsv"),
              qqPlot = store(local_dir / s"${baseString}.${test}.results.qqplot.png"),
              mhtPlot = store(local_dir / s"${baseString}.${test}.results.mhtplot.png"),
              groups = l.map { group =>
                group -> ModelAssocGroup(
                  results = store(dirTree.analysisModelGroupsMap(group).local.get / s"${baseString}.${test}.${group}.results.tsv.bgz"),
                  groupFile = store(dirTree.analysisModelGroupsMap(group).local.get / s"${baseString}.${test}.${group}.groupfile.tsv")
                )
              }.toMap
            )
          }.toMap
        }
        catch {
          case x: CfgException =>
            println(s"""skipping split assoc test by group due to missing group file: ${schemaStores((schema, cohorts)).groupFile.base.base.local.get.toString.split("@")(1)}""")
            Map[String, ModelAssocGroupBase]()
        }
      case _ => Map[String, ModelAssocGroupBase]()
    },
    assocMaskGroup = masksAvailable.size match {
      case 0 => Map[String, Map[MaskFilter, ModelAssocGroupBase]]()
      case _ =>
        modelGroupTests.map { test =>
          test ->
            masksAvailable.map { mask =>
              val gFile = checkPath(s"""${schemaStores((schema, cohorts)).groupFile.base.masks(mask).local.get.toString.split("@")(1)}""")
              val l = fileToList(gFile).map(e => e.split("\t")(0))
              mask ->
                ModelAssocGroupBase(
                  results = store(local_dir / s"${baseString}.${test}.${mask.id}.results.tsv.bgz"),
                  groupFile = store(local_dir / s"${baseString}.${test}.${mask.id}.groupfile.tsv"),
                  qqPlot = store(local_dir / s"${baseString}.${test}.${mask.id}.results.qqplot.png"),
                  mhtPlot = store(local_dir / s"${baseString}.${test}.${mask.id}.results.mhtplot.png"),
                  groups = l.map { group =>
                    group -> ModelAssocGroup(
                      results = store(dirTree.analysisModelGroupsMap(group).local.get / s"${baseString}.${test}.${mask.id}.${group}.results.tsv.bgz"),
                      groupFile = store(dirTree.analysisModelGroupsMap(group).local.get / s"${baseString}.${test}.${mask.id}.${group}.groupfile.tsv")
                    )
                  }.toMap
                )
            }.toMap
        }.toMap
    }
    //assocMaskGroup = masksAvailable.size match {
    //  case 0 => Map[MaskFilter, Map[String, ModelAssocGroupBase]]()
    //  case _ =>
    //    masksAvailable.map { mask =>
    //      val gFile = checkPath(s"""${schemaStores((schema, cohorts)).groupFile.base.masks(mask).local.get.toString.split("@")(1)}""")
    //      val l = fileToList(gFile).map(e => e.split("\t")(0))
    //      mask ->
    //        modelGroupTests.map { test =>
    //          test -> ModelAssocGroupBase(
    //            results = store(local_dir / s"${baseString}.${mask.id}.${test}.results.tsv.bgz"),
    //            groupFile = store(local_dir / s"${baseString}.${mask.id}.${test}.groupfile.tsv"),
    //            qqPlot = store(local_dir / s"${baseString}.${mask.id}.${test}.results.qqplot.png"),
    //            mhtPlot = store(local_dir / s"${baseString}.${mask.id}.${test}.results.mhtplot.png"),
    //            groups = l.map { group =>
    //              group -> ModelAssocGroup(
    //                results = store(dirTree.analysisModelGroupsMap(group).local.get / s"${baseString}.${mask.id}.${test}.${group}.results.tsv.bgz"),
    //                groupFile = store(dirTree.analysisModelGroupsMap(group).local.get / s"${baseString}.${mask.id}.${test}.${group}.groupfile.tsv")
    //              )
    //            }.toMap
    //          )
    //        }.toMap
    //    }.toMap
    //}
  )
}.toMap
