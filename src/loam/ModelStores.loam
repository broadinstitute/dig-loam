import ProjectConfig._
import StoreHelpers._
import Stores._
import Fxns._
import DirTree._
import Collections._

final case class Model(
  sampleMap: Store,
  cohortMap: Store,
  cohortMapGoogle: Option[Store],
  phenoPrelim: Store,
  samplesAvailable: Store,
  samplesAvailableLog: Store,
  pcaBase: Path,
  pcaScores: Store, 
  pcaEigenVecs: Store, 
  pcaLoadings: Store, 
  pcaEigenVals: Store, 
  pcaPve: Store, 
  pcaMeansd: Store, 
  outliers: Store, 
  pcaLog: Store,
  pheno: Store,
  phenoGoogle: Option[Store],
  pcsInclude: Store,
  pcsIncludeGoogle: Option[Store],
  filters: Store,
  filtersGoogle: Option[Store],
  cohortFilters: Store,
  cohortFiltersGoogle: Option[Store],
  knockoutFilters: Store,
  knockoutFiltersGoogle: Option[Store],
  masks: Store,
  masksGoogle: Option[Store],
  variantsStats: Store,
  variantsStatsGoogle: Option[Store],
  variantsStatsHailLog: Store,
  variantsStatsHailLogGoogle: Option[Store],
  groupFile: Option[Store],
  groupFileGoogle: Option[Store],
  cleanVcf: Option[Store],
  cleanVcfTbi: Option[Store],
  cleanVcfGoogle: Option[Store],
)

val modelStores = (
  (for {
    x <- modelCohorts
  } yield {
    (x.model, x.cohorts, None)
  }) ++
  (for {
    x <- modelMetaCohorts
  } yield {
    (x.model, x.cohorts, Some(x.meta))
  })).map { sm =>

  val model = sm._1
  val cohorts = sm._2
  val meta: Option[ConfigMeta] = sm._3

  val baseString = meta match {
    case Some(s) =>
      model.design match {
        case "full" => s"${projectConfig.projectId}.${model.id}.${meta.get.id}"
        case "strat" => s"${projectConfig.projectId}.${model.id}.${meta.get.id}.${cohorts.head.id}"
      }
    case None =>
      model.design match {
        case "full" => s"${projectConfig.projectId}.${model.id}"
        case "strat" => s"${projectConfig.projectId}.${model.id}.${cohorts.head.id}"
      }
  }

  val local_dir = model.design match {
      case "full" => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get
      case "strat" => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohorts.head).local.get
  }

  val cloud_dir = model.design match {
      case "full" => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get
      case "strat" => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohorts.head).local.get
  }

  sm -> Model(
    sampleMap = store(local_dir / s"${baseString}.sample.map.tsv"),
    cohortMap = store(local_dir / s"${baseString}.cohort.map.tsv"),
    cohortMapGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.cohort.map.tsv")); case false => None },
    phenoPrelim = store(local_dir / s"${baseString}.pheno.prelim.tsv"),
    samplesAvailable = store(local_dir / s"${baseString}.samples.available.txt"),
    samplesAvailableLog = store(local_dir / s"${baseString}.samples.available.log"),
    pcaBase = local_dir / s"${baseString}.pca",
    pcaScores = store(local_dir / s"${baseString}.pca.scores.tsv"),
    pcaEigenVecs = store(local_dir / s"${baseString}.pca.eigenvecs.tsv"),
    pcaLoadings = store(local_dir / s"${baseString}.pca.loadings.tsv"),
    pcaEigenVals = store(local_dir / s"${baseString}.pca.eigenvals.txt"),
    pcaPve = store(local_dir / s"${baseString}.pca.pve.txt"),
    pcaMeansd = store(local_dir / s"${baseString}.pca.meansd.tsv"),
    outliers = store(local_dir / s"${baseString}.pca.outliers.txt"),
    pcaLog = store(local_dir / s"${baseString}.pca.log"),
    pheno = store(local_dir / s"${baseString}.pheno.tsv"),
    phenoGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.pheno.tsv")); case false => None },
    pcsInclude = store(local_dir / s"${baseString}.pcs.include.txt"),
    pcsIncludeGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.pcs.include.txt")); case false => None },
    filters = store(local_dir / s"${baseString}.variant.filters.txt"),
    filtersGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.variant.filters.txt")); case false => None },
    cohortFilters = store(local_dir / s"${baseString}.variant.cohortfilters.txt"),
    cohortFiltersGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.variant.cohortfilters.txt")); case false => None },
    knockoutFilters = store(local_dir / s"${baseString}.variant.knockoutfilters.txt"),
    knockoutFiltersGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.variant.knockoutfilters.txt")); case false => None },
    masks = store(local_dir / s"${baseString}.variant.masks.txt"),
    masksGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.variant.masks.txt")); case false => None },
    variantsStats = store(local_dir / s"${baseString}.variant.stats.tsv.bgz"),
    variantsStatsGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.variant.stats.tsv.bgz")); case false => None },
    variantsStatsHailLog = store(local_dir / s"${baseString}.variant.stats.hail.log"),
    variantsStatsHailLogGoogle = projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.variant.stats.hail.log")); case false => None },
    groupFile = groupTests.contains(model.test) match { case true => Some(store(local_dir / s"${baseString}.groupfile.txt")); case false => None },
	groupFileGoogle = (groupTests.contains(model.test) && projectConfig.hailCloud) match { case true => Some(projectConfig.hailCloud match { case true => Some(store(cloud_dir / s"${baseString}.groupfile.txt")); case false => None },
    cleanVcf = nonHailTests.contains(model.test) match { case true => Some(store(local_dir / s"${baseString}.clean.vcf.bgz")); case false => None },
    cleanVcfTbi = nonHailTests.contains(model.test) match { case true => Some(store(local_dir / s"${baseString}.clean.vcf.bgz.tbi")); case false => None },
    cleanVcfGoogle = (nonHailTests.contains(model.test) && projectConfig.hailCloud) match { case true => Some(store(cloud_dir / s"${baseString}.clean.vcf.bgz")); case false => None }
  )

}.toMap
