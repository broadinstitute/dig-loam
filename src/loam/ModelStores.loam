import ProjectConfig._
import StoreHelpers._
import Stores._
import Fxns._
import DirTree._
import Collections._

final case class Model(
  samplesMap: Store,
  phenoPrelim: Store,
  samplesAvailable: Store,
  samplesAvailableLog: Store,
  pcaBase: Path,
  pcaScores: Store, 
  pcaEigenVecs: Store, 
  pcaLoadings: Store, 
  pcaEigenVals: Store, 
  pcaPve: Store, 
  pcaMeansd: Store, 
  outliers: Store, 
  pcaLog: Store,
  pheno: Store,
  pcsInclude: Store)

val modelStores = (
  (for {
    x <- modelCohorts
  } yield {
    (x.model, x.cohort, None)
  }) ++
  (for {
    x <- modelMetaCohorts
  } yield {
    (x.model, x.cohort, Some(x.meta))
  })).map { sm =>

  val model = sm._1
  val cohort = sm._2
  val meta: Option[ConfigMeta] = sm._3

  val baseString = meta match {
    case Some(s) => s"${projectConfig.projectId}.${model.id}.${meta.get.id}.${cohort.id}"
    case None => s"${projectConfig.projectId}.${model.id}.${cohort.id}"
  }

  sm -> Model(
    samplesMap = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.samples.map.tsv")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.samples.map.tsv")
    },
    phenoPrelim = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pheno.prelim.tsv")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pheno.prelim.tsv")
    },
    samplesAvailable = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.samples.available.txt")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.samples.available.txt")
    },
    samplesAvailableLog = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.samples.available.log")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.samples.available.log")
    },
    pcaBase = model.design match {
      case "strat" => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca"
      case _ => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca"
    },
    pcaScores = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.scores.tsv")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.scores.tsv")
    },
    pcaEigenVecs = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.eigenvecs.tsv")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.eigenvecs.tsv")
    },
    pcaLoadings = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.loadings.tsv")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.loadings.tsv")
    },
    pcaEigenVals = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.eigenvals.txt")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.eigenvals.txt")
    },
    pcaPve = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.pve.txt")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.pve.txt")
    },
    pcaMeansd = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.meansd.tsv")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.meansd.tsv")
    },
    outliers = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.outliers.txt")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.outliers.txt")
    },
    pcaLog = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pca.log")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pca.log")
    },
    pheno = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pheno.tsv")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pheno.tsv")
    },
    pcsInclude = model.design match {
      case "strat" => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(cohort).local.get / s"${baseString}.pcs.include.txt")
      case _ => store(dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get / s"${baseString}.pcs.include.txt")
    }
  )

}.toMap
