import ProjectConfig._
import PipelineConfig._
import StoreHelpers._

final case class GlobalData(
  header: Store,
  intro: Store,
  introInput: Store,
  data: Store,
  dataInput: Store,
  strategy: Store,
  strategyInput: Store,
  bibliography: Store,
  bibliographyInput: Store,
  tex: Store,
  input: Store,
  pdf: Store)

final case class SectionData(
  summary: Store,
  summaryInput: Store,
  calibration: Store,
  calibrationInput: Store,
  topLoci: Store,
  topLociInput: Store,
  knownLoci: Option[Store],
  knownLociInput: Option[Store])

final case class AnalysisReport(
  globalData: GlobalData,
  sectionData: Map[ConfigSection, SectionData])

val analysisReportStores = projectConfig.Reports.map { report =>

  val baseString = s"DAR.${projectConfig.projectId}.${report.id}"

  val globalData = GlobalData(
    header = store(projectConfig.home / s"${baseString}.header.tex"),
    intro = store(projectConfig.home / s"${baseString}.intro.tex"),
    introInput = store(projectConfig.home / s"${baseString}.intro.input"),
    data = store(projectConfig.home / s"${baseString}.data.tex"),
    dataInput = store(projectConfig.home / s"${baseString}.data.input"),
    strategy = store(projectConfig.home / s"${baseString}.strategy.tex"),
    strategyInput = store(projectConfig.home / s"${baseString}.strategy.input"),
    bibliography = store(projectConfig.home / s"${baseString}.bibliography.tex"),
    bibliographyInput = store(projectConfig.home / s"${baseString}.bibliography.input"),
    tex = store(projectConfig.home / s"${baseString}.tex"),
    input = store(projectConfig.home / s"${baseString}.input"),
    pdf = store(projectConfig.home / s"${baseString}.pdf"))

  val sectionData = report.sections.map { section =>

    section -> SectionData(
      summary = store(projectConfig.home / s"${baseString}.${section.id}.summary.tex"),
      summaryInput = store(projectConfig.home / s"${baseString}.${section.id}.summary.input"),
      calibration = store(projectConfig.home / s"${baseString}.${section.id}.calibration.tex"),
      calibrationInput = store(projectConfig.home / s"${baseString}.${section.id}.calibration.input"),
      topLoci = store(projectConfig.home / s"${baseString}.${section.id}.toploci.tex"),
      topLociInput = store(projectConfig.home / s"${baseString}.${section.id}.toploci.input"),
      knownLoci = if ( section.knowns.isDefined ) { Some(store(projectConfig.home / s"${baseString}.${section.id}.knownloci.tex")) } else { None },
      knownLociInput = if ( section.knowns.isDefined ) { Some(store(projectConfig.home / s"${baseString}.${section.id}.knownloci.input")) } else { None })

  }.toMap

  report -> AnalysisReport(
    globalData = globalData,
    sectionData = sectionData)

}.toMap
