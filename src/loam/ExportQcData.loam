/**
  * Export Qc Data Step
  *  Description: Generate filtered and filtered/pruned filesets for QC
  *  Requires: Hail
  */
import ProjectConfig._
import ArrayStores._
import ProjectStores._

final case class CfgException(s: String) extends Exception(s)

def ExportQcData(array: ConfigArray): Unit = {

  val vfilters = {
    array.qcVariantFilters match {
      case Some(l) =>
        for {
          f <- l
        } yield {
          f match {
            case n if projectConfig.numericVariantFilters.map(e => e.id) contains n =>
              "--vfilter " + projectConfig.numericVariantFilters.filter(e => e.id == n).head.id + " " + projectConfig.numericVariantFilters.filter(e => e.id == n).head.field + " \"" + projectConfig.numericVariantFilters.filter(e => e.id == n).head.expression + "\""
            case b if projectConfig.booleanVariantFilters.map(e => e.id) contains b =>
              "--vfilter " + projectConfig.booleanVariantFilters.filter(e => e.id == b).head.id + " " + projectConfig.booleanVariantFilters.filter(e => e.id == b).head.field + " \"" + projectConfig.booleanVariantFilters.filter(e => e.id == b).head.expression + "\""
            case c if projectConfig.categoricalVariantFilters.map(e => e.id) contains c =>
              "--vfilter " + projectConfig.categoricalVariantFilters.filter(e => e.id == c).head.id + " " + projectConfig.categoricalVariantFilters.filter(e => e.id == c).head.field + " \"" + projectConfig.categoricalVariantFilters.filter(e => e.id == c).head.expression + "\""
            case d if projectConfig.compoundVariantFilters.map(e => e.id) contains d =>
              val ids = for {
                ff <- projectConfig.compoundVariantFilters.filter(e => e.id == d).head.filters
              } yield {
                ff match {
                  case nn if projectConfig.numericVariantFilters.map(e => e.id) contains nn =>
                    projectConfig.numericVariantFilters.filter(e => e.id == nn).head.field
                  case bb if projectConfig.booleanVariantFilters.map(e => e.id) contains bb =>
                    projectConfig.booleanVariantFilters.filter(e => e.id == bb).head.field
                  case cc if projectConfig.categoricalVariantFilters.map(e => e.id) contains cc =>
                    projectConfig.categoricalVariantFilters.filter(e => e.id == cc).head.field
                  case _ => throw new CfgException("ExportQcData: vfilters '" + ff + "' not found")
                }
              }
              "--vfilter " + projectConfig.compoundVariantFilters.filter(e => e.id == d).head.id + " " + ids.mkString(",") + " \"" + projectConfig.numericVariantFilters.filter(e => e.id == d).head.expression + "\""
            case _ => throw new CfgException("ExportQcData: vfilters '" + f + "' not found")
          }
        }
      case None => List("")
    }
  }.mkString(" ")

  val sampleN = array.qcVariantSampleN.getOrElse("") match {
    case "" => ""
    case _ =>
      s"--sample-n ${array.qcVariantSampleN.get}"
  }
  
  val sampleSeed = array.qcVariantSampleSeed.getOrElse("") match {
    case "" => ""
    case _ =>
      s"--sample-seed ${array.qcVariantSampleSeed.get}"
  }
  
  projectConfig.hailCloud match {
  
    case true =>
  
      google {
      
        hail"""${utils.python.pyHailExportQcData} --
          --reference-genome ${projectConfig.referenceGenome}
          --mt-in ${arrayStores(array).refData.mtGoogle.get}
          --regions-exclude ${ProjectStores.regionsExcludeGoogle.get}
          ${vfilters}
          ${sampleN}
          ${sampleSeed}
          --variants-out ${arrayStores(array).filteredData.variantMetricsGoogle.get}
          --plink-out ${arrayStores(array).filteredData.plink.base.google.get}
          --cloud
          --log ${arrayStores(array).filteredData.hailLogGoogle.get}"""
          .in(arrayStores(array).refData.mtGoogle.get, ProjectStores.regionsExcludeGoogle.get)
          .out(arrayStores(array).filteredData.plink.data.google.get :+ arrayStores(array).filteredData.variantMetricsGoogle.get :+ arrayStores(array).filteredData.hailLogGoogle.get)
          .tag(s"${arrayStores(array).filteredData.plink.base.local.get}.pyHailExportQcData".split("/").last)
      
      }
  
      local {
  
        googleCopy(arrayStores(array).filteredData.plink.data.google.get, arrayStores(array).filteredData.plink.data.local.get)
        googleCopy(arrayStores(array).filteredData.variantMetricsGoogle.get, arrayStores(array).filteredData.variantMetrics)
        googleCopy(arrayStores(array).filteredData.hailLogGoogle.get, arrayStores(array).filteredData.hailLog)
  
      }
  
    case false =>
  
      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.filterHail.cpus, mem = projectConfig.resources.filterHail.mem, maxRunTime = projectConfig.resources.filterHail.maxRunTime) {
      
        cmd"""${utils.binary.binPython} ${utils.python.pyHailExportQcData}
          --reference-genome ${projectConfig.referenceGenome}
          --mt-in ${arrayStores(array).refData.mt.get}
          --regions-exclude ${ProjectStores.regionsExclude}
          ${vfilters}
          ${sampleN}
          ${sampleSeed}
          --variants-out ${arrayStores(array).filteredData.variantMetrics}
          --plink-out ${arrayStores(array).filteredData.plink.base.local.get}
          --log ${arrayStores(array).filteredData.hailLog}"""
          .in(arrayStores(array).refData.mt.get, ProjectStores.regionsExclude)
          .out(arrayStores(array).filteredData.plink.data.local.get :+ arrayStores(array).filteredData.variantMetrics :+ arrayStores(array).filteredData.hailLog)
          .tag(s"${arrayStores(array).filteredData.plink.base.local.get}.pyHailExportQcData".split("/").last)
      
      }
  
  }
  
  drmWith(imageName = s"${utils.image.imgTools}", cores = projectConfig.resources.prunePlink.cpus, mem = projectConfig.resources.prunePlink.mem, maxRunTime = projectConfig.resources.prunePlink.maxRunTime) {
  
    cmd"""${utils.binary.binPlink}
      --bfile ${arrayStores(array).filteredData.plink.base.local.get}
      --allow-no-sex 
      --indep-pairwise 1000kb 1 0.2
      --out ${arrayStores(array).filteredData.plink.base.local.get}
      --memory ${projectConfig.resources.prunePlink.mem * 0.9 * 1000}"""
      .in(arrayStores(array).filteredData.plink.data.local.get)
      .out(arrayStores(array).filteredData.pruneIn)
      .tag(s"${arrayStores(array).filteredData.pruneIn}".split("/").last)
  
    cmd"""${utils.binary.binPlink}
      --bfile ${arrayStores(array).filteredData.plink.base.local.get}
      --allow-no-sex 
      --extract ${arrayStores(array).filteredData.pruneIn}
      --keep-allele-order
      --make-bed
      --out ${arrayStores(array).prunedData.plink.base}
      --memory ${projectConfig.resources.prunePlink.mem * 0.9 * 1000}"""
      .in(arrayStores(array).filteredData.plink.data.local.get :+ arrayStores(array).filteredData.pruneIn)
      .out(arrayStores(array).prunedData.plink.data)
      .tag(s"${arrayStores(array).prunedData.plink.base}".split("/").last)
  
  }

}
