/**
 * Filter Cohort Step
 * filter samples and variants to generate cohort-level exclusions for analysis
 */
import ProjectConfig._
import ArrayStores._
import CohortStores._
import ProjectStores._

final case class CfgException(s: String) extends Exception(s)

def FilterCohort(cohort: ConfigCohort): Unit = {

  val array = projectConfig.Arrays.filter(e => cohort.array == e.id).head

  val vfilters = {
    cohort.cohortVariantFilters match {
      case Some(l) =>
        for {
          f <- l
        } yield {
          f match {
            case n if projectConfig.numericVariantFilters.map(e => e.id) contains n =>
              "--vfilter " + projectConfig.numericVariantFilters.filter(e => e.id == n).head.id + " " + projectConfig.numericVariantFilters.filter(e => e.id == n).head.field + " \"" + projectConfig.numericVariantFilters.filter(e => e.id == n).head.expression + "\""
            case b if projectConfig.booleanVariantFilters.map(e => e.id) contains b =>
              "--vfilter " + projectConfig.booleanVariantFilters.filter(e => e.id == b).head.id + " " + projectConfig.booleanVariantFilters.filter(e => e.id == b).head.field + " \"" + projectConfig.booleanVariantFilters.filter(e => e.id == b).head.expression + "\""
            case c if projectConfig.categoricalVariantFilters.map(e => e.id) contains c =>
              "--vfilter " + projectConfig.categoricalVariantFilters.filter(e => e.id == c).head.id + " " + projectConfig.categoricalVariantFilters.filter(e => e.id == c).head.field + " \"" + projectConfig.categoricalVariantFilters.filter(e => e.id == c).head.expression + "\""
            case d if projectConfig.compoundVariantFilters.map(e => e.id) contains d =>
              val ids = for {
                ff <- projectConfig.compoundVariantFilters.filter(e => e.id == d).head.filters
              } yield {
                ff match {
                  case nn if projectConfig.numericVariantFilters.map(e => e.id) contains nn =>
                    projectConfig.numericVariantFilters.filter(e => e.id == nn).head.field
                  case bb if projectConfig.booleanVariantFilters.map(e => e.id) contains bb =>
                    projectConfig.booleanVariantFilters.filter(e => e.id == bb).head.field
                  case cc if projectConfig.categoricalVariantFilters.map(e => e.id) contains cc =>
                    projectConfig.categoricalVariantFilters.filter(e => e.id == cc).head.field
                  case _ => throw new CfgException("FilterCohort: vfilters '" + ff + "' not found")
                }
              }
              "--vfilter " + projectConfig.compoundVariantFilters.filter(e => e.id == d).head.id + " " + ids.mkString(",") + " \"" + projectConfig.compoundVariantFilters.filter(e => e.id == d).head.expression + "\""
            case _ => throw new CfgException("FilterCohort: vfilters '" + f + "' not found")
          }
        }
      case None => List("")
    }
  }.mkString(" ")

  val sfilters = {
    cohort.cohortSampleFilters match {
      case Some(l) =>
        for {
          f <- l
        } yield {
          f match {
            case n if projectConfig.numericSampleFilters.map(e => e.id) contains n =>
              "--sfilter " + projectConfig.numericSampleFilters.filter(e => e.id == n).head.id + " " + projectConfig.numericSampleFilters.filter(e => e.id == n).head.field + " \"" + projectConfig.numericSampleFilters.filter(e => e.id == n).head.expression + "\""
            case b if projectConfig.booleanSampleFilters.map(e => e.id) contains b =>
              "--sfilter " + projectConfig.booleanSampleFilters.filter(e => e.id == b).head.id + " " + projectConfig.booleanSampleFilters.filter(e => e.id == b).head.field + " \"" + projectConfig.booleanSampleFilters.filter(e => e.id == b).head.expression + "\""
            case c if projectConfig.categoricalSampleFilters.map(e => e.id) contains c =>
              "--sfilter " + projectConfig.categoricalSampleFilters.filter(e => e.id == c).head.id + " " + projectConfig.categoricalSampleFilters.filter(e => e.id == c).head.field + " \"" + projectConfig.categoricalSampleFilters.filter(e => e.id == c).head.expression + "\""
            case d if projectConfig.compoundSampleFilters.map(e => e.id) contains d =>
              val ids = for {
                ff <- projectConfig.compoundSampleFilters.filter(e => e.id == d).head.filters
              } yield {
                ff match {
                  case nn if projectConfig.numericSampleFilters.map(e => e.id) contains nn =>
                    projectConfig.numericSampleFilters.filter(e => e.id == nn).head.field
                  case bb if projectConfig.booleanSampleFilters.map(e => e.id) contains bb =>
                    projectConfig.booleanSampleFilters.filter(e => e.id == bb).head.field
                  case cc if projectConfig.categoricalSampleFilters.map(e => e.id) contains cc =>
                    projectConfig.categoricalSampleFilters.filter(e => e.id == cc).head.field
                  case _ => throw new CfgException("FilterCohort: sfilters '" + ff + "' not found")
                }
              }
              "--sfilter " + projectConfig.compoundSampleFilters.filter(e => e.id == d).head.id + " " + ids.mkString(",") + " \"" + projectConfig.compoundSampleFilters.filter(e => e.id == d).head.expression + "\""
            case _ => throw new CfgException("FilterCohort: sfilters '" + f + "' not found")
          }
        }
      case None => List("")
    }
  }.mkString(" ")

  val stratcol = {
    cohort.stratCol match {
      case Some(a) => "--strat-col " + a
      case _ => ""
    }
  }

  val stratcodes = {
    cohort.stratCodes match {
      case Some(a) => "--strat-codes " + a.mkString(",")
      case _ => ""
    }
  }

  projectConfig.hailCloud match {

    case true =>

      val samples_remove = Seq(s"""${arrayStores(array).filterQc.samplesExcludeGoogle.get.uri}""", s"""${arrayStores(array).filterPostQc.samplesExcludeGoogle.get.uri}""")
 
      google {

        hail"""${utils.python.pyHailFilter} --
          --cloud
          --hail-utils ${ProjectStores.hailUtilsGoogle.get}
          ${sfilters}
          ${vfilters}
          --log ${cohortStores(cohort).hailLogGoogle.get}
          --mt-in ${arrayStores(array).refData.mtGoogle.get}
          --pheno-in ${ProjectStores.phenoFileGoogle.get}
          --id-col ${projectConfig.phenoFileId}
          --ancestry-in ${ProjectStores.ancestryInferredGoogle.get}
          --ancestry-keep "${cohort.ancestry.mkString(",")}"
          ${stratcol}
          ${stratcodes}
          --samples-remove "${samples_remove.mkString(",")}"
          --variants-remove ${arrayStores(array).filterPostQc.variantsExcludeGoogle.get}
          --samples-stats-out ${cohortStores(cohort).samplesStatsGoogle.get}
          --samples-exclude-out ${cohortStores(cohort).samplesExcludeGoogle.get}
          --samples-keep-out ${cohortStores(cohort).samplesKeepGoogle.get}
          --variants-stats-out ${cohortStores(cohort).variantsStatsGoogle.get}
          --variants-exclude-out ${cohortStores(cohort).variantsExcludeGoogle.get}"""
          .in(ProjectStores.hailUtilsGoogle.get, ProjectStores.phenoFileGoogle.get, arrayStores(array).filterQc.samplesExcludeGoogle.get, arrayStores(array).filterPostQc.samplesExcludeGoogle.get, ProjectStores.ancestryInferredGoogle.get, arrayStores(array).refData.mtGoogle.get, arrayStores(array).filterPostQc.variantsExcludeGoogle.get)
          .out(cohortStores(cohort).samplesStatsGoogle.get, cohortStores(cohort).samplesExcludeGoogle.get, cohortStores(cohort).variantsStatsGoogle.get, cohortStores(cohort).variantsExcludeGoogle.get, cohortStores(cohort).samplesKeepGoogle.get, cohortStores(cohort).hailLogGoogle.get)
          .tag(s"${cohortStores(cohort).hailLog}.pyHailFilter.google".split("/").last)

      }
      
      local {
      
        googleCopy(cohortStores(cohort).samplesStatsGoogle.get, cohortStores(cohort).samplesStats)
        googleCopy(cohortStores(cohort).samplesExcludeGoogle.get, cohortStores(cohort).samplesExclude)
        googleCopy(cohortStores(cohort).samplesKeepGoogle.get, cohortStores(cohort).samplesKeep)
        googleCopy(cohortStores(cohort).variantsStatsGoogle.get, cohortStores(cohort).variantsStats)
        googleCopy(cohortStores(cohort).variantsExcludeGoogle.get, cohortStores(cohort).variantsExclude)
        googleCopy(cohortStores(cohort).hailLogGoogle.get, cohortStores(cohort).hailLog)
      
      }

    case false =>

      val samples_remove = Seq(s"""${arrayStores(array).filterQc.samplesExclude.path}""", s"""${arrayStores(array).filterPostQc.samplesExclude.path}""")

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.filterFinalHail.cpus, mem = projectConfig.resources.filterFinalHail.mem, maxRunTime = projectConfig.resources.filterFinalHail.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailFilter}
          ${sfilters}
          ${vfilters}
          --log ${cohortStores(cohort).hailLog}
          --mt-in ${arrayStores(array).refData.mt.get}
          --pheno-in ${ProjectStores.phenoFile.get}
          --id-col ${projectConfig.phenoFileId}
          --ancestry-in ${ProjectStores.ancestryInferred}
          --ancestry-keep "${cohort.ancestry.mkString(",")}"
          ${stratcol}
          ${stratcodes}
          --samples-remove "${samples_remove.mkString(",")}"
          --variants-remove ${arrayStores(array).filterPostQc.variantsExclude}
          --samples-stats-out ${cohortStores(cohort).samplesStats}
          --samples-exclude-out ${cohortStores(cohort).samplesExclude}
          --samples-keep-out ${cohortStores(cohort).samplesKeep}
          --variants-stats-out ${cohortStores(cohort).variantsStats}
          --variants-exclude-out ${cohortStores(cohort).variantsExclude}"""
          .in(ProjectStores.phenoFile.get, arrayStores(array).filterQc.samplesExclude, arrayStores(array).filterPostQc.samplesExclude, ProjectStores.ancestryInferred, ProjectStores.ancestryInferred, arrayStores(array).refData.mt.get, arrayStores(array).filterPostQc.variantsExclude)
          .out(cohortStores(cohort).samplesStats, cohortStores(cohort).samplesExclude, cohortStores(cohort).variantsStats, cohortStores(cohort).variantsExclude, cohortStores(cohort).samplesKeep, cohortStores(cohort).hailLog)
          .tag(s"${cohortStores(cohort).hailLog}.pyHailFilter".split("/").last)

      }

  }

}