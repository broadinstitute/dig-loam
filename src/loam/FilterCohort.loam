/**
 * Filter Cohort Step
 * filter samples and variants to generate cohort-level exclusions for analysis
 */
import ProjectConfig._
import CohortStores._
import ProjectStores._

def FilterCohort(cohort: ConfigCohort): Unit = {

  val array = arrayStores(cohort.array)

  val vfilters = {
    cohort.variantFilters match {
      case Some(a) =>
        for {
          f <- a.tupelize_metrics
        } yield {
          f._2 match {
            case Some(s) => "--vfilter " + f._1 + " \"" + s + "\""
            case _ => ""
          }
        }
      case _ => List("")
    }
  }.mkString(" ")

  val samplefilters = {
    cohort.sFilters match {
      case Some(a) =>
        for {
          f <- a.tupelize_metrics
        } yield {
          f._2 match {
            case Some(s) => "--sfilter " + f._1 + " \"" + s + "\""
            case _ => ""
          }
        }
      case _ => List("")
    }
  }.mkString(" ")

  projectConfig.hailCloud match {

    case true =>

      val samples_remove = Seq(array.filterQc.samplesExcludeGoogle.get, array.filterPostQc.samplesExcludeGoogle.get)
 
      google {

        hail"""${utils.python.pyHailFilter} --
          --cloud
          ${sfilters}
          ${vfilters}
          --log ${cohortStores(cohort).hailLogGoogle.get}
          --mt-in ${array.refData.mtGoogle.get}
          --pheno-in ${ProjectStores.phenoFileGoogle.get}
          --id-col ${ProjectConfig.phenoFileId}
          --ancestry-in ${ProjectStores.ancestryInferredGoogle.get}
          --ancestry-keep "${cohort.ancestry.mkString(",")}"
          --strat-col ${cohort.stratCol}
          --strat-codes "${cohort.stratCodes.mkString(",")}"
          --samples-remove "${samples_remove.mkString(",")}"
          --variants-remove ${array.filterPostQc.variantsExcludeGoogle.get}
          --samples-stats-out ${cohortStores(cohort).samplesStatsGoogle.get}
          --samples-exclude-out ${cohortStores(cohort).samplesExcludeGoogle.get}
          --samples-keep-out ${cohortStores(cohort).samplesKeepGoogle.get}
          --variants-stats-out ${cohortStores(cohort).variantsStatsGoogle.get}
          --variants-exclude-out ${cohortStores(cohort).variantsExcludeGoogle.get}
          --variants-keep-out ${cohortStores(cohort).variantsKeepGoogle.get}"""
          .in(samples_remove :+ ProjectStores.ancestryInferredGoogle.get :+ ProjectStores.ancestryInferredGoogle.get:+ array.refData.mtGoogle.get :+ array.filterPostQc.variantsExcludeGoogle.get)
          .out(cohortStores(cohort).samplesStatsGoogle.get, cohortStores(cohort).samplesExcludeGoogle.get, cohortStores(cohort).variantsStatsGoogle.get, cohortStores(cohort).variantsExcludeGoogle.get, cohortStores(cohort).samplesKeepGoogle.get, cohortStores(cohort).variantsKeepGoogle.get, cohortStores(cohort).hailLogGoogle.get)
          .tag(s"${cohortStores(cohort).hailLog}.pyHailFilter.google".split("/").last)

      }
      
      local {
      
        googleCopy(cohortStores(cohort).samplesStatsGoogle.get, cohortStores(cohort).samplesStats)
        googleCopy(cohortStores(cohort).samplesExcludeGoogle.get, cohortStores(cohort).samplesExclude)
        googleCopy(cohortStores(cohort).samplesKeepGoogle.get, cohortStores(cohort).samplesKeep)
        googleCopy(cohortStores(cohort).variantsStatsGoogle.get, cohortStores(cohort).variantsStats)
        googleCopy(cohortStores(cohort).variantsExcludeGoogle.get, cohortStores(cohort).variantsExclude)
        googleCopy(cohortStores(cohort).variantsKeepGoogle.get, cohortStores(cohort).variantsKeep)
        googleCopy(cohortStores(cohort).hailLogGoogle.get, cohortStores(cohort).hailLog)
      
      }

    case false =>

      val samples_remove = Seq(array.filterQc.samplesExclude, array.filterPostQc.samplesExclude)

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.filterFinalHail.cpus, mem = projectConfig.resources.filterFinalHail.mem, maxRunTime = projectConfig.resources.filterFinalHail.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailFilter}
          ${sfilters}
          ${vfilters}
          --log ${cohortStores(cohort).hailLog}
          --mt-in ${array.refData.mt.get}
          --pheno-in ${ProjectStores.phenoFile}
          --id-col ${ProjectConfig.phenoFileId}
          --ancestry-in ${ProjectStores.ancestryInferred}
          --ancestry-keep "${cohort.ancestry.mkString(",")}"
          --strat-col ${cohort.stratCol}
          --strat-codes "${cohort.stratCodes.mkString(",")}"
          --samples-remove "${samples_remove.mkString(",")}"
          --variants-remove ${array.filterPostQc.variantsExclude}
          --samples-stats-out ${cohortStores(cohort).samplesStats}
          --samples-exclude-out ${cohortStores(cohort).samplesExclude}
          --samples-keep-out ${cohortStores(cohort).samplesKeep}
          --variants-stats-out ${cohortStores(cohort).variantsStats}
          --variants-exclude-out ${cohortStores(cohort).variantsExclude}
          --variants-keep-out ${cohortStores(cohort).variantsKeep}"""
          .in(samples_remove :+ ProjectStores.ancestryInferred :+ ProjectStores.ancestryInferred:+ array.refData.mt.get :+ array.filterPostQc.variantsExclude)
          .out(cohortStores(cohort).samplesStats, cohortStores(cohort).samplesExclude, cohortStores(cohort).variantsStats, cohortStores(cohort).variantsExclude, cohortStores(cohort).samplesKeep, cohortStores(cohort).variantsKeep, cohortStores(cohort).hailLog)
          .tag(s"${cohortStores(cohort).hailLog}.pyHailFilter".split("/").last)

      }

  }

}