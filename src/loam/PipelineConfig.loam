val dataConfig = loadConfig("dataConfig", "")

val imagesDir = dataConfig.getStr("imagesDir")
val scriptsDir = dataConfig.getStr("scriptsDir")

val hailCloud = dataConfig.getBool("hailCloud")
val localOutDir = if (dataConfig.isDefined("localOutDir")) { path(dataConfig.getStr("localOutDir")) } else { path("loam_out") }
val googleOutDir = if (dataConfig.isDefined("googleOutDir")) { Some(uri(dataConfig.getStr("googleOutDir"))) } else { None }

// Images
val imgHail = path(s"${imagesDir}/data_processing_v2.2_hailv02.simg")
val imgLocuszoom = path(s"${imagesDir}/locuszoom.simg")
val imgPython27 = path(s"${imagesDir}/data_processing_v2.2_python27.simg")
val imgR34 = path(s"${imagesDir}/data_processing_v2.2_r34.simg")
val imgTools = path(s"${imagesDir}/data_processing_v2.2_tools.simg")
val imgTex = path(s"${imagesDir}/tex.simg")

// Binaries
val binLiftOver = path("/usr/local/bin/liftOver")
val binGenotypeHarmonizer = path("GenotypeHarmonizer")
val binKing = path("/usr/local/bin/king")
val binPlink = path("/usr/local/bin/plink")
val binTabix = path("/usr/local/bin/tabix")
val binGhostscript = path("/usr/local/bin/gs")
val binKlustakwik = path("/usr/local/bin/KlustaKwik")
val binPython = path("/usr/local/bin/python")
val binLocuszoom = path("/usr/local/bin/locuszoom")
val binPdflatex = path("/usr/local/bin/pdflatex")
val binRscript = path("/usr/local/bin/Rscript")

// Scripts
val pyAlignNon1kgVariants = path(s"${scriptsDir}/align_non1kg_variants.py")
val pyHailLoad = path(s"${scriptsDir}/hail_load.py")
val pyHailFilter = path(s"${scriptsDir}/hail_filter.py")
val pyHailAncestryPcaMerge1kg = path(s"${scriptsDir}/hail_ancestry_pca_merge_1kg.py")
val pyHailPcaMerge1kg = path(s"${scriptsDir}/hail_pca_merge_1kg.py")
val pyHailSampleqc = path(s"${scriptsDir}/hail_sampleqc.py")
val pyHailSexcheck = path(s"${scriptsDir}/hail_sexcheck.py")
val pyHailFilterFinal = path(s"${scriptsDir}/hail_filter_final.py")
val pyHailListSamples = path(s"${scriptsDir}/hail_list_samples.py")
val pyHailAssoc = path(s"${scriptsDir}/hail_assoc.py")
val pyHailMerge = path(s"${scriptsDir}/hail_merge.py")
val pyHailMetaAnalysis = path(s"${scriptsDir}/hail_meta_analysis.py")
val pyQqPlot = path(s"${scriptsDir}/qqplot.py")
val pyMhtPlot = path(s"${scriptsDir}/mhtplot.py")
val shRegPlot = path(s"${scriptsDir}/regplot.sh")
val pyExtractTopRegions = path(s"${scriptsDir}/extract_top_regions.py")
val pyMakeSamplesRestoreTable = path(s"${scriptsDir}/make_samples_restore_table.py")
val pyCompileExclusions = path(s"${scriptsDir}/compile_exclusions.py")
val pyGenerateReportHeader = path(s"${scriptsDir}/generate_report_header.py")
val pyGenerateQcReportIntro = path(s"${scriptsDir}/generate_qc_report_intro.py")
val pyGenerateQcReportData = path(s"${scriptsDir}/generate_qc_report_data.py")
val pyGenerateQcReportAncestry = path(s"${scriptsDir}/generate_qc_report_ancestry.py")
val pyGenerateQcReportIbdSexcheck = path(s"${scriptsDir}/generate_qc_report_ibd_sexcheck.py")
val pyGenerateQcReportSampleqc = path(s"${scriptsDir}/generate_qc_report_sampleqc.py")
val pyGenerateQcReportVariantqc = path(s"${scriptsDir}/generate_qc_report_variantqc.py")
val pyGenerateQcReportBibliography = path(s"${scriptsDir}/generate_qc_report_bibliography.py")
val pyGenerateAnalysisReportIntro = path(s"${scriptsDir}/generate_analysis_report_intro.py")
val pyGenerateAnalysisReportData = path(s"${scriptsDir}/generate_analysis_report_data.py")
val pyGenerateAnalysisReportStrategy = path(s"${scriptsDir}/generate_analysis_report_strategy.py")
val pyGenerateAnalysisReportPhenoSummary = path(s"${scriptsDir}/generate_analysis_report_pheno_summary.py")
val pyGenerateAnalysisReportPhenoCalibration = path(s"${scriptsDir}/generate_analysis_report_pheno_calibration.py")
val pyGenerateAnalysisReportPhenoTopLoci = path(s"${scriptsDir}/generate_analysis_report_pheno_top_loci.py")
val pyGenerateAnalysisReportPhenoKnownLoci = path(s"${scriptsDir}/generate_analysis_report_pheno_known_loci.py")
val pyGenerateAnalysisReportBibliography = path(s"${scriptsDir}/generate_analysis_report_bibliography.py")
val pyMergeVariantLists = path(s"${scriptsDir}/merge_variant_lists.py")
val pyTop1000 = path(s"${scriptsDir}/top1000.py")
val pyAddGeneAnnot = path(s"${scriptsDir}/add_gene_annot.py")
val pyPhenoDistPlot = path(s"${scriptsDir}/pheno_dist_plot.py")
val shKing = path(s"${scriptsDir}/king.sh")
val shCrossCohortCommonVariants = path(s"${scriptsDir}/cross_cohort_common_variants.sh")
val shMetaCohortSamples = path(s"${scriptsDir}/meta_cohort_samples.sh")
val shKlustakwikPca = path(s"${scriptsDir}/klustakwik.pca.sh")
val shKlustakwikMetric = path(s"${scriptsDir}/klustakwik.metric.sh")
val shTop1000Genes = path(s"${scriptsDir}/top1000_genes.sh")
val rFindBestDuplicateVariants = path(s"${scriptsDir}/find_best_duplicate_variants.r")
val rAncestryClusterMerge = path(s"${scriptsDir}/ancestry_cluster_merge.r")
val rAncestryClusterTable = path(s"${scriptsDir}/ancestry_cluster_table.r")
val rCalcKinshipFamSizes = path(s"${scriptsDir}/calc_kinship_fam_sizes.r")
val rPcair = path(s"${scriptsDir}/pcair.r")
val rPlotAncestryPca = path(s"${scriptsDir}/plot_ancestry_pca.r")
val rPlotAncestryCluster = path(s"${scriptsDir}/plot_ancestry_cluster.r")
val rIstatsPcsGmmClusterPlot = path(s"${scriptsDir}/istats_pcs_gmm_cluster_plot.r")
val rIstatsAdjGmmPlotMetrics = path(s"${scriptsDir}/istats_adj_gmm_plot_metrics.r")
val rCalcIstatsAdj = path(s"${scriptsDir}/calc_istats_adj.r")
val rIstatsAdjPca = path(s"${scriptsDir}/istats_adj_pca.r")
val rExcludeCrossArray = path(s"${scriptsDir}/exclude_cross_array.r")
val rGeneratePheno = path(s"${scriptsDir}/generate_pheno.r")
val rVariantsSummaryTable = path(s"${scriptsDir}/variants_summary_table.r")
val rUpsetplotBimFam = path(s"${scriptsDir}/upsetplot.bimfam.r")
val rMakeOutlierTable = path(s"${scriptsDir}/make_outlier_table.r")
val rMakeMetricDistPlot = path(s"${scriptsDir}/make_metric_dist_plot.r")
val rTop20 = path(s"${scriptsDir}/top20.r")
val rTop50Known = path(s"${scriptsDir}/top50_known.r")
val rMetaExclusionsTable = path(s"${scriptsDir}/meta_exclusions_table.r")
