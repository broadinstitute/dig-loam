/**
 * Sample QC Stats Calculation Step
 *  Description: Calculate sexcheck and sample by variant statistics for all samples
 *  Requires: Hail, R
 */
import ProjectConfig._
import ArrayStores._
import ProjectStores._

def SampleQc(array: ConfigArray): Unit = {

  projectConfig.hailCloud match {

    case true =>

      local {
      
        googleCopy(ProjectStores.ancestryInferred, ProjectStores.ancestryInferredGoogle.get)
      
      }
      
      google {
      
        hail"""${utils.python.pyHailSampleqc} --
          --reference-genome ${projectConfig.referenceGenome}
          --mt-in ${arrayStores(array).refData.mtGoogle.get}
          --clusters-in ${ProjectStores.ancestryInferredGoogle.get}
          --qc-out ${arrayStores(array).sampleQcData.statsGoogle.get}
          --cloud
          --log ${arrayStores(array).sampleQcData.hailLogGoogle.get}"""
          .in(arrayStores(array).refData.mtGoogle.get, ProjectStores.ancestryInferredGoogle.get)
          .out(arrayStores(array).sampleQcData.statsGoogle.get, arrayStores(array).sampleQcData.hailLogGoogle.get)
          .tag(s"${arrayStores(array).sampleQcData.stats}.google".split("/").last)
      
      }
      
      local {

        googleCopy(arrayStores(array).sampleQcData.statsGoogle.get, arrayStores(array).sampleQcData.stats)
        googleCopy(arrayStores(array).sampleQcData.hailLogGoogle.get, arrayStores(array).sampleQcData.hailLog)
      
      }

    case false =>

      drmWith(imageName = s"${utils.image.imgHail}", cores = projectConfig.resources.sampleQcHail.cpus, mem = projectConfig.resources.sampleQcHail.mem, maxRunTime = projectConfig.resources.sampleQcHail.maxRunTime) {

        cmd"""${utils.binary.binPython} ${utils.python.pyHailSampleqc}
          --reference-genome ${projectConfig.referenceGenome}
          --mt-in ${arrayStores(array).refData.mt.get}
          --clusters-in ${ProjectStores.ancestryInferred}
          --qc-out ${arrayStores(array).sampleQcData.stats}
          --log ${arrayStores(array).sampleQcData.hailLog}"""
          .in(arrayStores(array).refData.mt.get, ProjectStores.ancestryInferred)
          .out(arrayStores(array).sampleQcData.stats, arrayStores(array).sampleQcData.hailLog)
          .tag(s"${arrayStores(array).sampleQcData.stats}".split("/").last)

      }

  }

  val nSampleMetricPcs = array.nSampleMetricPcs.getOrElse("") match { case "" => ""; case _ => s"--n-pcs ${array.nSampleMetricPcs.get}" }

  val sampleMetricCovars = array.sampleMetricCovars.getOrElse("") match { case "" => ""; case _ => s"""--covars "${array.sampleMetricCovars.get}"""" }
  
  drmWith(imageName = s"${utils.image.imgR34}") {

    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rCalcIstatsAdj}
      --sampleqc-stats ${arrayStores(array).sampleQcData.stats}
      --sample-file ${ProjectStores.sampleFile}
      --iid-col ${projectConfig.sampleFileId}
      ${nSampleMetricPcs}
      ${sampleMetricCovars}
      --pca-scores ${arrayStores(array).pcaData.scores}
      --incomplete-obs ${arrayStores(array).sampleQcData.incompleteObs}
      --out ${arrayStores(array).sampleQcData.statsAdj}"""
      .in(arrayStores(array).sampleQcData.stats, arrayStores(array).pcaData.scores)
      .out(arrayStores(array).sampleQcData.incompleteObs, arrayStores(array).sampleQcData.statsAdj)
      .tag(s"${arrayStores(array).sampleQcData.statsAdj}".split("/").last)
  
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rIstatsAdjPca}
      --sampleqc-stats-adj ${arrayStores(array).sampleQcData.statsAdj}
      --corr-plots ${arrayStores(array).sampleQcData.corrPlots}
      --pca-loadings ${arrayStores(array).sampleQcData.pcaLoadings}
      --pca-scores-plots ${arrayStores(array).sampleQcData.pcaPlots}
      --pca-scores ${arrayStores(array).sampleQcData.pcaScores}"""
      .in(arrayStores(array).sampleQcData.statsAdj)
      .out(arrayStores(array).sampleQcData.corrPlots, arrayStores(array).sampleQcData.pcaLoadings, arrayStores(array).sampleQcData.pcaPlots, arrayStores(array).sampleQcData.pcaScores)
      .tag(s"${arrayStores(array).sampleQcData.statsAdj}.rIstatsAdjPca".split("/").last)

  }
  
  /**
   * Sample QC PCA Clustering Step
   *  Description: Cluster PCs of adjusted sample QC metrics
   *  Requires: Klustakwik, R
   */
  
  drmWith(imageName = s"${utils.image.imgTools}", cores = projectConfig.resources.sampleQcKlustakwikPca.cpus, mem = projectConfig.resources.sampleQcKlustakwikPca.mem, maxRunTime = projectConfig.resources.sampleQcKlustakwikPca.maxRunTime) {

    cmd"""${utils.bash.shKlustakwikPca} ${utils.binary.binKlustakwik} ${arrayStores(array).sampleQcData.pcaScores} ${arrayStores(array).sampleQcPcaClusterData.fet} ${arrayStores(array).sampleQcPcaClusterData.base} ${arrayStores(array).sampleQcPcaClusterData.log}"""
      .in(arrayStores(array).sampleQcData.pcaScores)
      .out(arrayStores(array).sampleQcPcaClusterData.fet, arrayStores(array).sampleQcPcaClusterData.clu, arrayStores(array).sampleQcPcaClusterData.klg, arrayStores(array).sampleQcPcaClusterData.log)
      .tag(s"${arrayStores(array).sampleQcPcaClusterData.base}.shKlustakwikPca".split("/").last)

  }

  drmWith(imageName = s"${utils.image.imgR34}") {

    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rIstatsPcsGmmClusterPlot}
      --pca-scores ${arrayStores(array).sampleQcData.pcaScores}
      --cluster ${arrayStores(array).sampleQcPcaClusterData.clu}
      --outliers ${arrayStores(array).sampleQcPcaClusterData.outliers}
      --plots ${arrayStores(array).sampleQcPcaClusterData.plots}
      --xtabs ${arrayStores(array).sampleQcPcaClusterData.xtab}
      --id ${projectConfig.projectId}"""
      .in(arrayStores(array).sampleQcData.pcaScores, arrayStores(array).sampleQcPcaClusterData.clu)
      .out(arrayStores(array).sampleQcPcaClusterData.outliers, arrayStores(array).sampleQcPcaClusterData.plots, arrayStores(array).sampleQcPcaClusterData.xtab)
      .tag(s"${arrayStores(array).sampleQcData.pcaScores}.rIstatsPcsGmmClusterPlot".split("/").last)
  
  }
  
  /**
   * Sample QC Individual Stats Clustering Step
   *  Description: Cluster PCs of adjusted sample QC metrics
   *  Requires: Klustakwik, R
   */
  
  for {
  
    (metric, metricData) <- arrayStores(array).sampleQcMetricClusterData
  
  } yield { 

    drmWith(imageName = s"${utils.image.imgTools}", cores = projectConfig.resources.sampleQcKlustakwikPca.cpus, mem = projectConfig.resources.sampleQcKlustakwikPca.mem, maxRunTime = projectConfig.resources.sampleQcKlustakwikPca.maxRunTime) {

      cmd"""${utils.bash.shKlustakwikMetric} ${utils.binary.binKlustakwik} ${arrayStores(array).sampleQcData.statsAdj} ${metric} ${metricData.base} ${metricData.fet} ${metricData.log}"""
        .in(arrayStores(array).sampleQcData.statsAdj)
        .out(metricData.fet, metricData.clu, metricData.klg, metricData.log)
        .tag(s"${metricData.base}.shKlustakwikMetric".split("/").last)
  
    }
  
  }

  val metricCluFiles = {

    for {
      m <- arrayStores(array).sampleQcMetricClusterData.map(e => e._1).toSeq
    } yield {
  
      m + "___" + s"""${arrayStores(array).sampleQcMetricClusterData(m).clu.toString.split("@")(1)}"""
  
    }
  
  }

  drmWith(imageName = s"${utils.image.imgR34}") {
  
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rIstatsAdjGmmPlotMetrics}
      --ind-clu-files "${metricCluFiles.mkString(",")}"
      --stats-unadj ${arrayStores(array).sampleQcData.stats}
      --stats-adj ${arrayStores(array).sampleQcData.statsAdj}
      --metric-pca-outliers ${arrayStores(array).sampleQcPcaClusterData.outliers}
      --boxplots ${arrayStores(array).sampleQcData.boxPlots}
      --discreteness ${arrayStores(array).sampleQcData.discreteness}
      --outliers-table ${arrayStores(array).sampleQcData.outliers}
      --metric-plots ${arrayStores(array).sampleQcData.metricPlots}"""
      .in(arrayStores(array).sampleQcMetricClusterData.map(e => e._2).map(_.clu).toSeq :+ arrayStores(array).sampleQcData.stats :+ arrayStores(array).sampleQcData.statsAdj :+ arrayStores(array).sampleQcPcaClusterData.outliers)
      .out(arrayStores(array).sampleQcData.boxPlots, arrayStores(array).sampleQcData.discreteness, arrayStores(array).sampleQcData.outliers, arrayStores(array).sampleQcData.metricPlots)
      .tag(s"${arrayStores(array).sampleQcData.stats}.rIstatsAdjGmmPlotMetrics".split("/").last)

  }

  /**
   * Restore Samples Step
   * Requires: Python
   */
  
  drmWith(imageName = s"${utils.image.imgPython27}") {
  
    cmd"""${utils.binary.binPython} ${utils.python.pyMakeSamplesRestoreTable}
      --ancestry-outliers-keep "${array.ancestryOutliersKeep.mkString(",")}"
      --duplicates-keep "${array.duplicatesKeep.mkString(",")}"
      --famsize-keep "${array.famsizeKeep.mkString(",")}"
      --sampleqc-keep "${array.sampleqcKeep.mkString(",")}"
      --sexcheck-keep "${array.sexcheckKeep.mkString(",")}"
      --out ${arrayStores(array).filterQc.samplesRestore}"""
      .out(arrayStores(array).filterQc.samplesRestore)
      .tag(s"${arrayStores(array).filterQc.samplesRestore}".split("/").last)

  }
  
  /**
   * Compile Sample Exclusions Step
   * Requires: Python
   */
  
  drmWith(imageName = s"${utils.image.imgPython27}") {
  
    cmd"""${utils.binary.binPython} ${utils.python.pyCompileExclusions}
      --ancestry-inferred ${ProjectStores.ancestryInferred}
      --kinship-related ${arrayStores(array).kinshipData.kin0Related}
      --kinship-famsizes ${arrayStores(array).kinshipData.famSizes}
      --sampleqc-outliers ${arrayStores(array).sampleQcData.outliers}
      --sampleqc-incomplete-obs ${arrayStores(array).sampleQcData.incompleteObs}
      --sexcheck-problems ${arrayStores(array).sexcheckData.problems}
      --restore ${arrayStores(array).filterQc.samplesRestore}
      --out ${arrayStores(array).filterQc.samplesExclude}"""
      .in(ProjectStores.ancestryInferred, arrayStores(array).kinshipData.kin0Related, arrayStores(array).kinshipData.famSizes, arrayStores(array).sampleQcData.outliers, arrayStores(array).sampleQcData.incompleteObs, arrayStores(array).sexcheckData.problems, arrayStores(array).filterQc.samplesRestore)
      .out(arrayStores(array).filterQc.samplesExclude)
      .tag(s"${arrayStores(array).filterQc.samplesExclude}".split("/").last)
  
  }

}
