/**
  * Results Summary Step
  *  Description: Generate Results Summary Data
  *  Requires: Python, R
  */
import ProjectConfig._
import ProjectStores._
import AssocStores._
import ResultsSummaryStores._

def ResultsSummary(configModel: ConfigModel, configCohort: Option[ConfigCohort], configMeta: Option[ConfigMeta], configMerge: Option[ConfigMerge]): Unit = {

  val summaryStores = resultsSummaryStores((configModel, configCohort, configMeta, configMerge))

  val results = configCohort match {
    case Some(s) => assocStores((configModel, configCohort.get, None)).results
    case None =>
      configMeta match {
        case Some(s) => metaStores((configModel, configMeta.get)).results
        case None => mergeStores((configModel, configMerge.get)).results
      }
  }

  drmWith(imageName = s"${utils.image.imgPython27}") {
  
    cmd"""${utils.binary.binPython} ${utils.python.pyTop1000}
      --results ${results}
      --p pval 
      --out ${summaryStores.resultsSummaryData.top1000}"""
      .in(results)
      .out(summaryStores.resultsSummaryData.top1000)
      .tag(s"${summaryStores.resultsSummaryData.top1000}".split("/").last)

    cmd"""${utils.bash.shTop1000Genes} ${summaryStores.resultsSummaryData.top1000} ${utils.binary.binPython} ${utils.python.pyAddGeneAnnot} ${ProjectStores.genePositions} ${summaryStores.resultsSummaryData.top1000Genes}"""
      .in(summaryStores.resultsSummaryData.top1000, ProjectStores.genePositions)
      .out(summaryStores.resultsSummaryData.top1000Genes)
      .tag(s"${summaryStores.resultsSummaryData.top1000Genes}".split("/").last)
  
  }

  val hiLdFiles = knownLociStores.filter(e => e._1._1 == configModel).map(e => ProjectStores.knownStores(e._1._3).hiLd).toSeq.distinct

  val hiLdStrings = {
  
    for {
      x <- hiLdFiles
    } yield {
  
      s"""${x.toString.split("@")(1)}"""
  
    }
  
  }.distinct
  
  drmWith(imageName = s"${utils.image.imgR34}") {
  
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rTop20}
      --results ${summaryStores.resultsSummaryData.top1000}
      --chr "#chr"
      --pos pos
      --genes ${summaryStores.resultsSummaryData.top1000Genes}
      --known-loci "${hiLdStrings.mkString(",")}"
      --p pval
      --test ${configModel.test}
      --out ${summaryStores.resultsSummaryData.top20AnnotAlignedRisk}"""
      .in(hiLdFiles :+ summaryStores.resultsSummaryData.top1000 :+ summaryStores.resultsSummaryData.top1000Genes)
      .out(summaryStores.resultsSummaryData.top20AnnotAlignedRisk)
      .tag(s"${summaryStores.resultsSummaryData.top20AnnotAlignedRisk}".split("/").last)

  }

  drmWith(imageName = s"${utils.image.imgPython27}") {
    
    cmd"""${utils.binary.binPython} ${utils.python.pyQqPlot}
      --results ${results}
      --p pval
      --out ${summaryStores.resultsSummaryData.qqPlotPng}"""
      .in(results)
      .out(summaryStores.resultsSummaryData.qqPlotPng)
      .tag(s"${summaryStores.resultsSummaryData.qqPlotPng}".split("/").last)
    
    cmd"""${utils.binary.binPython} ${utils.python.pyMhtPlot}
      --results ${results}
      --chr "#chr"
      --pos pos
      --p pval
      --out ${summaryStores.resultsSummaryData.mhtPlotPng}"""
      .in(results)
      .out(summaryStores.resultsSummaryData.mhtPlotPng)
      .tag(s"${summaryStores.resultsSummaryData.mhtPlotPng}".split("/").last)

  }


  projectConfig.maxSigRegions match {

    case Some(s) =>

      drmWith(imageName = s"${utils.image.imgPython27}") {
        
        cmd"""${utils.binary.binPython} ${utils.python.pyExtractTopRegions}
          --results ${results}
          --chr "#chr"
          --pos pos
          --p pval
          --max-regions ${s}
          --out ${summaryStores.resultsSummaryData.sigRegions}"""
          .in(results)
          .out(summaryStores.resultsSummaryData.sigRegions)
          .tag(s"${summaryStores.resultsSummaryData.sigRegions}".split("/").last)
      
      }

    case None =>

      drmWith(imageName = s"${utils.image.imgPython27}") {
        
        cmd"""${utils.binary.binPython} ${utils.python.pyExtractTopRegions}
          --results ${results}
          --chr "#chr"
          --pos pos
          --p pval
          --out ${summaryStores.resultsSummaryData.sigRegions}"""
          .in(results)
          .out(summaryStores.resultsSummaryData.sigRegions)
          .tag(s"${summaryStores.resultsSummaryData.sigRegions}".split("/").last)
      
      }

  }

  drmWith(imageName = s"${utils.image.imgLocuszoom}") {
  
    cmd"""${utils.bash.shRegPlot} 
      ${utils.binary.binTabix}
      ${utils.binary.binLocuszoom}
      ${utils.binary.binGhostscript}
      ${summaryStores.resultsSummaryData.sigRegions}
      ${results}
      EUR
      hg19
      1000G_Nov2014
      ${summaryStores.resultsSummaryData.regPlotsBase}"""
      .in(results, summaryStores.resultsSummaryData.sigRegions)
      .out(summaryStores.resultsSummaryData.regPlotsPdf)
      .tag(s"${summaryStores.resultsSummaryData.regPlotsPdf}".split("/").last)
  
  }

}

def ResultsKnownLociSummary(configModel: ConfigModel, configCohort: Option[ConfigCohort], configMeta: Option[ConfigMeta], configMerge: Option[ConfigMerge], configKnown: ConfigKnown): Unit = {

  val summaryKnownLociStores = resultsKnownLociSummaryStores((configModel, configCohort, configMeta, configMerge, configKnown))

  val results = configCohort match {
    case Some(s) => knownLociStores((configModel, configCohort.get, configKnown, None)).results
    case None =>
      configMeta match {
        case Some(s) => knownMetaStores((configModel, configMeta.get, configKnown)).results
        case None => knownMergeStores((configModel, configMerge.get, configKnown)).results
      }
  }

  drmWith(imageName = s"${utils.image.imgR34}") {
  
    cmd"""${utils.binary.binRscript} --vanilla --verbose
      ${utils.r.rTop50Known}
      --results ${results}
      --known-loci ${ProjectStores.knownStores(configKnown).data}
      --known-ld ${ProjectStores.knownStores(configKnown).hiLd}
      --known-loci-n "${configKnown.n}"
      --known-loci-case "${configKnown.nCase}"
      --known-loci-ctrl "${configKnown.nCtrl}"
      --test ${configModel.test}
      --out ${summaryKnownLociStores.resultsKnownLociSummaryData.top50}"""
      .in(results, ProjectStores.knownStores(configKnown).data, ProjectStores.knownStores(configKnown).hiLd)
      .out(summaryKnownLociStores.resultsKnownLociSummaryData.top50)
      .tag(s"${summaryKnownLociStores.resultsKnownLociSummaryData.top50}".split("/").last)
  
  }

}
