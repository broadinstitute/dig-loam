import ProjectConfig._
import Collections._
import DirTree._

final case class ResultsSummaryData(
  sigRegions: Store,
  top1000: Store,
  top1000Genes: Store,
  top20AnnotAlignedRisk: Store,
  qqPlotPng: Store,
  mhtPlotPng: Store,
  regPlotsPdf: Store,
  regPlotsBase: Path)

final case class ResultsKnownLociSummaryData(
  top50: Store)

final case class ResultsSummary(
  resultsSummaryData: ResultsSummaryData)

final case class ResultsKnownLociSummary(
  resultsKnownLociSummaryData: ResultsKnownLociSummaryData)

val resultsSummaryStores = (
    (
      for {
		x <- modelCohortsReport
      } yield {
        (x.model, Some(x.cohort), None, None)
      } 
    ) ++
    (
      for {
        x <- modelMetasReport
      } yield {
        (x.model, None, Some(x.meta), None)
      }
    ) ++
    (
      for {
        x <- modelMerges
      } yield {
        (x.model, None, None, Some(x.merge))
      }
    )
  ).map { rs => 

  val model = rs._1
  val cohort: Option[ConfigCohort] = rs._2
  val meta: Option[ConfigMeta] = rs._3
  val merge: Option[ConfigMerge] = rs._4

  val prefix = s"${projectConfig.projectId}"
  val baseName = cohort match {
    case Some(s) => s"${prefix}.${s.id}.${model.id}"
    case None => 
      meta match {
        case Some(s) => s"${prefix}.${s.id}.${model.id}"
        case None => 
          merge match {
            case Some(s) => s"${prefix}.${s.id}.${model.id}"
            case None => s"${prefix}.${model.id}"
          }
      }
  }

  val regPlotsBaseString = s"${baseName}.results.regplots"

  val local_home = cohort match {
    case Some(s) => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(s).local.get
    case None => 
      meta match {
        case Some(s) => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).metas(s).local.get
        case None => 
          merge match {
            case Some(s) => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).merges(s).local.get
            case None => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get
          }
      }
  }

  val resultsSummaryData = ResultsSummaryData(
    sigRegions = store(local_home / s"${baseName}.results.sigregions.tsv"),
    top1000 = store(local_home / s"${baseName}.results.top1000.tsv"),
    top1000Genes = store(local_home / s"${baseName}.results.top1000.genes.tsv"),
    top20AnnotAlignedRisk = store(local_home / s"${baseName}.results.top20.annot.aligned_risk.tsv"),
    qqPlotPng = store(local_home / s"${baseName}.results.qq.png"),
    mhtPlotPng = store(local_home / s"${baseName}.results.mht.png"),
    regPlotsBase = local_home / regPlotsBaseString,
    regPlotsPdf = store(local_home / s"${regPlotsBaseString}.pdf"))

  rs -> ResultsSummary(
    resultsSummaryData = resultsSummaryData)

}.toMap

val resultsKnownLociSummaryStores = (
    (
      for {
		x <- modelCohortKnownsReport
      } yield {
        (x.model, Some(x.cohort), None, None, x.known)
      } 
    ) ++
    (
      for {
        x <- modelMetaKnownsReport
      } yield {
        (x.model, None, Some(x.meta), None, x.known)
      }
    ) ++
    (
      for {
        x <- modelMergeKnowns
      } yield {
        (x.model, None, None, Some(x.merge), x.known)
      }
    )
  ).map { rs => 

  val model = rs._1
  val cohort: Option[ConfigCohort] = rs._2
  val meta: Option[ConfigMeta] = rs._3
  val merge: Option[ConfigMerge] = rs._4
  val known: ConfigKnown = rs._5

  val prefix = s"${projectConfig.projectId}"
  val baseName = cohort match {
    case Some(s) => s"${prefix}.${s.id}.${model.id}.${known.id}"
    case None => 
      meta match {
        case Some(s) => s"${prefix}.${s.id}.${model.id}.${known.id}"
        case None => 
          merge match {
            case Some(s) => s"${prefix}.${s.id}.${model.id}.${known.id}"
            case None => s"${prefix}.${model.id}.${known.id}"
          }
      }
  }

  val local_home = cohort match {
    case Some(s) => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).cohorts(s).local.get
    case None => 
      meta match {
        case Some(s) => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).metas(s).local.get
        case None => 
          merge match {
            case Some(s) => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).merges(s).local.get
            case None => dirTree.analysisPhenoMap(projectConfig.Phenos.filter(e => e.id == model.pheno).head).models(model).base.local.get
          }
      }
  }

  val resultsKnownLociSummaryData = ResultsKnownLociSummaryData(
    top50 = store(local_home / s"${baseName}.results.top50.tsv"))

  rs -> ResultsKnownLociSummary(
    resultsKnownLociSummaryData = resultsKnownLociSummaryData)

}.toMap
