//val LABEL = "BIOME_AFFY"

//TODO: better name
//TODO: New value???
//val ryansDir = path("/humgen/diabetes/users/ryank/data/biome_revised")

//val KINSHIP_CALC_SAMPLE_SHARING_R = ryansDir / "scripts" / "kinship_calc_sample_sharing.r"

//val REGIONS_EXCLUDE = ryansDir / "files" / "regions.exclude"

//val data = ryansDir / "data"

//TODO
val CHROMOSOME = 22

// ===================== From CAMP.source =====================

// file definitions
private val ryansDir = path("/humgen/diabetes/users/ryank")
val dataDir = ryansDir / "data"
val softwareDir = ryansDir / "software"
private val scriptsDir = ryansDir / "pipelines/QCpipeline/scripts"

//TODO
val datasetDir = dataDir / "camp"
//TODO
val DATA = datasetDir / "data/camp"

// DATA_TYPE = PLINK or VCF
val DATA_TYPE = "PLINK"

// Output file prefix
val LABEL = "CAMP"

// Files
//TODO
val REGIONS_EXCLUDE = datasetDir / "files/regions.exclude"

val KG_V3_5K_AF = dataDir / "1kg_phase3/1000GP_Phase3_vcf_purcell5k/allele_frequencies.tsv"
val KG_V3_5K_PCA_LOADINGS = dataDir / "1kg_phase3/1000GP_Phase3_vcf_purcell5k/pca.loadings.tsv"
val KG_ETHNICITY = dataDir / "biome_revised/files/integrated_call_samples_v2.20130502.ALL.panel"
val PHENO = dataDir / "biome_revised/phenotype/AMPT2D-PHENOTYPES_FINAL.txt"
val KG_VCF_BASE = dataDir / s"1kg_phase3/1000GP_Phase3_vcf/ALL.chr${CHROMOSOME}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes"
val KG_GENETIC_MAP = dataDir / s"1kg_phase3/1000GP_Phase3/genetic_map_chr${CHROMOSOME}_combined_b37.txt"
val EAGLE_GENETIC_MAP = softwareDir / "Eagle_v2.3/tables/genetic_map_hg19_withX.txt.gz"

// Phenotype file columns
val PHENO_ID_COL = "ID"
val PHENO_RACE_COL = "RACE"

// R scripts
val PLOT_MISSINGNESS_R = scriptsDir / "data_plot_missingness.r"
val KEEP_BEST_DUP_R = scriptsDir / "data_keep_best_duplicate.r"
val KINSHIP_CALC_SAMPLE_SHARING_R = scriptsDir / "kinship_calc_sample_sharing.r"
val GET_COMMON_VARIANTS_R = scriptsDir / "get_common_variants.r"
val ADD_ETHNICITY_R = scriptsDir / "add_ethnicity.r"
val PLOT_ANCESTRY_PCA_R = scriptsDir / "plot_ancestry_pca.r"
val ANCESTRY_CLUSTER_PLOT_R = scriptsDir / "ancestry_cluster_plot.r"
val ANCESTRY_CLUSTER_MERGE_R = scriptsDir / "ancestry_cluster_merge.r"
val GET_DOUBLETONS_R = scriptsDir / "get_doubletons.r"
val ISTATS_COMPILE_R = scriptsDir / "istats_compile.r"
val CALC_ISTATS_ADJ_R = scriptsDir / "calc_istats_adj.r"
val BIN_METRIC_R = scriptsDir / "bin_metric.r"
val ISTATS_ADJ_PCA_R = scriptsDir / "istats_adj_pca.r"
val ISTATS_PCS_GMM_CLUSTER_PLOT_R = scriptsDir / "istats_pcs_gmm_cluster_plot.r"
val ISTATS_PCS_GMM_PLOT_METRICS_R = scriptsDir / "istats_pcs_gmm_plot_metrics.r"
val ISTATS_ADJ_GMM_PLOT_METRICS_R = scriptsDir / "istats_adj_gmm_plot_metrics.r"
val COMPARE_PLINK_KING_R = scriptsDir / "compare_plink_king.r"
val GENERATE_UNREL_FILE_R = scriptsDir / "generate_unrel_file.r"
val COMPILE_PEDIGREE_PY = scriptsDir / "compile_pedigree.py"
val PLOT_FINAL_PCS_R = scriptsDir / "plot_final_pcs.r"