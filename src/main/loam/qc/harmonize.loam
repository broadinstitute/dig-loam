import binaries._
import config._
import store_helpers._

/*
  Input: Plink binary fileset ${DATA}.bed/bim/fam, $KG_VCF_BASE reference VCF file, $LABEL output file prefix
  Output: data/${LABEL}.chr${CHROMOSOME}.bed/bim/fam, data/${LABEL}.chr${CHROMOSOME}.harmonized.bed/bim/fam/log(/nosex?/hh?), data/${LABEL}.chr${CHROMOSOME}.harmonized_idUpdates.txt, data/${LABEL}.chr${CHROMOSOME}.harmonized_snpLog.log
*/

//TODO: Wire up inputs and outputs

def makeBedBimFam(prefix: String) = bedBimFam(extension => s"${prefix}.${extension}")

val inputFiles = makeBedBimFam(DATA)

val outputFilesStep0 = makeBedBimFam(s"data/${LABEL}.chr${CHROMOSOME}")

val outputFilesStep1 = makeBedBimFam(s"data/${LABEL}.chr${CHROMOSOME}.harmonized")
  
cmd"""${plink} --bfile $inputPrefix --chr ${CHROMOSOME} --keep-allele-order --make-bed 
      --out ${data}/${LABEL}.chr${CHROMOSOME}""".in(inputFiles).out(outputFilesStep0)

cmd"""$GENOTYPE_HARMONIZER
		--input data/${LABEL}.chr${CHROMOSOME}
		--inputType PLINK_BED
		--output data/${LABEL}.chr${CHROMOSOME}.harmonized
		--outputType PLINK_BED
		--ref $KG_VCF_BASE
		--refType VCF
		--keep
		--update-id
		--variants 1000
		--mafAlign 0.1
		--update-id
		--update-reference-allele
		--debug""".in(outputFilesStep0).out(outputFilesStep1)