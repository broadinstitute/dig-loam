import binaries._
import config._
import store_helpers._

import loamstream.model.Store
import loamstream.loam.LoamStore.Untyped

val kinshipPrefix: String = outputStoreName(".kinship")("")

val kinshipFileBedBimFam: Seq[Untyped] = bedBimFam(outputStore(".kinship"))

val kinshipFilePruneIn: Untyped = outputStore(".kinship.prune.in")("")
val kinshipFilePruned: String = outputStoreName(".kinship.pruned")("")
val kinshipFilePrunedBedBimFam @ Seq(kinshipFilePrunedBed, _, _) = bedBimFam(outputStore(".kinship.pruned"))

val kinshipFilePrunedKingPrefix: String = outputStoreName(".kinship.pruned")(".king")

val Seq(
	  kinshipFilePrunedKingKin0, 
	  kinshipFilePrunedKingKin0Related, 
	  kinshipFilePrunedKingSharingCounts) = {
	  
  withExtensions(".king.kin0", ".king.kin0.related", ".king.sharing_counts.txt")(outputStore(".kinship.pruned"))
}

cmd"""$plink --bfile $inputPrefix --geno 0.02 --maf 0.01 --exclude $REGIONS_EXCLUDE --make-bed --out $kinshipPrefix""".in(inputBedBimFam).out(kinshipFileBedBimFam)

cmd"""$plink --bfile $kinshipPrefix --indep-pairwise 1500 150 0.2 --out $kinshipPrefix""".in(kinshipFileBedBimFam).out(kinshipFilePruneIn)

cmd"""$plink --bfile $kinshipPrefix --extract $kinshipFilePruneIn --make-bed --out $kinshipFilePruned""".in(kinshipFileBedBimFam :+ kinshipFilePruneIn).out(kinshipFilePrunedBedBimFam)

cmd"""$KING -b $kinshipFilePrunedBed --kinship --prefix $kinshipFilePrunedKingPrefix""".in(kinshipFilePrunedBedBimFam).out(kinshipFilePrunedKingKin0)

cmd"""(head -1 ${kinshipFilePrunedKingKin0} ; sed '1d' ${kinshipFilePrunedKingKin0} | awk '{if($$8 >= 0.0884) print $$0}' | sort -rn -k8,8) > ${kinshipFilePrunedKingKin0Related}""".in(kinshipFilePrunedKingKin0).out(kinshipFilePrunedKingKin0Related)

//Requires 'use'ing 'R-3.1' :\
cmd"""R --vanilla --args $kinshipFilePrunedKingKin0Related $kinshipFilePrunedKingSharingCounts < $KINSHIP_CALC_SAMPLE_SHARING_R""".in(kinshipFilePrunedKingKin0Related).out(kinshipFilePrunedKingSharingCounts)
