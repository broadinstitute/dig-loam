/* Analysis Pipeline */
import loamstream.util.Files

// Binaries
val software = path("/humgen/diabetes/users/ryank/software")
val tabix = software / "htslib-1.3/bin/tabix"

val epacts = path("/broad/software/free/Linux/redhat_6_x86_64/pkgs/epacts_3.2.6/bin/epacts")
val python = "python"

// Scripts
val getBins = "/humgen/diabetes/users/kyuksel/pipeline/analysis/workingexampleofvcfmapping/get_bins.py"

// Inputs
val vcf = store[TXT].at("/humgen/diabetes2/users/ryank/data/metsim/data/METSIM_EX.final.chr1-22.vcf.bgz")
val ped = store[TXT].at("/humgen/diabetes2/users/ryank/data/metsim/pheno/phase1/METSIM_EX.EUR.FG_trans_adj_Age_raw_resid_invn.unrel.epacts.ped")

// Conf
val pheno = "FG_trans_adj_Age_raw_resid_invn"
val chr = 1
val numVars = 100

// Variables
val variantsFileName = s"chr${chr}.variants.gz"
val variants = store[TXT].at(variantsFileName)
val variantsIndex = store[TXT].at(s"${variantsFileName}.tbi")

val regionsFileName = s"chr${chr}.${numVars}pos.regions"
val regionsStore = store[TXT].at(regionsFileName)

// Pipeline Definition
local {
  cmd"""zcat $vcf | grep -v "^#" | awk -v chr=$chr '{if($$1 == chr) print $$0}' | cut -f-5 | bgzip -c > $variants""".in(vcf).out(variants)
  cmd"""$tabix -b 2 -e 2 $variants""".in(variants).out(variantsIndex)
  cmd"""$python $getBins --vcf $variants --out $regionsStore --n $numVars""".in(variants).out(regionsStore)

  andThen {
    val regions = Files.readFrom(regionsFileName).split(System.lineSeparator)

    for (region <- regions) {
      val epactsOutputFilesBaseName = s"METSIM_EX.EUR.FG_trans_adj_Age_raw_resid_invn.chr$region".replace(':', '.')
      cmd"""epacts single
        --vcf /humgen/diabetes2/users/ryank/data/metsim/data/METSIM_EX.final.chr1-22.vcf.bgz
        --ped /humgen/diabetes2/users/ryank/data/metsim/pheno/phase1/METSIM_EX.EUR.FG_trans_adj_Age_raw_resid_invn.unrel.epacts.ped
        --pheno $pheno
        --cov PC1
        --cov PC2
        --cov PC3
        --region $region
        --test q.linear
        --out $epactsOutputFilesBaseName
        --no-plot
        --run 1""".in(vcf, ped)
    }
  }
}
