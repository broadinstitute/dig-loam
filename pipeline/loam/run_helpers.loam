import scala.util.Try

final case class RunConfig(outLabel: String, inputVcfPath: Path, phenotypeFile: Path)

object RunConfig {
  def fromMap(params: Map[String, String]): Try[RunConfig] = {
    import loamstream.util.Files.tryFile
    import loamstream.util.Options.toTry
    
    def tryGet(key: String): Try[String] = toTry(params.get(key))(s"Required key '$key' not present in $params")
    
    def tryGetPath(key: String): Try[Path] = tryGet(key).flatMap(tryFile)
    
  	for {
  	  outLabel <- tryGet("outLabel")
  	  vcfPath <- tryGetPath("vcfPath")
  	  phenotypeFilePath <- tryGetPath("phenotypeFilePath")
  	} yield {
  	  RunConfig(outLabel, vcfPath, phenotypeFilePath)
  	}
  }
}

/**
 * @param outLabel - Label for output prefix
 * @param vcfPath - Input VCF file path
 * @param phenotypeFilePath - Phenotype file path
 *
 * Apr 21, 2017
 */
def paramMap(outLabel: String, vcfPath: String, phenotypeFilePath: String): Map[String,String] = {
  Map(
    "vcfPath" -> vcfPath,
    "outLabel" -> outLabel,
    "phenotypeFilePath" -> phenotypeFilePath)
}
