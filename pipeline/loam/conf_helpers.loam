import loamstream.loam.LoamStore

/**
 * @author clint
 * Apr 25, 2017
 * A trait to represent all the parameters needed by qc.loam
 */ 
trait QcParams {
  def startChromosome: Int
  def endChromosome: Int
  def numChromosomes: Int

  /** Input VCF file */
  def inVCF: LoamStore[VCF]

  /** Output directory path */
  def outDirLoc: String
  def outDIR: Path

  /** Label for output prefix */
  def outLABEL: String

  /** Phenotype file */
  def inPHENO: LoamStore[TXT]

  /** Column names for sample ID and self reported race */
  def PHENO_ID: String
  def PHENO_SR_RACE: String

  /** Regions to exclude from QC (high LD / associated with T2D) */
  def inREGIONS_EXCLUDE: LoamStore[TXT]

  /** 1KG PCA input */
  def inKG_V3_5K_AF: LoamStore[TXT]
  def inKG_V3_5K_PCA_SCORES: LoamStore[TXT]
  def inKG_V3_5K_PCA_LOADINGS: LoamStore[TXT]

  /** Hail VDS input */
  def inKG_HAIL: LoamStore[TXT]

  /**
   * 1KG VCF base name (excluding .vcf.gz)
   *  [CHROMOSOME] is later replaced by the chromosome number
   */
  def KG_VCF_BASE: String
}

object QcParams {
  class Defaults extends QcParams {
    override val startChromosome = 1
    override val endChromosome = 22
    override def numChromosomes = endChromosome - startChromosome + 1

    /** Input VCF file */
   override val inVCF = store[VCF].at("/humgen/diabetes/users/ryank/data/camp/data/camp.vcf.gz").asInput
 
    /** Output directory path */
    override val outDirLoc = "qc"
    override val outDIR = path(outDirLoc)

    /** Label for output prefix */
    override val outLABEL = "CAMP"

    /** Phenotype file */
    override val inPHENO = store[TXT].at("/humgen/diabetes/users/ryank/data/camp/phenotype/AMP_T2DGENES_PhenotypeData_CAMP-MGH_8May2016.tsv").asInput

    /** Column names for sample ID and self reported race */
    override val PHENO_ID = "IID"
    override val PHENO_SR_RACE = "RACE"

    /** Regions to exclude from QC (high LD / associated with T2D) */
    override val inREGIONS_EXCLUDE = store[TXT].at("/humgen/diabetes/users/dig/loamstream/pipeline/QCpipeline/example/bash/files/regions.exclude").asInput

    /** 1KG PCA input */
    override val inKG_V3_5K_AF = store[TXT].at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/allele_frequencies.tsv").asInput
    override val inKG_V3_5K_PCA_SCORES = store[TXT].at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/pca.scores.tsv").asInput
    override val inKG_V3_5K_PCA_LOADINGS = store[TXT].at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/pca.loadings.tsv").asInput

    /** Hail VDS input */
    override val inKG_HAIL =
      store[TXT]
      .at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/ALL.purcell5k.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vds")
      .asInput

    /**
     * 1KG VCF base name (excluding .vcf.gz)
     *  [CHROMOSOME] is later replaced by the chromosome number
     */
    override val KG_VCF_BASE = "/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf/ALL.chr[CHROMOSOME].phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes"
  }
}
