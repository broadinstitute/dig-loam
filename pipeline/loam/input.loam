 
/** Output directory path */
val outDirLoc = "qc"
val outDIR = path(outDirLoc)

/** Column names for sample ID and self reported race */
val PHENO_ID = "IID"
val PHENO_SR_RACE = "RACE"

/** Regions to exclude from QC (high LD / associated with T2D) */
val inREGIONS_EXCLUDE = store[TXT].at("/humgen/diabetes/users/dig/loamstream/pipeline/QCpipeline/example/bash/files/regions.exclude").asInput

/** 1KG PCA input */
val inKG_V3_5K_AF = store[TXT].at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/allele_frequencies.tsv").asInput
val inKG_V3_5K_PCA_SCORES = store[TXT].at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/pca.scores.tsv").asInput
val inKG_V3_5K_PCA_LOADINGS = store[TXT].at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/pca.loadings.tsv").asInput

/** Hail VDS input */
val inKG_HAIL =
      store[TXT]
        .at("/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf_purcell5k/ALL.purcell5k.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vds")
        .asInput

/**
 * 1KG VCF base name (excluding .vcf.gz)
 *  [CHROMOSOME] is later replaced by the chromosome number
 */
val KG_VCF_BASE = "/humgen/diabetes/users/ryank/data/1kg_phase3/1000GP_Phase3_vcf/ALL.chr[CHROMOSOME].phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes"
